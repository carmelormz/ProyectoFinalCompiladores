Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func
Rule 2     creaDirFunc -> <empty>
Rule 3     ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER
Rule 4     ajustes -> IMPORT CTE_STR
Rule 5     var_func -> tipo ID actualiza_id var_o_func
Rule 6     var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
Rule 7     var_func -> <empty>
Rule 8     actualiza_id -> <empty>
Rule 9     var_o_func -> PARIZQ crea_func pars PARDER bloque_func funcs
Rule 10    var_o_func -> crea_var lista vars_lista PUNTCOM var_func
Rule 11    crea_var -> <empty>
Rule 12    bloque_func -> BRAIZQ vars_estatutos returns BRADER
Rule 13    vars_estatutos -> vars estatutos
Rule 14    vars_estatutos -> estatutos
Rule 15    estatutos -> estatuto estatutos
Rule 16    estatutos -> <empty>
Rule 17    returns -> RETURN expresion PUNTCOM
Rule 18    returns -> <empty>
Rule 19    vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
Rule 20    vars_lista -> COMA ID actualiza_id crea_var lista vars_lista
Rule 21    vars_lista -> <empty>
Rule 22    mas_vars -> vars
Rule 23    mas_vars -> <empty>
Rule 24    funcs -> func funcs
Rule 25    funcs -> <empty>
Rule 26    func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
Rule 27    func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
Rule 28    tipo_void -> <empty>
Rule 29    tipo_main -> <empty>
Rule 30    crea_func -> <empty>
Rule 31    expresion -> exp mas_exp
Rule 32    mas_exp -> MENOR exp
Rule 33    mas_exp -> MAYOR exp
Rule 34    mas_exp -> MENIGUAL exp
Rule 35    mas_exp -> MAYIGUAL exp
Rule 36    mas_exp -> IGUAL exp
Rule 37    mas_exp -> DIF exp
Rule 38    mas_exp -> AND exp
Rule 39    mas_exp -> OR exp
Rule 40    mas_exp -> <empty>
Rule 41    exp -> termino suma_resta
Rule 42    suma_resta -> SUMA termino
Rule 43    suma_resta -> RESTA termino
Rule 44    suma_resta -> <empty>
Rule 45    termino -> factor mult_div
Rule 46    mult_div -> MULT factor
Rule 47    mult_div -> DIV factor
Rule 48    mult_div -> <empty>
Rule 49    factor -> PARIZQ expresion PARDER
Rule 50    factor -> var_func_call
Rule 51    factor -> SUMA var_func_call
Rule 52    factor -> RESTA var_func_call
Rule 53    var_func_call -> var
Rule 54    var_func_call -> func_call
Rule 55    estatuto -> asignacion
Rule 56    estatuto -> condicion
Rule 57    estatuto -> escritura
Rule 58    estatuto -> ciclo
Rule 59    estatuto -> instruccion
Rule 60    estatuto -> func_call PUNTCOM
Rule 61    asignacion -> ID lista ASIG exp_input PUNTCOM
Rule 62    exp_input -> expresion
Rule 63    exp_input -> INPUT PARIZQ PARDER
Rule 64    condicion -> IF PARIZQ expresion PARDER bloque else_bloque
Rule 65    else_bloque -> ELSE bloque
Rule 66    else_bloque -> <empty>
Rule 67    escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM
Rule 68    arg_escritura -> expresion args_escritura
Rule 69    arg_escritura -> CTE_STR args_escritura
Rule 70    args_escritura -> COMA arg_escritura
Rule 71    args_escritura -> <empty>
Rule 72    ciclo -> REPEAT PARIZQ expresion PARDER bloque
Rule 73    tipo -> INT actualiza_tipo
Rule 74    tipo -> FLOAT actualiza_tipo
Rule 75    actualiza_tipo -> <empty>
Rule 76    lista -> CORIZQ expresion CORDER matriz
Rule 77    lista -> <empty>
Rule 78    matriz -> CORIZQ expresion CORDER
Rule 79    matriz -> <empty>
Rule 80    var -> ID lista
Rule 81    var -> CTE_I
Rule 82    var -> CTE_F
Rule 83    func_call -> ID PARIZQ args PARDER
Rule 84    args -> expresion arg
Rule 85    args -> <empty>
Rule 86    arg -> COMA expresion arg
Rule 87    arg -> <empty>
Rule 88    bloque -> BRAIZQ estatutos BRADER
Rule 89    pars -> tipo ID par
Rule 90    pars -> <empty>
Rule 91    par -> COMA tipo ID par
Rule 92    par -> <empty>
Rule 93    instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM
Rule 94    instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM
Rule 95    instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM
Rule 96    instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM
Rule 97    instruccion -> TURN PARIZQ expresion PARDER PUNTCOM
Rule 98    instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM
Rule 99    instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM
Rule 100   instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
Rule 101   instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM
Rule 102   instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
Rule 103   instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
Rule 104   instruccion -> UP PARIZQ PARDER PUNTCOM
Rule 105   instruccion -> DOWN PARIZQ PARDER PUNTCOM
Rule 106   instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
Rule 107   transform -> PUNTO altera transform
Rule 108   transform -> <empty>
Rule 109   altera -> ROTATE PARIZQ expresion PARDER
Rule 110   altera -> STRETCH PARIZQ expresion PARDER
Rule 111   altera -> FILL PARIZQ PARDER

Terminals, with rules where they appear

AND                  : 38
ARC                  : 103
ASIG                 : 61
BACKGROUND           : 3
BACKWARD             : 94
BRADER               : 3 12 88
BRAIZQ               : 3 12 88
CANVAS               : 3
CIRCLE               : 99
COLOR                : 106
COMA                 : 3 3 20 70 86 91 102 103 106 106
CORDER               : 76 78
CORIZQ               : 76 78
CTE_F                : 3 3 3 82
CTE_I                : 3 3 81
CTE_STR              : 4 69
DIF                  : 37
DIV                  : 47
DOWN                 : 105
ELSE                 : 65
FILL                 : 111
FLOAT                : 74
FORWARD              : 93
HEIGHT               : 3
ID                   : 1 5 6 19 20 26 27 61 80 83 89 91
IF                   : 64
IGUAL                : 36
IMPORT               : 4
INPUT                : 63
INT                  : 73
LEFT                 : 95
MAIN                 : 1
MAYIGUAL             : 35
MAYOR                : 33
MENIGUAL             : 34
MENOR                : 32
MODULE               : 1
MULT                 : 46
NGON                 : 102
OR                   : 39
PARDER               : 6 9 26 27 49 63 64 67 72 83 93 94 95 96 97 98 99 100 101 102 103 104 105 106 109 110 111
PARIZQ               : 6 9 26 27 49 63 64 67 72 83 93 94 95 96 97 98 99 100 101 102 103 104 105 106 109 110 111
PRINT                : 67
PUNTCOM              : 1 3 3 3 10 17 19 60 61 67 93 94 95 96 97 98 99 100 101 102 103 104 105 106
PUNTO                : 107
REPEAT               : 72
RESTA                : 43 52
RETURN               : 17
RIGHT                : 96
ROTATE               : 109
SIZE                 : 98
SQUARE               : 101
STRETCH              : 110
SUMA                 : 42 51
TRIANGLE             : 100
TURN                 : 97
UP                   : 104
VOID                 : 6 27
WIDTH                : 3
error                : 

Nonterminals, with rules where they appear

actualiza_id         : 1 5 6 19 20 26 27
actualiza_tipo       : 73 74
ajustes              : 1
altera               : 107
arg                  : 84 86
arg_escritura        : 67 70
args                 : 83
args_escritura       : 68 69
asignacion           : 55
bloque               : 64 65 72
bloque_func          : 1 6 9 26 27
ciclo                : 58
condicion            : 56
creaDirFunc          : 1
crea_func            : 1 6 9 26 27
crea_var             : 10 19 20
else_bloque          : 64
escritura            : 57
estatuto             : 15
estatutos            : 13 14 15 88
exp                  : 31 32 33 34 35 36 37 38 39
exp_input            : 61
expresion            : 17 49 62 64 68 72 76 78 84 86 93 94 95 96 97 98 99 100 101 102 102 103 103 106 106 106 109 110
factor               : 45 46 47
func                 : 24
func_call            : 54 60
funcs                : 6 9 24
instruccion          : 59
lista                : 10 19 20 61 80
mas_exp              : 31
mas_vars             : 19
matriz               : 76
mult_div             : 45
par                  : 89 91
pars                 : 6 9 26 27
programa             : 0
returns              : 12
suma_resta           : 41
termino              : 41 42 43
tipo                 : 5 19 26 89 91
tipo_main            : 1
tipo_void            : 6 27
transform            : 99 100 101 102 103 107
var                  : 53
var_func             : 1 10
var_func_call        : 50 51 52
var_o_func           : 5
vars                 : 13 22
vars_estatutos       : 12
vars_lista           : 10 19 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func

    MODULE          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> MODULE . ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func

    ID              shift and go to state 3


state 3

    (1) programa -> MODULE ID . creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func
    (2) creaDirFunc -> .

    PUNTCOM         reduce using rule 2 (creaDirFunc -> .)

    creaDirFunc                    shift and go to state 4

state 4

    (1) programa -> MODULE ID creaDirFunc . PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func

    PUNTCOM         shift and go to state 5


state 5

    (1) programa -> MODULE ID creaDirFunc PUNTCOM . ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func
    (3) ajustes -> . CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER
    (4) ajustes -> . IMPORT CTE_STR

    CANVAS          shift and go to state 7
    IMPORT          shift and go to state 8

    ajustes                        shift and go to state 6

state 6

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes . var_func tipo_main MAIN actualiza_id crea_func bloque_func
    (5) var_func -> . tipo ID actualiza_id var_o_func
    (6) var_func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (7) var_func -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    VOID            shift and go to state 11
    MAIN            reduce using rule 7 (var_func -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    var_func                       shift and go to state 9
    tipo                           shift and go to state 10

state 7

    (3) ajustes -> CANVAS . BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    BRAIZQ          shift and go to state 14


state 8

    (4) ajustes -> IMPORT . CTE_STR

    CTE_STR         shift and go to state 15


state 9

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func . tipo_main MAIN actualiza_id crea_func bloque_func
    (29) tipo_main -> .

    MAIN            reduce using rule 29 (tipo_main -> .)

    tipo_main                      shift and go to state 16

state 10

    (5) var_func -> tipo . ID actualiza_id var_o_func

    ID              shift and go to state 17


state 11

    (6) var_func -> VOID . tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (28) tipo_void -> .

    ID              reduce using rule 28 (tipo_void -> .)

    tipo_void                      shift and go to state 18

state 12

    (73) tipo -> INT . actualiza_tipo
    (75) actualiza_tipo -> .

    ID              reduce using rule 75 (actualiza_tipo -> .)

    actualiza_tipo                 shift and go to state 19

state 13

    (74) tipo -> FLOAT . actualiza_tipo
    (75) actualiza_tipo -> .

    ID              reduce using rule 75 (actualiza_tipo -> .)

    actualiza_tipo                 shift and go to state 20

state 14

    (3) ajustes -> CANVAS BRAIZQ . WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    WIDTH           shift and go to state 21


state 15

    (4) ajustes -> IMPORT CTE_STR .

    VOID            reduce using rule 4 (ajustes -> IMPORT CTE_STR .)
    INT             reduce using rule 4 (ajustes -> IMPORT CTE_STR .)
    FLOAT           reduce using rule 4 (ajustes -> IMPORT CTE_STR .)
    MAIN            reduce using rule 4 (ajustes -> IMPORT CTE_STR .)


state 16

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main . MAIN actualiza_id crea_func bloque_func

    MAIN            shift and go to state 22


state 17

    (5) var_func -> tipo ID . actualiza_id var_o_func
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)
    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 23

state 18

    (6) var_func -> VOID tipo_void . ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs

    ID              shift and go to state 24


state 19

    (73) tipo -> INT actualiza_tipo .

    ID              reduce using rule 73 (tipo -> INT actualiza_tipo .)


state 20

    (74) tipo -> FLOAT actualiza_tipo .

    ID              reduce using rule 74 (tipo -> FLOAT actualiza_tipo .)


state 21

    (3) ajustes -> CANVAS BRAIZQ WIDTH . CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_I           shift and go to state 25


state 22

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN . actualiza_id crea_func bloque_func
    (8) actualiza_id -> .

    BRAIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 26

state 23

    (5) var_func -> tipo ID actualiza_id . var_o_func
    (9) var_o_func -> . PARIZQ crea_func pars PARDER bloque_func funcs
    (10) var_o_func -> . crea_var lista vars_lista PUNTCOM var_func
    (11) crea_var -> .

    PARIZQ          shift and go to state 28
    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PUNTCOM         reduce using rule 11 (crea_var -> .)

    var_o_func                     shift and go to state 27
    crea_var                       shift and go to state 29

state 24

    (6) var_func -> VOID tipo_void ID . actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 30

state 25

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I . PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    PUNTCOM         shift and go to state 31


state 26

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id . crea_func bloque_func
    (30) crea_func -> .

    BRAIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 32

state 27

    (5) var_func -> tipo ID actualiza_id var_o_func .

    MAIN            reduce using rule 5 (var_func -> tipo ID actualiza_id var_o_func .)


state 28

    (9) var_o_func -> PARIZQ . crea_func pars PARDER bloque_func funcs
    (30) crea_func -> .

    INT             reduce using rule 30 (crea_func -> .)
    FLOAT           reduce using rule 30 (crea_func -> .)
    PARDER          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 33

state 29

    (10) var_o_func -> crea_var . lista vars_lista PUNTCOM var_func
    (76) lista -> . CORIZQ expresion CORDER matriz
    (77) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 77 (lista -> .)
    PUNTCOM         reduce using rule 77 (lista -> .)

    lista                          shift and go to state 34

state 30

    (6) var_func -> VOID tipo_void ID actualiza_id . crea_func PARIZQ pars PARDER bloque_func funcs
    (30) crea_func -> .

    PARIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 36

state 31

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM . HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    HEIGHT          shift and go to state 37


state 32

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func . bloque_func
    (12) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 38

state 33

    (9) var_o_func -> PARIZQ crea_func . pars PARDER bloque_func funcs
    (89) pars -> . tipo ID par
    (90) pars -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 90 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    pars                           shift and go to state 40
    tipo                           shift and go to state 41

state 34

    (10) var_o_func -> crea_var lista . vars_lista PUNTCOM var_func
    (20) vars_lista -> . COMA ID actualiza_id crea_var lista vars_lista
    (21) vars_lista -> .

    COMA            shift and go to state 43
    PUNTCOM         reduce using rule 21 (vars_lista -> .)

    vars_lista                     shift and go to state 42

state 35

    (76) lista -> CORIZQ . expresion CORDER matriz
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 36

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func . PARIZQ pars PARDER bloque_func funcs

    PARIZQ          shift and go to state 57


state 37

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT . CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_I           shift and go to state 58


state 38

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func .

    $end            reduce using rule 1 (programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func .)


state 39

    (12) bloque_func -> BRAIZQ . vars_estatutos returns BRADER
    (13) vars_estatutos -> . vars estatutos
    (14) vars_estatutos -> . estatutos
    (19) vars -> . tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo
    (55) estatuto -> . asignacion
    (56) estatuto -> . condicion
    (57) estatuto -> . escritura
    (58) estatuto -> . ciclo
    (59) estatuto -> . instruccion
    (60) estatuto -> . func_call PUNTCOM
    (61) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (64) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (67) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (72) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (93) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (94) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (95) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (96) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (97) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (98) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (99) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (100) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (101) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (102) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (103) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (104) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (105) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (106) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (83) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 16 (estatutos -> .)
    BRADER          reduce using rule 16 (estatutos -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 63
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    REPEAT          shift and go to state 73
    FORWARD         shift and go to state 74
    BACKWARD        shift and go to state 75
    LEFT            shift and go to state 76
    RIGHT           shift and go to state 77
    TURN            shift and go to state 78
    SIZE            shift and go to state 79
    CIRCLE          shift and go to state 80
    TRIANGLE        shift and go to state 81
    SQUARE          shift and go to state 82
    NGON            shift and go to state 83
    ARC             shift and go to state 84
    UP              shift and go to state 85
    DOWN            shift and go to state 86
    COLOR           shift and go to state 87

    vars_estatutos                 shift and go to state 59
    vars                           shift and go to state 60
    estatutos                      shift and go to state 61
    tipo                           shift and go to state 62
    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 40

    (9) var_o_func -> PARIZQ crea_func pars . PARDER bloque_func funcs

    PARDER          shift and go to state 88


state 41

    (89) pars -> tipo . ID par

    ID              shift and go to state 89


state 42

    (10) var_o_func -> crea_var lista vars_lista . PUNTCOM var_func

    PUNTCOM         shift and go to state 90


state 43

    (20) vars_lista -> COMA . ID actualiza_id crea_var lista vars_lista

    ID              shift and go to state 91


state 44

    (76) lista -> CORIZQ expresion . CORDER matriz

    CORDER          shift and go to state 92


state 45

    (31) expresion -> exp . mas_exp
    (32) mas_exp -> . MENOR exp
    (33) mas_exp -> . MAYOR exp
    (34) mas_exp -> . MENIGUAL exp
    (35) mas_exp -> . MAYIGUAL exp
    (36) mas_exp -> . IGUAL exp
    (37) mas_exp -> . DIF exp
    (38) mas_exp -> . AND exp
    (39) mas_exp -> . OR exp
    (40) mas_exp -> .

    MENOR           shift and go to state 94
    MAYOR           shift and go to state 95
    MENIGUAL        shift and go to state 96
    MAYIGUAL        shift and go to state 97
    IGUAL           shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101
    CORDER          reduce using rule 40 (mas_exp -> .)
    PARDER          reduce using rule 40 (mas_exp -> .)
    COMA            reduce using rule 40 (mas_exp -> .)
    PUNTCOM         reduce using rule 40 (mas_exp -> .)

    mas_exp                        shift and go to state 93

state 46

    (41) exp -> termino . suma_resta
    (42) suma_resta -> . SUMA termino
    (43) suma_resta -> . RESTA termino
    (44) suma_resta -> .

    SUMA            shift and go to state 103
    RESTA           shift and go to state 104
    MENOR           reduce using rule 44 (suma_resta -> .)
    MAYOR           reduce using rule 44 (suma_resta -> .)
    MENIGUAL        reduce using rule 44 (suma_resta -> .)
    MAYIGUAL        reduce using rule 44 (suma_resta -> .)
    IGUAL           reduce using rule 44 (suma_resta -> .)
    DIF             reduce using rule 44 (suma_resta -> .)
    AND             reduce using rule 44 (suma_resta -> .)
    OR              reduce using rule 44 (suma_resta -> .)
    CORDER          reduce using rule 44 (suma_resta -> .)
    PARDER          reduce using rule 44 (suma_resta -> .)
    COMA            reduce using rule 44 (suma_resta -> .)
    PUNTCOM         reduce using rule 44 (suma_resta -> .)

    suma_resta                     shift and go to state 102

state 47

    (45) termino -> factor . mult_div
    (46) mult_div -> . MULT factor
    (47) mult_div -> . DIV factor
    (48) mult_div -> .

    MULT            shift and go to state 106
    DIV             shift and go to state 107
    SUMA            reduce using rule 48 (mult_div -> .)
    RESTA           reduce using rule 48 (mult_div -> .)
    MENOR           reduce using rule 48 (mult_div -> .)
    MAYOR           reduce using rule 48 (mult_div -> .)
    MENIGUAL        reduce using rule 48 (mult_div -> .)
    MAYIGUAL        reduce using rule 48 (mult_div -> .)
    IGUAL           reduce using rule 48 (mult_div -> .)
    DIF             reduce using rule 48 (mult_div -> .)
    AND             reduce using rule 48 (mult_div -> .)
    OR              reduce using rule 48 (mult_div -> .)
    CORDER          reduce using rule 48 (mult_div -> .)
    PARDER          reduce using rule 48 (mult_div -> .)
    COMA            reduce using rule 48 (mult_div -> .)
    PUNTCOM         reduce using rule 48 (mult_div -> .)

    mult_div                       shift and go to state 105

state 48

    (49) factor -> PARIZQ . expresion PARDER
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 108
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 49

    (50) factor -> var_func_call .

    MULT            reduce using rule 50 (factor -> var_func_call .)
    DIV             reduce using rule 50 (factor -> var_func_call .)
    SUMA            reduce using rule 50 (factor -> var_func_call .)
    RESTA           reduce using rule 50 (factor -> var_func_call .)
    MENOR           reduce using rule 50 (factor -> var_func_call .)
    MAYOR           reduce using rule 50 (factor -> var_func_call .)
    MENIGUAL        reduce using rule 50 (factor -> var_func_call .)
    MAYIGUAL        reduce using rule 50 (factor -> var_func_call .)
    IGUAL           reduce using rule 50 (factor -> var_func_call .)
    DIF             reduce using rule 50 (factor -> var_func_call .)
    AND             reduce using rule 50 (factor -> var_func_call .)
    OR              reduce using rule 50 (factor -> var_func_call .)
    CORDER          reduce using rule 50 (factor -> var_func_call .)
    PARDER          reduce using rule 50 (factor -> var_func_call .)
    COMA            reduce using rule 50 (factor -> var_func_call .)
    PUNTCOM         reduce using rule 50 (factor -> var_func_call .)


state 50

    (51) factor -> SUMA . var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    var_func_call                  shift and go to state 109
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 51

    (52) factor -> RESTA . var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    var_func_call                  shift and go to state 110
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 52

    (53) var_func_call -> var .

    MULT            reduce using rule 53 (var_func_call -> var .)
    DIV             reduce using rule 53 (var_func_call -> var .)
    SUMA            reduce using rule 53 (var_func_call -> var .)
    RESTA           reduce using rule 53 (var_func_call -> var .)
    MENOR           reduce using rule 53 (var_func_call -> var .)
    MAYOR           reduce using rule 53 (var_func_call -> var .)
    MENIGUAL        reduce using rule 53 (var_func_call -> var .)
    MAYIGUAL        reduce using rule 53 (var_func_call -> var .)
    IGUAL           reduce using rule 53 (var_func_call -> var .)
    DIF             reduce using rule 53 (var_func_call -> var .)
    AND             reduce using rule 53 (var_func_call -> var .)
    OR              reduce using rule 53 (var_func_call -> var .)
    CORDER          reduce using rule 53 (var_func_call -> var .)
    PARDER          reduce using rule 53 (var_func_call -> var .)
    COMA            reduce using rule 53 (var_func_call -> var .)
    PUNTCOM         reduce using rule 53 (var_func_call -> var .)


state 53

    (54) var_func_call -> func_call .

    MULT            reduce using rule 54 (var_func_call -> func_call .)
    DIV             reduce using rule 54 (var_func_call -> func_call .)
    SUMA            reduce using rule 54 (var_func_call -> func_call .)
    RESTA           reduce using rule 54 (var_func_call -> func_call .)
    MENOR           reduce using rule 54 (var_func_call -> func_call .)
    MAYOR           reduce using rule 54 (var_func_call -> func_call .)
    MENIGUAL        reduce using rule 54 (var_func_call -> func_call .)
    MAYIGUAL        reduce using rule 54 (var_func_call -> func_call .)
    IGUAL           reduce using rule 54 (var_func_call -> func_call .)
    DIF             reduce using rule 54 (var_func_call -> func_call .)
    AND             reduce using rule 54 (var_func_call -> func_call .)
    OR              reduce using rule 54 (var_func_call -> func_call .)
    CORDER          reduce using rule 54 (var_func_call -> func_call .)
    PARDER          reduce using rule 54 (var_func_call -> func_call .)
    COMA            reduce using rule 54 (var_func_call -> func_call .)
    PUNTCOM         reduce using rule 54 (var_func_call -> func_call .)


state 54

    (80) var -> ID . lista
    (83) func_call -> ID . PARIZQ args PARDER
    (76) lista -> . CORIZQ expresion CORDER matriz
    (77) lista -> .

    PARIZQ          shift and go to state 112
    CORIZQ          shift and go to state 35
    MULT            reduce using rule 77 (lista -> .)
    DIV             reduce using rule 77 (lista -> .)
    SUMA            reduce using rule 77 (lista -> .)
    RESTA           reduce using rule 77 (lista -> .)
    MENOR           reduce using rule 77 (lista -> .)
    MAYOR           reduce using rule 77 (lista -> .)
    MENIGUAL        reduce using rule 77 (lista -> .)
    MAYIGUAL        reduce using rule 77 (lista -> .)
    IGUAL           reduce using rule 77 (lista -> .)
    DIF             reduce using rule 77 (lista -> .)
    AND             reduce using rule 77 (lista -> .)
    OR              reduce using rule 77 (lista -> .)
    CORDER          reduce using rule 77 (lista -> .)
    PARDER          reduce using rule 77 (lista -> .)
    COMA            reduce using rule 77 (lista -> .)
    PUNTCOM         reduce using rule 77 (lista -> .)

    lista                          shift and go to state 111

state 55

    (81) var -> CTE_I .

    MULT            reduce using rule 81 (var -> CTE_I .)
    DIV             reduce using rule 81 (var -> CTE_I .)
    SUMA            reduce using rule 81 (var -> CTE_I .)
    RESTA           reduce using rule 81 (var -> CTE_I .)
    MENOR           reduce using rule 81 (var -> CTE_I .)
    MAYOR           reduce using rule 81 (var -> CTE_I .)
    MENIGUAL        reduce using rule 81 (var -> CTE_I .)
    MAYIGUAL        reduce using rule 81 (var -> CTE_I .)
    IGUAL           reduce using rule 81 (var -> CTE_I .)
    DIF             reduce using rule 81 (var -> CTE_I .)
    AND             reduce using rule 81 (var -> CTE_I .)
    OR              reduce using rule 81 (var -> CTE_I .)
    CORDER          reduce using rule 81 (var -> CTE_I .)
    PARDER          reduce using rule 81 (var -> CTE_I .)
    COMA            reduce using rule 81 (var -> CTE_I .)
    PUNTCOM         reduce using rule 81 (var -> CTE_I .)


state 56

    (82) var -> CTE_F .

    MULT            reduce using rule 82 (var -> CTE_F .)
    DIV             reduce using rule 82 (var -> CTE_F .)
    SUMA            reduce using rule 82 (var -> CTE_F .)
    RESTA           reduce using rule 82 (var -> CTE_F .)
    MENOR           reduce using rule 82 (var -> CTE_F .)
    MAYOR           reduce using rule 82 (var -> CTE_F .)
    MENIGUAL        reduce using rule 82 (var -> CTE_F .)
    MAYIGUAL        reduce using rule 82 (var -> CTE_F .)
    IGUAL           reduce using rule 82 (var -> CTE_F .)
    DIF             reduce using rule 82 (var -> CTE_F .)
    AND             reduce using rule 82 (var -> CTE_F .)
    OR              reduce using rule 82 (var -> CTE_F .)
    CORDER          reduce using rule 82 (var -> CTE_F .)
    PARDER          reduce using rule 82 (var -> CTE_F .)
    COMA            reduce using rule 82 (var -> CTE_F .)
    PUNTCOM         reduce using rule 82 (var -> CTE_F .)


state 57

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ . pars PARDER bloque_func funcs
    (89) pars -> . tipo ID par
    (90) pars -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 90 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    pars                           shift and go to state 113
    tipo                           shift and go to state 41

state 58

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I . PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    PUNTCOM         shift and go to state 114


state 59

    (12) bloque_func -> BRAIZQ vars_estatutos . returns BRADER
    (17) returns -> . RETURN expresion PUNTCOM
    (18) returns -> .

    RETURN          shift and go to state 116
    BRADER          reduce using rule 18 (returns -> .)

    returns                        shift and go to state 115

state 60

    (13) vars_estatutos -> vars . estatutos
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (55) estatuto -> . asignacion
    (56) estatuto -> . condicion
    (57) estatuto -> . escritura
    (58) estatuto -> . ciclo
    (59) estatuto -> . instruccion
    (60) estatuto -> . func_call PUNTCOM
    (61) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (64) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (67) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (72) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (93) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (94) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (95) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (96) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (97) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (98) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (99) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (100) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (101) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (102) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (103) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (104) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (105) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (106) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (83) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 16 (estatutos -> .)
    BRADER          reduce using rule 16 (estatutos -> .)
    ID              shift and go to state 63
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    REPEAT          shift and go to state 73
    FORWARD         shift and go to state 74
    BACKWARD        shift and go to state 75
    LEFT            shift and go to state 76
    RIGHT           shift and go to state 77
    TURN            shift and go to state 78
    SIZE            shift and go to state 79
    CIRCLE          shift and go to state 80
    TRIANGLE        shift and go to state 81
    SQUARE          shift and go to state 82
    NGON            shift and go to state 83
    ARC             shift and go to state 84
    UP              shift and go to state 85
    DOWN            shift and go to state 86
    COLOR           shift and go to state 87

    estatutos                      shift and go to state 117
    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 61

    (14) vars_estatutos -> estatutos .

    RETURN          reduce using rule 14 (vars_estatutos -> estatutos .)
    BRADER          reduce using rule 14 (vars_estatutos -> estatutos .)


state 62

    (19) vars -> tipo . ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars

    ID              shift and go to state 118


state 63

    (61) asignacion -> ID . lista ASIG exp_input PUNTCOM
    (83) func_call -> ID . PARIZQ args PARDER
    (76) lista -> . CORIZQ expresion CORDER matriz
    (77) lista -> .

    PARIZQ          shift and go to state 112
    CORIZQ          shift and go to state 35
    ASIG            reduce using rule 77 (lista -> .)

    lista                          shift and go to state 119

state 64

    (15) estatutos -> estatuto . estatutos
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (55) estatuto -> . asignacion
    (56) estatuto -> . condicion
    (57) estatuto -> . escritura
    (58) estatuto -> . ciclo
    (59) estatuto -> . instruccion
    (60) estatuto -> . func_call PUNTCOM
    (61) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (64) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (67) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (72) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (93) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (94) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (95) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (96) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (97) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (98) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (99) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (100) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (101) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (102) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (103) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (104) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (105) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (106) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (83) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 16 (estatutos -> .)
    BRADER          reduce using rule 16 (estatutos -> .)
    ID              shift and go to state 63
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    REPEAT          shift and go to state 73
    FORWARD         shift and go to state 74
    BACKWARD        shift and go to state 75
    LEFT            shift and go to state 76
    RIGHT           shift and go to state 77
    TURN            shift and go to state 78
    SIZE            shift and go to state 79
    CIRCLE          shift and go to state 80
    TRIANGLE        shift and go to state 81
    SQUARE          shift and go to state 82
    NGON            shift and go to state 83
    ARC             shift and go to state 84
    UP              shift and go to state 85
    DOWN            shift and go to state 86
    COLOR           shift and go to state 87

    estatuto                       shift and go to state 64
    estatutos                      shift and go to state 120
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 65

    (55) estatuto -> asignacion .

    ID              reduce using rule 55 (estatuto -> asignacion .)
    IF              reduce using rule 55 (estatuto -> asignacion .)
    PRINT           reduce using rule 55 (estatuto -> asignacion .)
    REPEAT          reduce using rule 55 (estatuto -> asignacion .)
    FORWARD         reduce using rule 55 (estatuto -> asignacion .)
    BACKWARD        reduce using rule 55 (estatuto -> asignacion .)
    LEFT            reduce using rule 55 (estatuto -> asignacion .)
    RIGHT           reduce using rule 55 (estatuto -> asignacion .)
    TURN            reduce using rule 55 (estatuto -> asignacion .)
    SIZE            reduce using rule 55 (estatuto -> asignacion .)
    CIRCLE          reduce using rule 55 (estatuto -> asignacion .)
    TRIANGLE        reduce using rule 55 (estatuto -> asignacion .)
    SQUARE          reduce using rule 55 (estatuto -> asignacion .)
    NGON            reduce using rule 55 (estatuto -> asignacion .)
    ARC             reduce using rule 55 (estatuto -> asignacion .)
    UP              reduce using rule 55 (estatuto -> asignacion .)
    DOWN            reduce using rule 55 (estatuto -> asignacion .)
    COLOR           reduce using rule 55 (estatuto -> asignacion .)
    RETURN          reduce using rule 55 (estatuto -> asignacion .)
    BRADER          reduce using rule 55 (estatuto -> asignacion .)


state 66

    (56) estatuto -> condicion .

    ID              reduce using rule 56 (estatuto -> condicion .)
    IF              reduce using rule 56 (estatuto -> condicion .)
    PRINT           reduce using rule 56 (estatuto -> condicion .)
    REPEAT          reduce using rule 56 (estatuto -> condicion .)
    FORWARD         reduce using rule 56 (estatuto -> condicion .)
    BACKWARD        reduce using rule 56 (estatuto -> condicion .)
    LEFT            reduce using rule 56 (estatuto -> condicion .)
    RIGHT           reduce using rule 56 (estatuto -> condicion .)
    TURN            reduce using rule 56 (estatuto -> condicion .)
    SIZE            reduce using rule 56 (estatuto -> condicion .)
    CIRCLE          reduce using rule 56 (estatuto -> condicion .)
    TRIANGLE        reduce using rule 56 (estatuto -> condicion .)
    SQUARE          reduce using rule 56 (estatuto -> condicion .)
    NGON            reduce using rule 56 (estatuto -> condicion .)
    ARC             reduce using rule 56 (estatuto -> condicion .)
    UP              reduce using rule 56 (estatuto -> condicion .)
    DOWN            reduce using rule 56 (estatuto -> condicion .)
    COLOR           reduce using rule 56 (estatuto -> condicion .)
    RETURN          reduce using rule 56 (estatuto -> condicion .)
    BRADER          reduce using rule 56 (estatuto -> condicion .)


state 67

    (57) estatuto -> escritura .

    ID              reduce using rule 57 (estatuto -> escritura .)
    IF              reduce using rule 57 (estatuto -> escritura .)
    PRINT           reduce using rule 57 (estatuto -> escritura .)
    REPEAT          reduce using rule 57 (estatuto -> escritura .)
    FORWARD         reduce using rule 57 (estatuto -> escritura .)
    BACKWARD        reduce using rule 57 (estatuto -> escritura .)
    LEFT            reduce using rule 57 (estatuto -> escritura .)
    RIGHT           reduce using rule 57 (estatuto -> escritura .)
    TURN            reduce using rule 57 (estatuto -> escritura .)
    SIZE            reduce using rule 57 (estatuto -> escritura .)
    CIRCLE          reduce using rule 57 (estatuto -> escritura .)
    TRIANGLE        reduce using rule 57 (estatuto -> escritura .)
    SQUARE          reduce using rule 57 (estatuto -> escritura .)
    NGON            reduce using rule 57 (estatuto -> escritura .)
    ARC             reduce using rule 57 (estatuto -> escritura .)
    UP              reduce using rule 57 (estatuto -> escritura .)
    DOWN            reduce using rule 57 (estatuto -> escritura .)
    COLOR           reduce using rule 57 (estatuto -> escritura .)
    RETURN          reduce using rule 57 (estatuto -> escritura .)
    BRADER          reduce using rule 57 (estatuto -> escritura .)


state 68

    (58) estatuto -> ciclo .

    ID              reduce using rule 58 (estatuto -> ciclo .)
    IF              reduce using rule 58 (estatuto -> ciclo .)
    PRINT           reduce using rule 58 (estatuto -> ciclo .)
    REPEAT          reduce using rule 58 (estatuto -> ciclo .)
    FORWARD         reduce using rule 58 (estatuto -> ciclo .)
    BACKWARD        reduce using rule 58 (estatuto -> ciclo .)
    LEFT            reduce using rule 58 (estatuto -> ciclo .)
    RIGHT           reduce using rule 58 (estatuto -> ciclo .)
    TURN            reduce using rule 58 (estatuto -> ciclo .)
    SIZE            reduce using rule 58 (estatuto -> ciclo .)
    CIRCLE          reduce using rule 58 (estatuto -> ciclo .)
    TRIANGLE        reduce using rule 58 (estatuto -> ciclo .)
    SQUARE          reduce using rule 58 (estatuto -> ciclo .)
    NGON            reduce using rule 58 (estatuto -> ciclo .)
    ARC             reduce using rule 58 (estatuto -> ciclo .)
    UP              reduce using rule 58 (estatuto -> ciclo .)
    DOWN            reduce using rule 58 (estatuto -> ciclo .)
    COLOR           reduce using rule 58 (estatuto -> ciclo .)
    RETURN          reduce using rule 58 (estatuto -> ciclo .)
    BRADER          reduce using rule 58 (estatuto -> ciclo .)


state 69

    (59) estatuto -> instruccion .

    ID              reduce using rule 59 (estatuto -> instruccion .)
    IF              reduce using rule 59 (estatuto -> instruccion .)
    PRINT           reduce using rule 59 (estatuto -> instruccion .)
    REPEAT          reduce using rule 59 (estatuto -> instruccion .)
    FORWARD         reduce using rule 59 (estatuto -> instruccion .)
    BACKWARD        reduce using rule 59 (estatuto -> instruccion .)
    LEFT            reduce using rule 59 (estatuto -> instruccion .)
    RIGHT           reduce using rule 59 (estatuto -> instruccion .)
    TURN            reduce using rule 59 (estatuto -> instruccion .)
    SIZE            reduce using rule 59 (estatuto -> instruccion .)
    CIRCLE          reduce using rule 59 (estatuto -> instruccion .)
    TRIANGLE        reduce using rule 59 (estatuto -> instruccion .)
    SQUARE          reduce using rule 59 (estatuto -> instruccion .)
    NGON            reduce using rule 59 (estatuto -> instruccion .)
    ARC             reduce using rule 59 (estatuto -> instruccion .)
    UP              reduce using rule 59 (estatuto -> instruccion .)
    DOWN            reduce using rule 59 (estatuto -> instruccion .)
    COLOR           reduce using rule 59 (estatuto -> instruccion .)
    RETURN          reduce using rule 59 (estatuto -> instruccion .)
    BRADER          reduce using rule 59 (estatuto -> instruccion .)


state 70

    (60) estatuto -> func_call . PUNTCOM

    PUNTCOM         shift and go to state 121


state 71

    (64) condicion -> IF . PARIZQ expresion PARDER bloque else_bloque

    PARIZQ          shift and go to state 122


state 72

    (67) escritura -> PRINT . PARIZQ arg_escritura PARDER PUNTCOM

    PARIZQ          shift and go to state 123


state 73

    (72) ciclo -> REPEAT . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 124


state 74

    (93) instruccion -> FORWARD . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 125


state 75

    (94) instruccion -> BACKWARD . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 126


state 76

    (95) instruccion -> LEFT . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 127


state 77

    (96) instruccion -> RIGHT . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 128


state 78

    (97) instruccion -> TURN . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 129


state 79

    (98) instruccion -> SIZE . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 130


state 80

    (99) instruccion -> CIRCLE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 131


state 81

    (100) instruccion -> TRIANGLE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 132


state 82

    (101) instruccion -> SQUARE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 133


state 83

    (102) instruccion -> NGON . PARIZQ expresion COMA expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 134


state 84

    (103) instruccion -> ARC . PARIZQ expresion COMA expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 135


state 85

    (104) instruccion -> UP . PARIZQ PARDER PUNTCOM

    PARIZQ          shift and go to state 136


state 86

    (105) instruccion -> DOWN . PARIZQ PARDER PUNTCOM

    PARIZQ          shift and go to state 137


state 87

    (106) instruccion -> COLOR . PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 138


state 88

    (9) var_o_func -> PARIZQ crea_func pars PARDER . bloque_func funcs
    (12) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 139

state 89

    (89) pars -> tipo ID . par
    (91) par -> . COMA tipo ID par
    (92) par -> .

    COMA            shift and go to state 141
    PARDER          reduce using rule 92 (par -> .)

    par                            shift and go to state 140

state 90

    (10) var_o_func -> crea_var lista vars_lista PUNTCOM . var_func
    (5) var_func -> . tipo ID actualiza_id var_o_func
    (6) var_func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (7) var_func -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    VOID            shift and go to state 11
    MAIN            reduce using rule 7 (var_func -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    var_func                       shift and go to state 142
    tipo                           shift and go to state 10

state 91

    (20) vars_lista -> COMA ID . actualiza_id crea_var lista vars_lista
    (8) actualiza_id -> .

    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 143

state 92

    (76) lista -> CORIZQ expresion CORDER . matriz
    (78) matriz -> . CORIZQ expresion CORDER
    (79) matriz -> .

    CORIZQ          shift and go to state 144
    COMA            reduce using rule 79 (matriz -> .)
    PUNTCOM         reduce using rule 79 (matriz -> .)
    MULT            reduce using rule 79 (matriz -> .)
    DIV             reduce using rule 79 (matriz -> .)
    SUMA            reduce using rule 79 (matriz -> .)
    RESTA           reduce using rule 79 (matriz -> .)
    MENOR           reduce using rule 79 (matriz -> .)
    MAYOR           reduce using rule 79 (matriz -> .)
    MENIGUAL        reduce using rule 79 (matriz -> .)
    MAYIGUAL        reduce using rule 79 (matriz -> .)
    IGUAL           reduce using rule 79 (matriz -> .)
    DIF             reduce using rule 79 (matriz -> .)
    AND             reduce using rule 79 (matriz -> .)
    OR              reduce using rule 79 (matriz -> .)
    CORDER          reduce using rule 79 (matriz -> .)
    PARDER          reduce using rule 79 (matriz -> .)
    ASIG            reduce using rule 79 (matriz -> .)

    matriz                         shift and go to state 145

state 93

    (31) expresion -> exp mas_exp .

    CORDER          reduce using rule 31 (expresion -> exp mas_exp .)
    PARDER          reduce using rule 31 (expresion -> exp mas_exp .)
    COMA            reduce using rule 31 (expresion -> exp mas_exp .)
    PUNTCOM         reduce using rule 31 (expresion -> exp mas_exp .)


state 94

    (32) mas_exp -> MENOR . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 146
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 95

    (33) mas_exp -> MAYOR . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 147
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 96

    (34) mas_exp -> MENIGUAL . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 148
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 97

    (35) mas_exp -> MAYIGUAL . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 149
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 98

    (36) mas_exp -> IGUAL . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 150
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 99

    (37) mas_exp -> DIF . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 151
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 100

    (38) mas_exp -> AND . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 152
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 101

    (39) mas_exp -> OR . exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 153
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 102

    (41) exp -> termino suma_resta .

    MENOR           reduce using rule 41 (exp -> termino suma_resta .)
    MAYOR           reduce using rule 41 (exp -> termino suma_resta .)
    MENIGUAL        reduce using rule 41 (exp -> termino suma_resta .)
    MAYIGUAL        reduce using rule 41 (exp -> termino suma_resta .)
    IGUAL           reduce using rule 41 (exp -> termino suma_resta .)
    DIF             reduce using rule 41 (exp -> termino suma_resta .)
    AND             reduce using rule 41 (exp -> termino suma_resta .)
    OR              reduce using rule 41 (exp -> termino suma_resta .)
    CORDER          reduce using rule 41 (exp -> termino suma_resta .)
    PARDER          reduce using rule 41 (exp -> termino suma_resta .)
    COMA            reduce using rule 41 (exp -> termino suma_resta .)
    PUNTCOM         reduce using rule 41 (exp -> termino suma_resta .)


state 103

    (42) suma_resta -> SUMA . termino
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    termino                        shift and go to state 154
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 104

    (43) suma_resta -> RESTA . termino
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    termino                        shift and go to state 155
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 105

    (45) termino -> factor mult_div .

    SUMA            reduce using rule 45 (termino -> factor mult_div .)
    RESTA           reduce using rule 45 (termino -> factor mult_div .)
    MENOR           reduce using rule 45 (termino -> factor mult_div .)
    MAYOR           reduce using rule 45 (termino -> factor mult_div .)
    MENIGUAL        reduce using rule 45 (termino -> factor mult_div .)
    MAYIGUAL        reduce using rule 45 (termino -> factor mult_div .)
    IGUAL           reduce using rule 45 (termino -> factor mult_div .)
    DIF             reduce using rule 45 (termino -> factor mult_div .)
    AND             reduce using rule 45 (termino -> factor mult_div .)
    OR              reduce using rule 45 (termino -> factor mult_div .)
    CORDER          reduce using rule 45 (termino -> factor mult_div .)
    PARDER          reduce using rule 45 (termino -> factor mult_div .)
    COMA            reduce using rule 45 (termino -> factor mult_div .)
    PUNTCOM         reduce using rule 45 (termino -> factor mult_div .)


state 106

    (46) mult_div -> MULT . factor
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    factor                         shift and go to state 156
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 107

    (47) mult_div -> DIV . factor
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    factor                         shift and go to state 157
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 108

    (49) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 158


state 109

    (51) factor -> SUMA var_func_call .

    MULT            reduce using rule 51 (factor -> SUMA var_func_call .)
    DIV             reduce using rule 51 (factor -> SUMA var_func_call .)
    SUMA            reduce using rule 51 (factor -> SUMA var_func_call .)
    RESTA           reduce using rule 51 (factor -> SUMA var_func_call .)
    MENOR           reduce using rule 51 (factor -> SUMA var_func_call .)
    MAYOR           reduce using rule 51 (factor -> SUMA var_func_call .)
    MENIGUAL        reduce using rule 51 (factor -> SUMA var_func_call .)
    MAYIGUAL        reduce using rule 51 (factor -> SUMA var_func_call .)
    IGUAL           reduce using rule 51 (factor -> SUMA var_func_call .)
    DIF             reduce using rule 51 (factor -> SUMA var_func_call .)
    AND             reduce using rule 51 (factor -> SUMA var_func_call .)
    OR              reduce using rule 51 (factor -> SUMA var_func_call .)
    CORDER          reduce using rule 51 (factor -> SUMA var_func_call .)
    PARDER          reduce using rule 51 (factor -> SUMA var_func_call .)
    COMA            reduce using rule 51 (factor -> SUMA var_func_call .)
    PUNTCOM         reduce using rule 51 (factor -> SUMA var_func_call .)


state 110

    (52) factor -> RESTA var_func_call .

    MULT            reduce using rule 52 (factor -> RESTA var_func_call .)
    DIV             reduce using rule 52 (factor -> RESTA var_func_call .)
    SUMA            reduce using rule 52 (factor -> RESTA var_func_call .)
    RESTA           reduce using rule 52 (factor -> RESTA var_func_call .)
    MENOR           reduce using rule 52 (factor -> RESTA var_func_call .)
    MAYOR           reduce using rule 52 (factor -> RESTA var_func_call .)
    MENIGUAL        reduce using rule 52 (factor -> RESTA var_func_call .)
    MAYIGUAL        reduce using rule 52 (factor -> RESTA var_func_call .)
    IGUAL           reduce using rule 52 (factor -> RESTA var_func_call .)
    DIF             reduce using rule 52 (factor -> RESTA var_func_call .)
    AND             reduce using rule 52 (factor -> RESTA var_func_call .)
    OR              reduce using rule 52 (factor -> RESTA var_func_call .)
    CORDER          reduce using rule 52 (factor -> RESTA var_func_call .)
    PARDER          reduce using rule 52 (factor -> RESTA var_func_call .)
    COMA            reduce using rule 52 (factor -> RESTA var_func_call .)
    PUNTCOM         reduce using rule 52 (factor -> RESTA var_func_call .)


state 111

    (80) var -> ID lista .

    MULT            reduce using rule 80 (var -> ID lista .)
    DIV             reduce using rule 80 (var -> ID lista .)
    SUMA            reduce using rule 80 (var -> ID lista .)
    RESTA           reduce using rule 80 (var -> ID lista .)
    MENOR           reduce using rule 80 (var -> ID lista .)
    MAYOR           reduce using rule 80 (var -> ID lista .)
    MENIGUAL        reduce using rule 80 (var -> ID lista .)
    MAYIGUAL        reduce using rule 80 (var -> ID lista .)
    IGUAL           reduce using rule 80 (var -> ID lista .)
    DIF             reduce using rule 80 (var -> ID lista .)
    AND             reduce using rule 80 (var -> ID lista .)
    OR              reduce using rule 80 (var -> ID lista .)
    CORDER          reduce using rule 80 (var -> ID lista .)
    PARDER          reduce using rule 80 (var -> ID lista .)
    COMA            reduce using rule 80 (var -> ID lista .)
    PUNTCOM         reduce using rule 80 (var -> ID lista .)


state 112

    (83) func_call -> ID PARIZQ . args PARDER
    (84) args -> . expresion arg
    (85) args -> .
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARDER          reduce using rule 85 (args -> .)
    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    args                           shift and go to state 159
    expresion                      shift and go to state 160
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 113

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars . PARDER bloque_func funcs

    PARDER          shift and go to state 161


state 114

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM . BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    BACKGROUND      shift and go to state 162


state 115

    (12) bloque_func -> BRAIZQ vars_estatutos returns . BRADER

    BRADER          shift and go to state 163


state 116

    (17) returns -> RETURN . expresion PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 164
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 117

    (13) vars_estatutos -> vars estatutos .

    RETURN          reduce using rule 13 (vars_estatutos -> vars estatutos .)
    BRADER          reduce using rule 13 (vars_estatutos -> vars estatutos .)


state 118

    (19) vars -> tipo ID . actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
    (8) actualiza_id -> .

    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 165

state 119

    (61) asignacion -> ID lista . ASIG exp_input PUNTCOM

    ASIG            shift and go to state 166


state 120

    (15) estatutos -> estatuto estatutos .

    RETURN          reduce using rule 15 (estatutos -> estatuto estatutos .)
    BRADER          reduce using rule 15 (estatutos -> estatuto estatutos .)


state 121

    (60) estatuto -> func_call PUNTCOM .

    ID              reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    IF              reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    PRINT           reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    REPEAT          reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    FORWARD         reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    BACKWARD        reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    LEFT            reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    RIGHT           reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    TURN            reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    SIZE            reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    CIRCLE          reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    TRIANGLE        reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    SQUARE          reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    NGON            reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    ARC             reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    UP              reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    DOWN            reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    COLOR           reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    RETURN          reduce using rule 60 (estatuto -> func_call PUNTCOM .)
    BRADER          reduce using rule 60 (estatuto -> func_call PUNTCOM .)


state 122

    (64) condicion -> IF PARIZQ . expresion PARDER bloque else_bloque
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 167
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 123

    (67) escritura -> PRINT PARIZQ . arg_escritura PARDER PUNTCOM
    (68) arg_escritura -> . expresion args_escritura
    (69) arg_escritura -> . CTE_STR args_escritura
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    CTE_STR         shift and go to state 170
    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    arg_escritura                  shift and go to state 168
    expresion                      shift and go to state 169
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 124

    (72) ciclo -> REPEAT PARIZQ . expresion PARDER bloque
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 171
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 125

    (93) instruccion -> FORWARD PARIZQ . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 172
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 126

    (94) instruccion -> BACKWARD PARIZQ . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 173
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 127

    (95) instruccion -> LEFT PARIZQ . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 174
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 128

    (96) instruccion -> RIGHT PARIZQ . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 175
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 129

    (97) instruccion -> TURN PARIZQ . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 176
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 130

    (98) instruccion -> SIZE PARIZQ . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 177
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 131

    (99) instruccion -> CIRCLE PARIZQ . expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 178
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 132

    (100) instruccion -> TRIANGLE PARIZQ . expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 179
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 133

    (101) instruccion -> SQUARE PARIZQ . expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 180
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 134

    (102) instruccion -> NGON PARIZQ . expresion COMA expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 181
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 135

    (103) instruccion -> ARC PARIZQ . expresion COMA expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 182
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 136

    (104) instruccion -> UP PARIZQ . PARDER PUNTCOM

    PARDER          shift and go to state 183


state 137

    (105) instruccion -> DOWN PARIZQ . PARDER PUNTCOM

    PARDER          shift and go to state 184


state 138

    (106) instruccion -> COLOR PARIZQ . expresion COMA expresion COMA expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 185
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 139

    (9) var_o_func -> PARIZQ crea_func pars PARDER bloque_func . funcs
    (24) funcs -> . func funcs
    (25) funcs -> .
    (26) func -> . tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (27) func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    MAIN            reduce using rule 25 (funcs -> .)
    VOID            shift and go to state 189
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    funcs                          shift and go to state 186
    func                           shift and go to state 187
    tipo                           shift and go to state 188

state 140

    (89) pars -> tipo ID par .

    PARDER          reduce using rule 89 (pars -> tipo ID par .)


state 141

    (91) par -> COMA . tipo ID par
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    tipo                           shift and go to state 190

state 142

    (10) var_o_func -> crea_var lista vars_lista PUNTCOM var_func .

    MAIN            reduce using rule 10 (var_o_func -> crea_var lista vars_lista PUNTCOM var_func .)


state 143

    (20) vars_lista -> COMA ID actualiza_id . crea_var lista vars_lista
    (11) crea_var -> .

    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PUNTCOM         reduce using rule 11 (crea_var -> .)

    crea_var                       shift and go to state 191

state 144

    (78) matriz -> CORIZQ . expresion CORDER
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 192
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 145

    (76) lista -> CORIZQ expresion CORDER matriz .

    COMA            reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    PUNTCOM         reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    MULT            reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    DIV             reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    SUMA            reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    RESTA           reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    MENOR           reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    MAYOR           reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    MENIGUAL        reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    MAYIGUAL        reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    IGUAL           reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    DIF             reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    AND             reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    OR              reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    CORDER          reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    PARDER          reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)
    ASIG            reduce using rule 76 (lista -> CORIZQ expresion CORDER matriz .)


state 146

    (32) mas_exp -> MENOR exp .

    CORDER          reduce using rule 32 (mas_exp -> MENOR exp .)
    PARDER          reduce using rule 32 (mas_exp -> MENOR exp .)
    COMA            reduce using rule 32 (mas_exp -> MENOR exp .)
    PUNTCOM         reduce using rule 32 (mas_exp -> MENOR exp .)


state 147

    (33) mas_exp -> MAYOR exp .

    CORDER          reduce using rule 33 (mas_exp -> MAYOR exp .)
    PARDER          reduce using rule 33 (mas_exp -> MAYOR exp .)
    COMA            reduce using rule 33 (mas_exp -> MAYOR exp .)
    PUNTCOM         reduce using rule 33 (mas_exp -> MAYOR exp .)


state 148

    (34) mas_exp -> MENIGUAL exp .

    CORDER          reduce using rule 34 (mas_exp -> MENIGUAL exp .)
    PARDER          reduce using rule 34 (mas_exp -> MENIGUAL exp .)
    COMA            reduce using rule 34 (mas_exp -> MENIGUAL exp .)
    PUNTCOM         reduce using rule 34 (mas_exp -> MENIGUAL exp .)


state 149

    (35) mas_exp -> MAYIGUAL exp .

    CORDER          reduce using rule 35 (mas_exp -> MAYIGUAL exp .)
    PARDER          reduce using rule 35 (mas_exp -> MAYIGUAL exp .)
    COMA            reduce using rule 35 (mas_exp -> MAYIGUAL exp .)
    PUNTCOM         reduce using rule 35 (mas_exp -> MAYIGUAL exp .)


state 150

    (36) mas_exp -> IGUAL exp .

    CORDER          reduce using rule 36 (mas_exp -> IGUAL exp .)
    PARDER          reduce using rule 36 (mas_exp -> IGUAL exp .)
    COMA            reduce using rule 36 (mas_exp -> IGUAL exp .)
    PUNTCOM         reduce using rule 36 (mas_exp -> IGUAL exp .)


state 151

    (37) mas_exp -> DIF exp .

    CORDER          reduce using rule 37 (mas_exp -> DIF exp .)
    PARDER          reduce using rule 37 (mas_exp -> DIF exp .)
    COMA            reduce using rule 37 (mas_exp -> DIF exp .)
    PUNTCOM         reduce using rule 37 (mas_exp -> DIF exp .)


state 152

    (38) mas_exp -> AND exp .

    CORDER          reduce using rule 38 (mas_exp -> AND exp .)
    PARDER          reduce using rule 38 (mas_exp -> AND exp .)
    COMA            reduce using rule 38 (mas_exp -> AND exp .)
    PUNTCOM         reduce using rule 38 (mas_exp -> AND exp .)


state 153

    (39) mas_exp -> OR exp .

    CORDER          reduce using rule 39 (mas_exp -> OR exp .)
    PARDER          reduce using rule 39 (mas_exp -> OR exp .)
    COMA            reduce using rule 39 (mas_exp -> OR exp .)
    PUNTCOM         reduce using rule 39 (mas_exp -> OR exp .)


state 154

    (42) suma_resta -> SUMA termino .

    MENOR           reduce using rule 42 (suma_resta -> SUMA termino .)
    MAYOR           reduce using rule 42 (suma_resta -> SUMA termino .)
    MENIGUAL        reduce using rule 42 (suma_resta -> SUMA termino .)
    MAYIGUAL        reduce using rule 42 (suma_resta -> SUMA termino .)
    IGUAL           reduce using rule 42 (suma_resta -> SUMA termino .)
    DIF             reduce using rule 42 (suma_resta -> SUMA termino .)
    AND             reduce using rule 42 (suma_resta -> SUMA termino .)
    OR              reduce using rule 42 (suma_resta -> SUMA termino .)
    CORDER          reduce using rule 42 (suma_resta -> SUMA termino .)
    PARDER          reduce using rule 42 (suma_resta -> SUMA termino .)
    COMA            reduce using rule 42 (suma_resta -> SUMA termino .)
    PUNTCOM         reduce using rule 42 (suma_resta -> SUMA termino .)


state 155

    (43) suma_resta -> RESTA termino .

    MENOR           reduce using rule 43 (suma_resta -> RESTA termino .)
    MAYOR           reduce using rule 43 (suma_resta -> RESTA termino .)
    MENIGUAL        reduce using rule 43 (suma_resta -> RESTA termino .)
    MAYIGUAL        reduce using rule 43 (suma_resta -> RESTA termino .)
    IGUAL           reduce using rule 43 (suma_resta -> RESTA termino .)
    DIF             reduce using rule 43 (suma_resta -> RESTA termino .)
    AND             reduce using rule 43 (suma_resta -> RESTA termino .)
    OR              reduce using rule 43 (suma_resta -> RESTA termino .)
    CORDER          reduce using rule 43 (suma_resta -> RESTA termino .)
    PARDER          reduce using rule 43 (suma_resta -> RESTA termino .)
    COMA            reduce using rule 43 (suma_resta -> RESTA termino .)
    PUNTCOM         reduce using rule 43 (suma_resta -> RESTA termino .)


state 156

    (46) mult_div -> MULT factor .

    SUMA            reduce using rule 46 (mult_div -> MULT factor .)
    RESTA           reduce using rule 46 (mult_div -> MULT factor .)
    MENOR           reduce using rule 46 (mult_div -> MULT factor .)
    MAYOR           reduce using rule 46 (mult_div -> MULT factor .)
    MENIGUAL        reduce using rule 46 (mult_div -> MULT factor .)
    MAYIGUAL        reduce using rule 46 (mult_div -> MULT factor .)
    IGUAL           reduce using rule 46 (mult_div -> MULT factor .)
    DIF             reduce using rule 46 (mult_div -> MULT factor .)
    AND             reduce using rule 46 (mult_div -> MULT factor .)
    OR              reduce using rule 46 (mult_div -> MULT factor .)
    CORDER          reduce using rule 46 (mult_div -> MULT factor .)
    PARDER          reduce using rule 46 (mult_div -> MULT factor .)
    COMA            reduce using rule 46 (mult_div -> MULT factor .)
    PUNTCOM         reduce using rule 46 (mult_div -> MULT factor .)


state 157

    (47) mult_div -> DIV factor .

    SUMA            reduce using rule 47 (mult_div -> DIV factor .)
    RESTA           reduce using rule 47 (mult_div -> DIV factor .)
    MENOR           reduce using rule 47 (mult_div -> DIV factor .)
    MAYOR           reduce using rule 47 (mult_div -> DIV factor .)
    MENIGUAL        reduce using rule 47 (mult_div -> DIV factor .)
    MAYIGUAL        reduce using rule 47 (mult_div -> DIV factor .)
    IGUAL           reduce using rule 47 (mult_div -> DIV factor .)
    DIF             reduce using rule 47 (mult_div -> DIV factor .)
    AND             reduce using rule 47 (mult_div -> DIV factor .)
    OR              reduce using rule 47 (mult_div -> DIV factor .)
    CORDER          reduce using rule 47 (mult_div -> DIV factor .)
    PARDER          reduce using rule 47 (mult_div -> DIV factor .)
    COMA            reduce using rule 47 (mult_div -> DIV factor .)
    PUNTCOM         reduce using rule 47 (mult_div -> DIV factor .)


state 158

    (49) factor -> PARIZQ expresion PARDER .

    MULT            reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    SUMA            reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    RESTA           reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    MENIGUAL        reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    MAYIGUAL        reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    IGUAL           reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    DIF             reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 49 (factor -> PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 49 (factor -> PARIZQ expresion PARDER .)


state 159

    (83) func_call -> ID PARIZQ args . PARDER

    PARDER          shift and go to state 193


state 160

    (84) args -> expresion . arg
    (86) arg -> . COMA expresion arg
    (87) arg -> .

    COMA            shift and go to state 195
    PARDER          reduce using rule 87 (arg -> .)

    arg                            shift and go to state 194

state 161

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER . bloque_func funcs
    (12) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 196

state 162

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND . CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 197


state 163

    (12) bloque_func -> BRAIZQ vars_estatutos returns BRADER .

    $end            reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    VOID            reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    INT             reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    FLOAT           reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    MAIN            reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)


state 164

    (17) returns -> RETURN expresion . PUNTCOM

    PUNTCOM         shift and go to state 198


state 165

    (19) vars -> tipo ID actualiza_id . crea_var lista vars_lista PUNTCOM mas_vars
    (11) crea_var -> .

    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PUNTCOM         reduce using rule 11 (crea_var -> .)

    crea_var                       shift and go to state 199

state 166

    (61) asignacion -> ID lista ASIG . exp_input PUNTCOM
    (62) exp_input -> . expresion
    (63) exp_input -> . INPUT PARIZQ PARDER
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    INPUT           shift and go to state 202
    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp_input                      shift and go to state 200
    expresion                      shift and go to state 201
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 167

    (64) condicion -> IF PARIZQ expresion . PARDER bloque else_bloque

    PARDER          shift and go to state 203


state 168

    (67) escritura -> PRINT PARIZQ arg_escritura . PARDER PUNTCOM

    PARDER          shift and go to state 204


state 169

    (68) arg_escritura -> expresion . args_escritura
    (70) args_escritura -> . COMA arg_escritura
    (71) args_escritura -> .

    COMA            shift and go to state 206
    PARDER          reduce using rule 71 (args_escritura -> .)

    args_escritura                 shift and go to state 205

state 170

    (69) arg_escritura -> CTE_STR . args_escritura
    (70) args_escritura -> . COMA arg_escritura
    (71) args_escritura -> .

    COMA            shift and go to state 206
    PARDER          reduce using rule 71 (args_escritura -> .)

    args_escritura                 shift and go to state 207

state 171

    (72) ciclo -> REPEAT PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 208


state 172

    (93) instruccion -> FORWARD PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 209


state 173

    (94) instruccion -> BACKWARD PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 210


state 174

    (95) instruccion -> LEFT PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 211


state 175

    (96) instruccion -> RIGHT PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 212


state 176

    (97) instruccion -> TURN PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 213


state 177

    (98) instruccion -> SIZE PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 214


state 178

    (99) instruccion -> CIRCLE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 215


state 179

    (100) instruccion -> TRIANGLE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 216


state 180

    (101) instruccion -> SQUARE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 217


state 181

    (102) instruccion -> NGON PARIZQ expresion . COMA expresion PARDER transform PUNTCOM

    COMA            shift and go to state 218


state 182

    (103) instruccion -> ARC PARIZQ expresion . COMA expresion PARDER transform PUNTCOM

    COMA            shift and go to state 219


state 183

    (104) instruccion -> UP PARIZQ PARDER . PUNTCOM

    PUNTCOM         shift and go to state 220


state 184

    (105) instruccion -> DOWN PARIZQ PARDER . PUNTCOM

    PUNTCOM         shift and go to state 221


state 185

    (106) instruccion -> COLOR PARIZQ expresion . COMA expresion COMA expresion PARDER PUNTCOM

    COMA            shift and go to state 222


state 186

    (9) var_o_func -> PARIZQ crea_func pars PARDER bloque_func funcs .

    MAIN            reduce using rule 9 (var_o_func -> PARIZQ crea_func pars PARDER bloque_func funcs .)


state 187

    (24) funcs -> func . funcs
    (24) funcs -> . func funcs
    (25) funcs -> .
    (26) func -> . tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (27) func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    MAIN            reduce using rule 25 (funcs -> .)
    VOID            shift and go to state 189
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    func                           shift and go to state 187
    funcs                          shift and go to state 223
    tipo                           shift and go to state 188

state 188

    (26) func -> tipo . ID actualiza_id crea_func PARIZQ pars PARDER bloque_func

    ID              shift and go to state 224


state 189

    (27) func -> VOID . tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (28) tipo_void -> .

    ID              reduce using rule 28 (tipo_void -> .)

    tipo_void                      shift and go to state 225

state 190

    (91) par -> COMA tipo . ID par

    ID              shift and go to state 226


state 191

    (20) vars_lista -> COMA ID actualiza_id crea_var . lista vars_lista
    (76) lista -> . CORIZQ expresion CORDER matriz
    (77) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 77 (lista -> .)
    PUNTCOM         reduce using rule 77 (lista -> .)

    lista                          shift and go to state 227

state 192

    (78) matriz -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 228


state 193

    (83) func_call -> ID PARIZQ args PARDER .

    MULT            reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    DIV             reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    SUMA            reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    RESTA           reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    MENOR           reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    MAYOR           reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    MENIGUAL        reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    MAYIGUAL        reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    IGUAL           reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    DIF             reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    AND             reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    OR              reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    CORDER          reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    PUNTCOM         reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    PARDER          reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)
    COMA            reduce using rule 83 (func_call -> ID PARIZQ args PARDER .)


state 194

    (84) args -> expresion arg .

    PARDER          reduce using rule 84 (args -> expresion arg .)


state 195

    (86) arg -> COMA . expresion arg
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 229
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 196

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func . funcs
    (24) funcs -> . func funcs
    (25) funcs -> .
    (26) func -> . tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (27) func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    MAIN            reduce using rule 25 (funcs -> .)
    VOID            shift and go to state 189
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    funcs                          shift and go to state 230
    func                           shift and go to state 187
    tipo                           shift and go to state 188

state 197

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F . COMA CTE_F COMA CTE_F PUNTCOM BRADER

    COMA            shift and go to state 231


state 198

    (17) returns -> RETURN expresion PUNTCOM .

    BRADER          reduce using rule 17 (returns -> RETURN expresion PUNTCOM .)


state 199

    (19) vars -> tipo ID actualiza_id crea_var . lista vars_lista PUNTCOM mas_vars
    (76) lista -> . CORIZQ expresion CORDER matriz
    (77) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 77 (lista -> .)
    PUNTCOM         reduce using rule 77 (lista -> .)

    lista                          shift and go to state 232

state 200

    (61) asignacion -> ID lista ASIG exp_input . PUNTCOM

    PUNTCOM         shift and go to state 233


state 201

    (62) exp_input -> expresion .

    PUNTCOM         reduce using rule 62 (exp_input -> expresion .)


state 202

    (63) exp_input -> INPUT . PARIZQ PARDER

    PARIZQ          shift and go to state 234


state 203

    (64) condicion -> IF PARIZQ expresion PARDER . bloque else_bloque
    (88) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 236

    bloque                         shift and go to state 235

state 204

    (67) escritura -> PRINT PARIZQ arg_escritura PARDER . PUNTCOM

    PUNTCOM         shift and go to state 237


state 205

    (68) arg_escritura -> expresion args_escritura .

    PARDER          reduce using rule 68 (arg_escritura -> expresion args_escritura .)


state 206

    (70) args_escritura -> COMA . arg_escritura
    (68) arg_escritura -> . expresion args_escritura
    (69) arg_escritura -> . CTE_STR args_escritura
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    CTE_STR         shift and go to state 170
    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    arg_escritura                  shift and go to state 238
    expresion                      shift and go to state 169
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 207

    (69) arg_escritura -> CTE_STR args_escritura .

    PARDER          reduce using rule 69 (arg_escritura -> CTE_STR args_escritura .)


state 208

    (72) ciclo -> REPEAT PARIZQ expresion PARDER . bloque
    (88) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 236

    bloque                         shift and go to state 239

state 209

    (93) instruccion -> FORWARD PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 240


state 210

    (94) instruccion -> BACKWARD PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 241


state 211

    (95) instruccion -> LEFT PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 242


state 212

    (96) instruccion -> RIGHT PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 243


state 213

    (97) instruccion -> TURN PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 244


state 214

    (98) instruccion -> SIZE PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 245


state 215

    (99) instruccion -> CIRCLE PARIZQ expresion PARDER . transform PUNTCOM
    (107) transform -> . PUNTO altera transform
    (108) transform -> .

    PUNTO           shift and go to state 247
    PUNTCOM         reduce using rule 108 (transform -> .)

    transform                      shift and go to state 246

state 216

    (100) instruccion -> TRIANGLE PARIZQ expresion PARDER . transform PUNTCOM
    (107) transform -> . PUNTO altera transform
    (108) transform -> .

    PUNTO           shift and go to state 247
    PUNTCOM         reduce using rule 108 (transform -> .)

    transform                      shift and go to state 248

state 217

    (101) instruccion -> SQUARE PARIZQ expresion PARDER . transform PUNTCOM
    (107) transform -> . PUNTO altera transform
    (108) transform -> .

    PUNTO           shift and go to state 247
    PUNTCOM         reduce using rule 108 (transform -> .)

    transform                      shift and go to state 249

state 218

    (102) instruccion -> NGON PARIZQ expresion COMA . expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 250
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 219

    (103) instruccion -> ARC PARIZQ expresion COMA . expresion PARDER transform PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 251
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 220

    (104) instruccion -> UP PARIZQ PARDER PUNTCOM .

    ID              reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    IF              reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    PRINT           reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    REPEAT          reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    FORWARD         reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    BACKWARD        reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    LEFT            reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    RIGHT           reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    TURN            reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    SIZE            reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    CIRCLE          reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    SQUARE          reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    NGON            reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    ARC             reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    UP              reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    DOWN            reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    COLOR           reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    RETURN          reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    BRADER          reduce using rule 104 (instruccion -> UP PARIZQ PARDER PUNTCOM .)


state 221

    (105) instruccion -> DOWN PARIZQ PARDER PUNTCOM .

    ID              reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    IF              reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    PRINT           reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    REPEAT          reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    FORWARD         reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    BACKWARD        reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    LEFT            reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    RIGHT           reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    TURN            reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    SIZE            reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    CIRCLE          reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    SQUARE          reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    NGON            reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    ARC             reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    UP              reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    DOWN            reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    COLOR           reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    RETURN          reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    BRADER          reduce using rule 105 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)


state 222

    (106) instruccion -> COLOR PARIZQ expresion COMA . expresion COMA expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 252
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 223

    (24) funcs -> func funcs .

    MAIN            reduce using rule 24 (funcs -> func funcs .)


state 224

    (26) func -> tipo ID . actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 253

state 225

    (27) func -> VOID tipo_void . ID actualiza_id crea_func PARIZQ pars PARDER bloque_func

    ID              shift and go to state 254


state 226

    (91) par -> COMA tipo ID . par
    (91) par -> . COMA tipo ID par
    (92) par -> .

    COMA            shift and go to state 141
    PARDER          reduce using rule 92 (par -> .)

    par                            shift and go to state 255

state 227

    (20) vars_lista -> COMA ID actualiza_id crea_var lista . vars_lista
    (20) vars_lista -> . COMA ID actualiza_id crea_var lista vars_lista
    (21) vars_lista -> .

    COMA            shift and go to state 43
    PUNTCOM         reduce using rule 21 (vars_lista -> .)

    vars_lista                     shift and go to state 256

state 228

    (78) matriz -> CORIZQ expresion CORDER .

    COMA            reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    PUNTCOM         reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    SUMA            reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    RESTA           reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    MENOR           reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    MAYOR           reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    MENIGUAL        reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    MAYIGUAL        reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    IGUAL           reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    AND             reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    OR              reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)
    ASIG            reduce using rule 78 (matriz -> CORIZQ expresion CORDER .)


state 229

    (86) arg -> COMA expresion . arg
    (86) arg -> . COMA expresion arg
    (87) arg -> .

    COMA            shift and go to state 195
    PARDER          reduce using rule 87 (arg -> .)

    arg                            shift and go to state 257

state 230

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs .

    MAIN            reduce using rule 6 (var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs .)


state 231

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA . CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 258


state 232

    (19) vars -> tipo ID actualiza_id crea_var lista . vars_lista PUNTCOM mas_vars
    (20) vars_lista -> . COMA ID actualiza_id crea_var lista vars_lista
    (21) vars_lista -> .

    COMA            shift and go to state 43
    PUNTCOM         reduce using rule 21 (vars_lista -> .)

    vars_lista                     shift and go to state 259

state 233

    (61) asignacion -> ID lista ASIG exp_input PUNTCOM .

    ID              reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    IF              reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    PRINT           reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    REPEAT          reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    FORWARD         reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    BACKWARD        reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    LEFT            reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    RIGHT           reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    TURN            reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    SIZE            reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    CIRCLE          reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    TRIANGLE        reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    SQUARE          reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    NGON            reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    ARC             reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    UP              reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    DOWN            reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    COLOR           reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    RETURN          reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    BRADER          reduce using rule 61 (asignacion -> ID lista ASIG exp_input PUNTCOM .)


state 234

    (63) exp_input -> INPUT PARIZQ . PARDER

    PARDER          shift and go to state 260


state 235

    (64) condicion -> IF PARIZQ expresion PARDER bloque . else_bloque
    (65) else_bloque -> . ELSE bloque
    (66) else_bloque -> .

    ELSE            shift and go to state 262
    ID              reduce using rule 66 (else_bloque -> .)
    IF              reduce using rule 66 (else_bloque -> .)
    PRINT           reduce using rule 66 (else_bloque -> .)
    REPEAT          reduce using rule 66 (else_bloque -> .)
    FORWARD         reduce using rule 66 (else_bloque -> .)
    BACKWARD        reduce using rule 66 (else_bloque -> .)
    LEFT            reduce using rule 66 (else_bloque -> .)
    RIGHT           reduce using rule 66 (else_bloque -> .)
    TURN            reduce using rule 66 (else_bloque -> .)
    SIZE            reduce using rule 66 (else_bloque -> .)
    CIRCLE          reduce using rule 66 (else_bloque -> .)
    TRIANGLE        reduce using rule 66 (else_bloque -> .)
    SQUARE          reduce using rule 66 (else_bloque -> .)
    NGON            reduce using rule 66 (else_bloque -> .)
    ARC             reduce using rule 66 (else_bloque -> .)
    UP              reduce using rule 66 (else_bloque -> .)
    DOWN            reduce using rule 66 (else_bloque -> .)
    COLOR           reduce using rule 66 (else_bloque -> .)
    RETURN          reduce using rule 66 (else_bloque -> .)
    BRADER          reduce using rule 66 (else_bloque -> .)

    else_bloque                    shift and go to state 261

state 236

    (88) bloque -> BRAIZQ . estatutos BRADER
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (55) estatuto -> . asignacion
    (56) estatuto -> . condicion
    (57) estatuto -> . escritura
    (58) estatuto -> . ciclo
    (59) estatuto -> . instruccion
    (60) estatuto -> . func_call PUNTCOM
    (61) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (64) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (67) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (72) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (93) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (94) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (95) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (96) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (97) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (98) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (99) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (100) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (101) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (102) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (103) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (104) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (105) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (106) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (83) func_call -> . ID PARIZQ args PARDER

    BRADER          reduce using rule 16 (estatutos -> .)
    ID              shift and go to state 63
    IF              shift and go to state 71
    PRINT           shift and go to state 72
    REPEAT          shift and go to state 73
    FORWARD         shift and go to state 74
    BACKWARD        shift and go to state 75
    LEFT            shift and go to state 76
    RIGHT           shift and go to state 77
    TURN            shift and go to state 78
    SIZE            shift and go to state 79
    CIRCLE          shift and go to state 80
    TRIANGLE        shift and go to state 81
    SQUARE          shift and go to state 82
    NGON            shift and go to state 83
    ARC             shift and go to state 84
    UP              shift and go to state 85
    DOWN            shift and go to state 86
    COLOR           shift and go to state 87

    estatutos                      shift and go to state 263
    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 237

    (67) escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .

    ID              reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    IF              reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    PRINT           reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    REPEAT          reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    FORWARD         reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    BACKWARD        reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    LEFT            reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    RIGHT           reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    TURN            reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    SIZE            reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    CIRCLE          reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    SQUARE          reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    NGON            reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    ARC             reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    UP              reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    DOWN            reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    COLOR           reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    RETURN          reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    BRADER          reduce using rule 67 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)


state 238

    (70) args_escritura -> COMA arg_escritura .

    PARDER          reduce using rule 70 (args_escritura -> COMA arg_escritura .)


state 239

    (72) ciclo -> REPEAT PARIZQ expresion PARDER bloque .

    ID              reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    PRINT           reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    REPEAT          reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    FORWARD         reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    BACKWARD        reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    LEFT            reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    RIGHT           reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    TURN            reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    SIZE            reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    CIRCLE          reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    TRIANGLE        reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    SQUARE          reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    NGON            reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    ARC             reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    UP              reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    DOWN            reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    COLOR           reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    BRADER          reduce using rule 72 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)


state 240

    (93) instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 93 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)


state 241

    (94) instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 94 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)


state 242

    (95) instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 95 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)


state 243

    (96) instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 96 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)


state 244

    (97) instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 97 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)


state 245

    (98) instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 98 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)


state 246

    (99) instruccion -> CIRCLE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 264


state 247

    (107) transform -> PUNTO . altera transform
    (109) altera -> . ROTATE PARIZQ expresion PARDER
    (110) altera -> . STRETCH PARIZQ expresion PARDER
    (111) altera -> . FILL PARIZQ PARDER

    ROTATE          shift and go to state 266
    STRETCH         shift and go to state 267
    FILL            shift and go to state 268

    altera                         shift and go to state 265

state 248

    (100) instruccion -> TRIANGLE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 269


state 249

    (101) instruccion -> SQUARE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 270


state 250

    (102) instruccion -> NGON PARIZQ expresion COMA expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 271


state 251

    (103) instruccion -> ARC PARIZQ expresion COMA expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 272


state 252

    (106) instruccion -> COLOR PARIZQ expresion COMA expresion . COMA expresion PARDER PUNTCOM

    COMA            shift and go to state 273


state 253

    (26) func -> tipo ID actualiza_id . crea_func PARIZQ pars PARDER bloque_func
    (30) crea_func -> .

    PARIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 274

state 254

    (27) func -> VOID tipo_void ID . actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 275

state 255

    (91) par -> COMA tipo ID par .

    PARDER          reduce using rule 91 (par -> COMA tipo ID par .)


state 256

    (20) vars_lista -> COMA ID actualiza_id crea_var lista vars_lista .

    PUNTCOM         reduce using rule 20 (vars_lista -> COMA ID actualiza_id crea_var lista vars_lista .)


state 257

    (86) arg -> COMA expresion arg .

    PARDER          reduce using rule 86 (arg -> COMA expresion arg .)


state 258

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F . COMA CTE_F PUNTCOM BRADER

    COMA            shift and go to state 276


state 259

    (19) vars -> tipo ID actualiza_id crea_var lista vars_lista . PUNTCOM mas_vars

    PUNTCOM         shift and go to state 277


state 260

    (63) exp_input -> INPUT PARIZQ PARDER .

    PUNTCOM         reduce using rule 63 (exp_input -> INPUT PARIZQ PARDER .)


state 261

    (64) condicion -> IF PARIZQ expresion PARDER bloque else_bloque .

    ID              reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    IF              reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    PRINT           reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    REPEAT          reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    FORWARD         reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    BACKWARD        reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    LEFT            reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    RIGHT           reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    TURN            reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    SIZE            reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    CIRCLE          reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    TRIANGLE        reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    SQUARE          reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    NGON            reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    ARC             reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    UP              reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    DOWN            reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    COLOR           reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    RETURN          reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    BRADER          reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)


state 262

    (65) else_bloque -> ELSE . bloque
    (88) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 236

    bloque                         shift and go to state 278

state 263

    (88) bloque -> BRAIZQ estatutos . BRADER

    BRADER          shift and go to state 279


state 264

    (99) instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 99 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)


state 265

    (107) transform -> PUNTO altera . transform
    (107) transform -> . PUNTO altera transform
    (108) transform -> .

    PUNTO           shift and go to state 247
    PUNTCOM         reduce using rule 108 (transform -> .)

    transform                      shift and go to state 280

state 266

    (109) altera -> ROTATE . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 281


state 267

    (110) altera -> STRETCH . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 282


state 268

    (111) altera -> FILL . PARIZQ PARDER

    PARIZQ          shift and go to state 283


state 269

    (100) instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 100 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)


state 270

    (101) instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 101 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)


state 271

    (102) instruccion -> NGON PARIZQ expresion COMA expresion PARDER . transform PUNTCOM
    (107) transform -> . PUNTO altera transform
    (108) transform -> .

    PUNTO           shift and go to state 247
    PUNTCOM         reduce using rule 108 (transform -> .)

    transform                      shift and go to state 284

state 272

    (103) instruccion -> ARC PARIZQ expresion COMA expresion PARDER . transform PUNTCOM
    (107) transform -> . PUNTO altera transform
    (108) transform -> .

    PUNTO           shift and go to state 247
    PUNTCOM         reduce using rule 108 (transform -> .)

    transform                      shift and go to state 285

state 273

    (106) instruccion -> COLOR PARIZQ expresion COMA expresion COMA . expresion PARDER PUNTCOM
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 286
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 274

    (26) func -> tipo ID actualiza_id crea_func . PARIZQ pars PARDER bloque_func

    PARIZQ          shift and go to state 287


state 275

    (27) func -> VOID tipo_void ID actualiza_id . crea_func PARIZQ pars PARDER bloque_func
    (30) crea_func -> .

    PARIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 288

state 276

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA . CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 289


state 277

    (19) vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM . mas_vars
    (22) mas_vars -> . vars
    (23) mas_vars -> .
    (19) vars -> . tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    ID              reduce using rule 23 (mas_vars -> .)
    IF              reduce using rule 23 (mas_vars -> .)
    PRINT           reduce using rule 23 (mas_vars -> .)
    REPEAT          reduce using rule 23 (mas_vars -> .)
    FORWARD         reduce using rule 23 (mas_vars -> .)
    BACKWARD        reduce using rule 23 (mas_vars -> .)
    LEFT            reduce using rule 23 (mas_vars -> .)
    RIGHT           reduce using rule 23 (mas_vars -> .)
    TURN            reduce using rule 23 (mas_vars -> .)
    SIZE            reduce using rule 23 (mas_vars -> .)
    CIRCLE          reduce using rule 23 (mas_vars -> .)
    TRIANGLE        reduce using rule 23 (mas_vars -> .)
    SQUARE          reduce using rule 23 (mas_vars -> .)
    NGON            reduce using rule 23 (mas_vars -> .)
    ARC             reduce using rule 23 (mas_vars -> .)
    UP              reduce using rule 23 (mas_vars -> .)
    DOWN            reduce using rule 23 (mas_vars -> .)
    COLOR           reduce using rule 23 (mas_vars -> .)
    RETURN          reduce using rule 23 (mas_vars -> .)
    BRADER          reduce using rule 23 (mas_vars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    tipo                           shift and go to state 62
    mas_vars                       shift and go to state 290
    vars                           shift and go to state 291

state 278

    (65) else_bloque -> ELSE bloque .

    ID              reduce using rule 65 (else_bloque -> ELSE bloque .)
    IF              reduce using rule 65 (else_bloque -> ELSE bloque .)
    PRINT           reduce using rule 65 (else_bloque -> ELSE bloque .)
    REPEAT          reduce using rule 65 (else_bloque -> ELSE bloque .)
    FORWARD         reduce using rule 65 (else_bloque -> ELSE bloque .)
    BACKWARD        reduce using rule 65 (else_bloque -> ELSE bloque .)
    LEFT            reduce using rule 65 (else_bloque -> ELSE bloque .)
    RIGHT           reduce using rule 65 (else_bloque -> ELSE bloque .)
    TURN            reduce using rule 65 (else_bloque -> ELSE bloque .)
    SIZE            reduce using rule 65 (else_bloque -> ELSE bloque .)
    CIRCLE          reduce using rule 65 (else_bloque -> ELSE bloque .)
    TRIANGLE        reduce using rule 65 (else_bloque -> ELSE bloque .)
    SQUARE          reduce using rule 65 (else_bloque -> ELSE bloque .)
    NGON            reduce using rule 65 (else_bloque -> ELSE bloque .)
    ARC             reduce using rule 65 (else_bloque -> ELSE bloque .)
    UP              reduce using rule 65 (else_bloque -> ELSE bloque .)
    DOWN            reduce using rule 65 (else_bloque -> ELSE bloque .)
    COLOR           reduce using rule 65 (else_bloque -> ELSE bloque .)
    RETURN          reduce using rule 65 (else_bloque -> ELSE bloque .)
    BRADER          reduce using rule 65 (else_bloque -> ELSE bloque .)


state 279

    (88) bloque -> BRAIZQ estatutos BRADER .

    ELSE            reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    ID              reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    IF              reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    PRINT           reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    REPEAT          reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    FORWARD         reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    BACKWARD        reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    LEFT            reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    RIGHT           reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    TURN            reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    SIZE            reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    CIRCLE          reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    TRIANGLE        reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    SQUARE          reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    NGON            reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    ARC             reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    UP              reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    DOWN            reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    COLOR           reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    RETURN          reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)
    BRADER          reduce using rule 88 (bloque -> BRAIZQ estatutos BRADER .)


state 280

    (107) transform -> PUNTO altera transform .

    PUNTCOM         reduce using rule 107 (transform -> PUNTO altera transform .)


state 281

    (109) altera -> ROTATE PARIZQ . expresion PARDER
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 292
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 282

    (110) altera -> STRETCH PARIZQ . expresion PARDER
    (31) expresion -> . exp mas_exp
    (41) exp -> . termino suma_resta
    (45) termino -> . factor mult_div
    (49) factor -> . PARIZQ expresion PARDER
    (50) factor -> . var_func_call
    (51) factor -> . SUMA var_func_call
    (52) factor -> . RESTA var_func_call
    (53) var_func_call -> . var
    (54) var_func_call -> . func_call
    (80) var -> . ID lista
    (81) var -> . CTE_I
    (82) var -> . CTE_F
    (83) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 48
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 293
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_func_call                  shift and go to state 49
    var                            shift and go to state 52
    func_call                      shift and go to state 53

state 283

    (111) altera -> FILL PARIZQ . PARDER

    PARDER          shift and go to state 294


state 284

    (102) instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 295


state 285

    (103) instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 296


state 286

    (106) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion . PARDER PUNTCOM

    PARDER          shift and go to state 297


state 287

    (26) func -> tipo ID actualiza_id crea_func PARIZQ . pars PARDER bloque_func
    (89) pars -> . tipo ID par
    (90) pars -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 90 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    tipo                           shift and go to state 41
    pars                           shift and go to state 298

state 288

    (27) func -> VOID tipo_void ID actualiza_id crea_func . PARIZQ pars PARDER bloque_func

    PARIZQ          shift and go to state 299


state 289

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F . PUNTCOM BRADER

    PUNTCOM         shift and go to state 300


state 290

    (19) vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .

    ID              reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    IF              reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    PRINT           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    REPEAT          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    FORWARD         reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    BACKWARD        reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    LEFT            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    RIGHT           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    TURN            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    SIZE            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    CIRCLE          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    TRIANGLE        reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    SQUARE          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    NGON            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    ARC             reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    UP              reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    DOWN            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    COLOR           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    RETURN          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    BRADER          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)


state 291

    (22) mas_vars -> vars .

    ID              reduce using rule 22 (mas_vars -> vars .)
    IF              reduce using rule 22 (mas_vars -> vars .)
    PRINT           reduce using rule 22 (mas_vars -> vars .)
    REPEAT          reduce using rule 22 (mas_vars -> vars .)
    FORWARD         reduce using rule 22 (mas_vars -> vars .)
    BACKWARD        reduce using rule 22 (mas_vars -> vars .)
    LEFT            reduce using rule 22 (mas_vars -> vars .)
    RIGHT           reduce using rule 22 (mas_vars -> vars .)
    TURN            reduce using rule 22 (mas_vars -> vars .)
    SIZE            reduce using rule 22 (mas_vars -> vars .)
    CIRCLE          reduce using rule 22 (mas_vars -> vars .)
    TRIANGLE        reduce using rule 22 (mas_vars -> vars .)
    SQUARE          reduce using rule 22 (mas_vars -> vars .)
    NGON            reduce using rule 22 (mas_vars -> vars .)
    ARC             reduce using rule 22 (mas_vars -> vars .)
    UP              reduce using rule 22 (mas_vars -> vars .)
    DOWN            reduce using rule 22 (mas_vars -> vars .)
    COLOR           reduce using rule 22 (mas_vars -> vars .)
    RETURN          reduce using rule 22 (mas_vars -> vars .)
    BRADER          reduce using rule 22 (mas_vars -> vars .)


state 292

    (109) altera -> ROTATE PARIZQ expresion . PARDER

    PARDER          shift and go to state 301


state 293

    (110) altera -> STRETCH PARIZQ expresion . PARDER

    PARDER          shift and go to state 302


state 294

    (111) altera -> FILL PARIZQ PARDER .

    PUNTO           reduce using rule 111 (altera -> FILL PARIZQ PARDER .)
    PUNTCOM         reduce using rule 111 (altera -> FILL PARIZQ PARDER .)


state 295

    (102) instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .

    ID              reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 102 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)


state 296

    (103) instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .

    ID              reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 103 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)


state 297

    (106) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 303


state 298

    (26) func -> tipo ID actualiza_id crea_func PARIZQ pars . PARDER bloque_func

    PARDER          shift and go to state 304


state 299

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ . pars PARDER bloque_func
    (89) pars -> . tipo ID par
    (90) pars -> .
    (73) tipo -> . INT actualiza_tipo
    (74) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 90 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    pars                           shift and go to state 305
    tipo                           shift and go to state 41

state 300

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM . BRADER

    BRADER          shift and go to state 306


state 301

    (109) altera -> ROTATE PARIZQ expresion PARDER .

    PUNTO           reduce using rule 109 (altera -> ROTATE PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 109 (altera -> ROTATE PARIZQ expresion PARDER .)


state 302

    (110) altera -> STRETCH PARIZQ expresion PARDER .

    PUNTO           reduce using rule 110 (altera -> STRETCH PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 110 (altera -> STRETCH PARIZQ expresion PARDER .)


state 303

    (106) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .

    ID              reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    IF              reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    TURN            reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    NGON            reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    ARC             reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    UP              reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 106 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)


state 304

    (26) func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER . bloque_func
    (12) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 307

state 305

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars . PARDER bloque_func

    PARDER          shift and go to state 308


state 306

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .

    VOID            reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    INT             reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    FLOAT           reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    MAIN            reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)


state 307

    (26) func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .

    VOID            reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    INT             reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    FLOAT           reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    MAIN            reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)


state 308

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER . bloque_func
    (12) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 309

state 309

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .

    VOID            reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    INT             reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    FLOAT           reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    MAIN            reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)

