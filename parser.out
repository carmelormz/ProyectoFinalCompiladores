Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> MODULE ID PUNTCOM ajustes var_func MAIN bloque_func
Rule 2     ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER
Rule 3     ajustes -> IMPORT CTE_STR
Rule 4     var_func -> tipo ID var_o_func
Rule 5     var_func -> VOID ID PARIZQ pars PARDER bloque_func funcs
Rule 6     var_func -> <empty>
Rule 7     var_o_func -> lista vars_lista PUNTCOM var_func
Rule 8     var_o_func -> PARIZQ pars PARDER bloque_func funcs
Rule 9     bloque_func -> BRAIZQ vars_estatutos returns BRADER
Rule 10    vars_estatutos -> vars estatutos
Rule 11    vars_estatutos -> estatutos
Rule 12    estatutos -> estatuto estatutos
Rule 13    estatutos -> <empty>
Rule 14    returns -> RETURN expresion PUNTCOM
Rule 15    returns -> <empty>
Rule 16    vars -> tipo ID lista vars_lista PUNTCOM mas_vars
Rule 17    vars_lista -> COMA ID lista vars_lista
Rule 18    vars_lista -> <empty>
Rule 19    mas_vars -> vars
Rule 20    mas_vars -> <empty>
Rule 21    funcs -> func funcs
Rule 22    funcs -> <empty>
Rule 23    func -> tipo ID PARIZQ pars PARDER bloque_func
Rule 24    func -> VOID ID PARIZQ pars PARDER bloque_func
Rule 25    expresion -> exp mas_exp
Rule 26    mas_exp -> MENOR exp
Rule 27    mas_exp -> MAYOR exp
Rule 28    mas_exp -> MENIGUAL exp
Rule 29    mas_exp -> MAYIGUAL exp
Rule 30    mas_exp -> IGUAL exp
Rule 31    mas_exp -> DIF exp
Rule 32    mas_exp -> AND exp
Rule 33    mas_exp -> OR exp
Rule 34    mas_exp -> <empty>
Rule 35    exp -> termino suma_resta
Rule 36    suma_resta -> SUMA termino
Rule 37    suma_resta -> RESTA termino
Rule 38    suma_resta -> <empty>
Rule 39    termino -> factor mult_div
Rule 40    mult_div -> MULT factor
Rule 41    mult_div -> DIV factor
Rule 42    mult_div -> <empty>
Rule 43    factor -> PARIZQ expresion PARDER
Rule 44    factor -> var_func_call
Rule 45    factor -> SUMA var_func_call
Rule 46    factor -> RESTA var_func_call
Rule 47    var_func_call -> var
Rule 48    var_func_call -> func_call
Rule 49    estatuto -> asignacion
Rule 50    estatuto -> condicion
Rule 51    estatuto -> escritura
Rule 52    estatuto -> ciclo
Rule 53    estatuto -> instruccion
Rule 54    estatuto -> func_call PUNTCOM
Rule 55    asignacion -> ID lista ASIG exp_input PUNTCOM
Rule 56    exp_input -> expresion
Rule 57    exp_input -> INPUT PARIZQ PARDER
Rule 58    condicion -> IF PARIZQ expresion PARDER bloque else_bloque
Rule 59    else_bloque -> ELSE bloque
Rule 60    else_bloque -> <empty>
Rule 61    escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM
Rule 62    arg_escritura -> expresion args_escritura
Rule 63    arg_escritura -> CTE_STR args_escritura
Rule 64    args_escritura -> COMA arg_escritura
Rule 65    args_escritura -> <empty>
Rule 66    ciclo -> REPEAT PARIZQ expresion PARDER bloque
Rule 67    tipo -> INT
Rule 68    tipo -> FLOAT
Rule 69    lista -> CORIZQ expresion CORDER matriz
Rule 70    lista -> <empty>
Rule 71    matriz -> CORIZQ expresion CORDER
Rule 72    matriz -> <empty>
Rule 73    var -> ID lista
Rule 74    var -> CTE_I
Rule 75    var -> CTE_F
Rule 76    func_call -> ID PARIZQ args PARDER
Rule 77    args -> expresion arg
Rule 78    args -> <empty>
Rule 79    arg -> COMA expresion arg
Rule 80    arg -> <empty>
Rule 81    bloque -> BRAIZQ estatutos BRADER
Rule 82    pars -> tipo ID par
Rule 83    pars -> <empty>
Rule 84    par -> COMA tipo ID par
Rule 85    par -> <empty>
Rule 86    instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM
Rule 87    instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM
Rule 88    instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM
Rule 89    instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM
Rule 90    instruccion -> TURN PARIZQ expresion PARDER PUNTCOM
Rule 91    instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM
Rule 92    instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM
Rule 93    instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
Rule 94    instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM
Rule 95    instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
Rule 96    instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
Rule 97    instruccion -> UP PARIZQ PARDER PUNTCOM
Rule 98    instruccion -> DOWN PARIZQ PARDER PUNTCOM
Rule 99    instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
Rule 100   transform -> PUNTO altera transform
Rule 101   transform -> <empty>
Rule 102   altera -> ROTATE PARIZQ expresion PARDER
Rule 103   altera -> STRETCH PARIZQ expresion PARDER
Rule 104   altera -> FILL PARIZQ PARDER

Terminals, with rules where they appear

AND                  : 32
ARC                  : 96
ASIG                 : 55
BACKGROUND           : 2
BACKWARD             : 87
BRADER               : 2 9 81
BRAIZQ               : 2 9 81
CANVAS               : 2
CIRCLE               : 92
COLOR                : 99
COMA                 : 2 2 17 64 79 84 95 96 99 99
CORDER               : 69 71
CORIZQ               : 69 71
CTE_F                : 2 2 2 75
CTE_I                : 2 2 74
CTE_STR              : 3 63
DIF                  : 31
DIV                  : 41
DOWN                 : 98
ELSE                 : 59
FILL                 : 104
FLOAT                : 68
FORWARD              : 86
HEIGHT               : 2
ID                   : 1 4 5 16 17 23 24 55 73 76 82 84
IF                   : 58
IGUAL                : 30
IMPORT               : 3
INPUT                : 57
INT                  : 67
LEFT                 : 88
MAIN                 : 1
MAYIGUAL             : 29
MAYOR                : 27
MENIGUAL             : 28
MENOR                : 26
MODULE               : 1
MULT                 : 40
NGON                 : 95
OR                   : 33
PARDER               : 5 8 23 24 43 57 58 61 66 76 86 87 88 89 90 91 92 93 94 95 96 97 98 99 102 103 104
PARIZQ               : 5 8 23 24 43 57 58 61 66 76 86 87 88 89 90 91 92 93 94 95 96 97 98 99 102 103 104
PRINT                : 61
PUNTCOM              : 1 2 2 2 7 14 16 54 55 61 86 87 88 89 90 91 92 93 94 95 96 97 98 99
PUNTO                : 100
REPEAT               : 66
RESTA                : 37 46
RETURN               : 14
RIGHT                : 89
ROTATE               : 102
SIZE                 : 91
SQUARE               : 94
STRETCH              : 103
SUMA                 : 36 45
TRIANGLE             : 93
TURN                 : 90
UP                   : 97
VOID                 : 5 24
WIDTH                : 2
error                : 

Nonterminals, with rules where they appear

ajustes              : 1
altera               : 100
arg                  : 77 79
arg_escritura        : 61 64
args                 : 76
args_escritura       : 62 63
asignacion           : 49
bloque               : 58 59 66
bloque_func          : 1 5 8 23 24
ciclo                : 52
condicion            : 50
else_bloque          : 58
escritura            : 51
estatuto             : 12
estatutos            : 10 11 12 81
exp                  : 25 26 27 28 29 30 31 32 33
exp_input            : 55
expresion            : 14 43 56 58 62 66 69 71 77 79 86 87 88 89 90 91 92 93 94 95 95 96 96 99 99 99 102 103
factor               : 39 40 41
func                 : 21
func_call            : 48 54
funcs                : 5 8 21
instruccion          : 53
lista                : 7 16 17 55 73
mas_exp              : 25
mas_vars             : 16
matriz               : 69
mult_div             : 39
par                  : 82 84
pars                 : 5 8 23 24
programa             : 0
returns              : 9
suma_resta           : 35
termino              : 35 36 37
tipo                 : 4 16 23 82 84
transform            : 92 93 94 95 96 100
var                  : 47
var_func             : 1 7
var_func_call        : 44 45 46
var_o_func           : 4
vars                 : 10 19
vars_estatutos       : 9
vars_lista           : 7 16 17

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . MODULE ID PUNTCOM ajustes var_func MAIN bloque_func

    MODULE          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> MODULE . ID PUNTCOM ajustes var_func MAIN bloque_func

    ID              shift and go to state 3


state 3

    (1) programa -> MODULE ID . PUNTCOM ajustes var_func MAIN bloque_func

    PUNTCOM         shift and go to state 4


state 4

    (1) programa -> MODULE ID PUNTCOM . ajustes var_func MAIN bloque_func
    (2) ajustes -> . CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER
    (3) ajustes -> . IMPORT CTE_STR

    CANVAS          shift and go to state 6
    IMPORT          shift and go to state 7

    ajustes                        shift and go to state 5

state 5

    (1) programa -> MODULE ID PUNTCOM ajustes . var_func MAIN bloque_func
    (4) var_func -> . tipo ID var_o_func
    (5) var_func -> . VOID ID PARIZQ pars PARDER bloque_func funcs
    (6) var_func -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    VOID            shift and go to state 10
    MAIN            reduce using rule 6 (var_func -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    var_func                       shift and go to state 8
    tipo                           shift and go to state 9

state 6

    (2) ajustes -> CANVAS . BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    BRAIZQ          shift and go to state 13


state 7

    (3) ajustes -> IMPORT . CTE_STR

    CTE_STR         shift and go to state 14


state 8

    (1) programa -> MODULE ID PUNTCOM ajustes var_func . MAIN bloque_func

    MAIN            shift and go to state 15


state 9

    (4) var_func -> tipo . ID var_o_func

    ID              shift and go to state 16


state 10

    (5) var_func -> VOID . ID PARIZQ pars PARDER bloque_func funcs

    ID              shift and go to state 17


state 11

    (67) tipo -> INT .

    ID              reduce using rule 67 (tipo -> INT .)


state 12

    (68) tipo -> FLOAT .

    ID              reduce using rule 68 (tipo -> FLOAT .)


state 13

    (2) ajustes -> CANVAS BRAIZQ . WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    WIDTH           shift and go to state 18


state 14

    (3) ajustes -> IMPORT CTE_STR .

    VOID            reduce using rule 3 (ajustes -> IMPORT CTE_STR .)
    INT             reduce using rule 3 (ajustes -> IMPORT CTE_STR .)
    FLOAT           reduce using rule 3 (ajustes -> IMPORT CTE_STR .)
    MAIN            reduce using rule 3 (ajustes -> IMPORT CTE_STR .)


state 15

    (1) programa -> MODULE ID PUNTCOM ajustes var_func MAIN . bloque_func
    (9) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 20

    bloque_func                    shift and go to state 19

state 16

    (4) var_func -> tipo ID . var_o_func
    (7) var_o_func -> . lista vars_lista PUNTCOM var_func
    (8) var_o_func -> . PARIZQ pars PARDER bloque_func funcs
    (69) lista -> . CORIZQ expresion CORDER matriz
    (70) lista -> .

    PARIZQ          shift and go to state 23
    CORIZQ          shift and go to state 24
    COMA            reduce using rule 70 (lista -> .)
    PUNTCOM         reduce using rule 70 (lista -> .)

    var_o_func                     shift and go to state 21
    lista                          shift and go to state 22

state 17

    (5) var_func -> VOID ID . PARIZQ pars PARDER bloque_func funcs

    PARIZQ          shift and go to state 25


state 18

    (2) ajustes -> CANVAS BRAIZQ WIDTH . CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_I           shift and go to state 26


state 19

    (1) programa -> MODULE ID PUNTCOM ajustes var_func MAIN bloque_func .

    $end            reduce using rule 1 (programa -> MODULE ID PUNTCOM ajustes var_func MAIN bloque_func .)


state 20

    (9) bloque_func -> BRAIZQ . vars_estatutos returns BRADER
    (10) vars_estatutos -> . vars estatutos
    (11) vars_estatutos -> . estatutos
    (16) vars -> . tipo ID lista vars_lista PUNTCOM mas_vars
    (12) estatutos -> . estatuto estatutos
    (13) estatutos -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . ciclo
    (53) estatuto -> . instruccion
    (54) estatuto -> . func_call PUNTCOM
    (55) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (58) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (61) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (66) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (86) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (87) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (88) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (89) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (90) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (91) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (92) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (93) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (94) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (95) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (96) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (97) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (98) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (99) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (76) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 13 (estatutos -> .)
    BRADER          reduce using rule 13 (estatutos -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 31
    IF              shift and go to state 39
    PRINT           shift and go to state 40
    REPEAT          shift and go to state 41
    FORWARD         shift and go to state 42
    BACKWARD        shift and go to state 43
    LEFT            shift and go to state 44
    RIGHT           shift and go to state 45
    TURN            shift and go to state 46
    SIZE            shift and go to state 47
    CIRCLE          shift and go to state 48
    TRIANGLE        shift and go to state 49
    SQUARE          shift and go to state 50
    NGON            shift and go to state 51
    ARC             shift and go to state 52
    UP              shift and go to state 53
    DOWN            shift and go to state 54
    COLOR           shift and go to state 55

    vars_estatutos                 shift and go to state 27
    vars                           shift and go to state 28
    estatutos                      shift and go to state 29
    tipo                           shift and go to state 30
    estatuto                       shift and go to state 32
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    ciclo                          shift and go to state 36
    instruccion                    shift and go to state 37
    func_call                      shift and go to state 38

state 21

    (4) var_func -> tipo ID var_o_func .

    MAIN            reduce using rule 4 (var_func -> tipo ID var_o_func .)


state 22

    (7) var_o_func -> lista . vars_lista PUNTCOM var_func
    (17) vars_lista -> . COMA ID lista vars_lista
    (18) vars_lista -> .

    COMA            shift and go to state 57
    PUNTCOM         reduce using rule 18 (vars_lista -> .)

    vars_lista                     shift and go to state 56

state 23

    (8) var_o_func -> PARIZQ . pars PARDER bloque_func funcs
    (82) pars -> . tipo ID par
    (83) pars -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    PARDER          reduce using rule 83 (pars -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    pars                           shift and go to state 58
    tipo                           shift and go to state 59

state 24

    (69) lista -> CORIZQ . expresion CORDER matriz
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 60
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 25

    (5) var_func -> VOID ID PARIZQ . pars PARDER bloque_func funcs
    (82) pars -> . tipo ID par
    (83) pars -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    PARDER          reduce using rule 83 (pars -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    pars                           shift and go to state 73
    tipo                           shift and go to state 59

state 26

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I . PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    PUNTCOM         shift and go to state 74


state 27

    (9) bloque_func -> BRAIZQ vars_estatutos . returns BRADER
    (14) returns -> . RETURN expresion PUNTCOM
    (15) returns -> .

    RETURN          shift and go to state 76
    BRADER          reduce using rule 15 (returns -> .)

    returns                        shift and go to state 75

state 28

    (10) vars_estatutos -> vars . estatutos
    (12) estatutos -> . estatuto estatutos
    (13) estatutos -> .
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . ciclo
    (53) estatuto -> . instruccion
    (54) estatuto -> . func_call PUNTCOM
    (55) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (58) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (61) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (66) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (86) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (87) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (88) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (89) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (90) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (91) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (92) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (93) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (94) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (95) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (96) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (97) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (98) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (99) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (76) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 13 (estatutos -> .)
    BRADER          reduce using rule 13 (estatutos -> .)
    ID              shift and go to state 31
    IF              shift and go to state 39
    PRINT           shift and go to state 40
    REPEAT          shift and go to state 41
    FORWARD         shift and go to state 42
    BACKWARD        shift and go to state 43
    LEFT            shift and go to state 44
    RIGHT           shift and go to state 45
    TURN            shift and go to state 46
    SIZE            shift and go to state 47
    CIRCLE          shift and go to state 48
    TRIANGLE        shift and go to state 49
    SQUARE          shift and go to state 50
    NGON            shift and go to state 51
    ARC             shift and go to state 52
    UP              shift and go to state 53
    DOWN            shift and go to state 54
    COLOR           shift and go to state 55

    estatutos                      shift and go to state 77
    estatuto                       shift and go to state 32
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    ciclo                          shift and go to state 36
    instruccion                    shift and go to state 37
    func_call                      shift and go to state 38

state 29

    (11) vars_estatutos -> estatutos .

    RETURN          reduce using rule 11 (vars_estatutos -> estatutos .)
    BRADER          reduce using rule 11 (vars_estatutos -> estatutos .)


state 30

    (16) vars -> tipo . ID lista vars_lista PUNTCOM mas_vars

    ID              shift and go to state 78


state 31

    (55) asignacion -> ID . lista ASIG exp_input PUNTCOM
    (76) func_call -> ID . PARIZQ args PARDER
    (69) lista -> . CORIZQ expresion CORDER matriz
    (70) lista -> .

    PARIZQ          shift and go to state 80
    CORIZQ          shift and go to state 24
    ASIG            reduce using rule 70 (lista -> .)

    lista                          shift and go to state 79

state 32

    (12) estatutos -> estatuto . estatutos
    (12) estatutos -> . estatuto estatutos
    (13) estatutos -> .
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . ciclo
    (53) estatuto -> . instruccion
    (54) estatuto -> . func_call PUNTCOM
    (55) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (58) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (61) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (66) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (86) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (87) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (88) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (89) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (90) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (91) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (92) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (93) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (94) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (95) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (96) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (97) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (98) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (99) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (76) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 13 (estatutos -> .)
    BRADER          reduce using rule 13 (estatutos -> .)
    ID              shift and go to state 31
    IF              shift and go to state 39
    PRINT           shift and go to state 40
    REPEAT          shift and go to state 41
    FORWARD         shift and go to state 42
    BACKWARD        shift and go to state 43
    LEFT            shift and go to state 44
    RIGHT           shift and go to state 45
    TURN            shift and go to state 46
    SIZE            shift and go to state 47
    CIRCLE          shift and go to state 48
    TRIANGLE        shift and go to state 49
    SQUARE          shift and go to state 50
    NGON            shift and go to state 51
    ARC             shift and go to state 52
    UP              shift and go to state 53
    DOWN            shift and go to state 54
    COLOR           shift and go to state 55

    estatuto                       shift and go to state 32
    estatutos                      shift and go to state 81
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    ciclo                          shift and go to state 36
    instruccion                    shift and go to state 37
    func_call                      shift and go to state 38

state 33

    (49) estatuto -> asignacion .

    ID              reduce using rule 49 (estatuto -> asignacion .)
    IF              reduce using rule 49 (estatuto -> asignacion .)
    PRINT           reduce using rule 49 (estatuto -> asignacion .)
    REPEAT          reduce using rule 49 (estatuto -> asignacion .)
    FORWARD         reduce using rule 49 (estatuto -> asignacion .)
    BACKWARD        reduce using rule 49 (estatuto -> asignacion .)
    LEFT            reduce using rule 49 (estatuto -> asignacion .)
    RIGHT           reduce using rule 49 (estatuto -> asignacion .)
    TURN            reduce using rule 49 (estatuto -> asignacion .)
    SIZE            reduce using rule 49 (estatuto -> asignacion .)
    CIRCLE          reduce using rule 49 (estatuto -> asignacion .)
    TRIANGLE        reduce using rule 49 (estatuto -> asignacion .)
    SQUARE          reduce using rule 49 (estatuto -> asignacion .)
    NGON            reduce using rule 49 (estatuto -> asignacion .)
    ARC             reduce using rule 49 (estatuto -> asignacion .)
    UP              reduce using rule 49 (estatuto -> asignacion .)
    DOWN            reduce using rule 49 (estatuto -> asignacion .)
    COLOR           reduce using rule 49 (estatuto -> asignacion .)
    RETURN          reduce using rule 49 (estatuto -> asignacion .)
    BRADER          reduce using rule 49 (estatuto -> asignacion .)


state 34

    (50) estatuto -> condicion .

    ID              reduce using rule 50 (estatuto -> condicion .)
    IF              reduce using rule 50 (estatuto -> condicion .)
    PRINT           reduce using rule 50 (estatuto -> condicion .)
    REPEAT          reduce using rule 50 (estatuto -> condicion .)
    FORWARD         reduce using rule 50 (estatuto -> condicion .)
    BACKWARD        reduce using rule 50 (estatuto -> condicion .)
    LEFT            reduce using rule 50 (estatuto -> condicion .)
    RIGHT           reduce using rule 50 (estatuto -> condicion .)
    TURN            reduce using rule 50 (estatuto -> condicion .)
    SIZE            reduce using rule 50 (estatuto -> condicion .)
    CIRCLE          reduce using rule 50 (estatuto -> condicion .)
    TRIANGLE        reduce using rule 50 (estatuto -> condicion .)
    SQUARE          reduce using rule 50 (estatuto -> condicion .)
    NGON            reduce using rule 50 (estatuto -> condicion .)
    ARC             reduce using rule 50 (estatuto -> condicion .)
    UP              reduce using rule 50 (estatuto -> condicion .)
    DOWN            reduce using rule 50 (estatuto -> condicion .)
    COLOR           reduce using rule 50 (estatuto -> condicion .)
    RETURN          reduce using rule 50 (estatuto -> condicion .)
    BRADER          reduce using rule 50 (estatuto -> condicion .)


state 35

    (51) estatuto -> escritura .

    ID              reduce using rule 51 (estatuto -> escritura .)
    IF              reduce using rule 51 (estatuto -> escritura .)
    PRINT           reduce using rule 51 (estatuto -> escritura .)
    REPEAT          reduce using rule 51 (estatuto -> escritura .)
    FORWARD         reduce using rule 51 (estatuto -> escritura .)
    BACKWARD        reduce using rule 51 (estatuto -> escritura .)
    LEFT            reduce using rule 51 (estatuto -> escritura .)
    RIGHT           reduce using rule 51 (estatuto -> escritura .)
    TURN            reduce using rule 51 (estatuto -> escritura .)
    SIZE            reduce using rule 51 (estatuto -> escritura .)
    CIRCLE          reduce using rule 51 (estatuto -> escritura .)
    TRIANGLE        reduce using rule 51 (estatuto -> escritura .)
    SQUARE          reduce using rule 51 (estatuto -> escritura .)
    NGON            reduce using rule 51 (estatuto -> escritura .)
    ARC             reduce using rule 51 (estatuto -> escritura .)
    UP              reduce using rule 51 (estatuto -> escritura .)
    DOWN            reduce using rule 51 (estatuto -> escritura .)
    COLOR           reduce using rule 51 (estatuto -> escritura .)
    RETURN          reduce using rule 51 (estatuto -> escritura .)
    BRADER          reduce using rule 51 (estatuto -> escritura .)


state 36

    (52) estatuto -> ciclo .

    ID              reduce using rule 52 (estatuto -> ciclo .)
    IF              reduce using rule 52 (estatuto -> ciclo .)
    PRINT           reduce using rule 52 (estatuto -> ciclo .)
    REPEAT          reduce using rule 52 (estatuto -> ciclo .)
    FORWARD         reduce using rule 52 (estatuto -> ciclo .)
    BACKWARD        reduce using rule 52 (estatuto -> ciclo .)
    LEFT            reduce using rule 52 (estatuto -> ciclo .)
    RIGHT           reduce using rule 52 (estatuto -> ciclo .)
    TURN            reduce using rule 52 (estatuto -> ciclo .)
    SIZE            reduce using rule 52 (estatuto -> ciclo .)
    CIRCLE          reduce using rule 52 (estatuto -> ciclo .)
    TRIANGLE        reduce using rule 52 (estatuto -> ciclo .)
    SQUARE          reduce using rule 52 (estatuto -> ciclo .)
    NGON            reduce using rule 52 (estatuto -> ciclo .)
    ARC             reduce using rule 52 (estatuto -> ciclo .)
    UP              reduce using rule 52 (estatuto -> ciclo .)
    DOWN            reduce using rule 52 (estatuto -> ciclo .)
    COLOR           reduce using rule 52 (estatuto -> ciclo .)
    RETURN          reduce using rule 52 (estatuto -> ciclo .)
    BRADER          reduce using rule 52 (estatuto -> ciclo .)


state 37

    (53) estatuto -> instruccion .

    ID              reduce using rule 53 (estatuto -> instruccion .)
    IF              reduce using rule 53 (estatuto -> instruccion .)
    PRINT           reduce using rule 53 (estatuto -> instruccion .)
    REPEAT          reduce using rule 53 (estatuto -> instruccion .)
    FORWARD         reduce using rule 53 (estatuto -> instruccion .)
    BACKWARD        reduce using rule 53 (estatuto -> instruccion .)
    LEFT            reduce using rule 53 (estatuto -> instruccion .)
    RIGHT           reduce using rule 53 (estatuto -> instruccion .)
    TURN            reduce using rule 53 (estatuto -> instruccion .)
    SIZE            reduce using rule 53 (estatuto -> instruccion .)
    CIRCLE          reduce using rule 53 (estatuto -> instruccion .)
    TRIANGLE        reduce using rule 53 (estatuto -> instruccion .)
    SQUARE          reduce using rule 53 (estatuto -> instruccion .)
    NGON            reduce using rule 53 (estatuto -> instruccion .)
    ARC             reduce using rule 53 (estatuto -> instruccion .)
    UP              reduce using rule 53 (estatuto -> instruccion .)
    DOWN            reduce using rule 53 (estatuto -> instruccion .)
    COLOR           reduce using rule 53 (estatuto -> instruccion .)
    RETURN          reduce using rule 53 (estatuto -> instruccion .)
    BRADER          reduce using rule 53 (estatuto -> instruccion .)


state 38

    (54) estatuto -> func_call . PUNTCOM

    PUNTCOM         shift and go to state 82


state 39

    (58) condicion -> IF . PARIZQ expresion PARDER bloque else_bloque

    PARIZQ          shift and go to state 83


state 40

    (61) escritura -> PRINT . PARIZQ arg_escritura PARDER PUNTCOM

    PARIZQ          shift and go to state 84


state 41

    (66) ciclo -> REPEAT . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 85


state 42

    (86) instruccion -> FORWARD . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 86


state 43

    (87) instruccion -> BACKWARD . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 87


state 44

    (88) instruccion -> LEFT . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 88


state 45

    (89) instruccion -> RIGHT . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 89


state 46

    (90) instruccion -> TURN . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 90


state 47

    (91) instruccion -> SIZE . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 91


state 48

    (92) instruccion -> CIRCLE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 92


state 49

    (93) instruccion -> TRIANGLE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 93


state 50

    (94) instruccion -> SQUARE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 94


state 51

    (95) instruccion -> NGON . PARIZQ expresion COMA expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 95


state 52

    (96) instruccion -> ARC . PARIZQ expresion COMA expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 96


state 53

    (97) instruccion -> UP . PARIZQ PARDER PUNTCOM

    PARIZQ          shift and go to state 97


state 54

    (98) instruccion -> DOWN . PARIZQ PARDER PUNTCOM

    PARIZQ          shift and go to state 98


state 55

    (99) instruccion -> COLOR . PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 99


state 56

    (7) var_o_func -> lista vars_lista . PUNTCOM var_func

    PUNTCOM         shift and go to state 100


state 57

    (17) vars_lista -> COMA . ID lista vars_lista

    ID              shift and go to state 101


state 58

    (8) var_o_func -> PARIZQ pars . PARDER bloque_func funcs

    PARDER          shift and go to state 102


state 59

    (82) pars -> tipo . ID par

    ID              shift and go to state 103


state 60

    (69) lista -> CORIZQ expresion . CORDER matriz

    CORDER          shift and go to state 104


state 61

    (25) expresion -> exp . mas_exp
    (26) mas_exp -> . MENOR exp
    (27) mas_exp -> . MAYOR exp
    (28) mas_exp -> . MENIGUAL exp
    (29) mas_exp -> . MAYIGUAL exp
    (30) mas_exp -> . IGUAL exp
    (31) mas_exp -> . DIF exp
    (32) mas_exp -> . AND exp
    (33) mas_exp -> . OR exp
    (34) mas_exp -> .

    MENOR           shift and go to state 106
    MAYOR           shift and go to state 107
    MENIGUAL        shift and go to state 108
    MAYIGUAL        shift and go to state 109
    IGUAL           shift and go to state 110
    DIF             shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    CORDER          reduce using rule 34 (mas_exp -> .)
    PARDER          reduce using rule 34 (mas_exp -> .)
    PUNTCOM         reduce using rule 34 (mas_exp -> .)
    COMA            reduce using rule 34 (mas_exp -> .)

    mas_exp                        shift and go to state 105

state 62

    (35) exp -> termino . suma_resta
    (36) suma_resta -> . SUMA termino
    (37) suma_resta -> . RESTA termino
    (38) suma_resta -> .

    SUMA            shift and go to state 115
    RESTA           shift and go to state 116
    MENOR           reduce using rule 38 (suma_resta -> .)
    MAYOR           reduce using rule 38 (suma_resta -> .)
    MENIGUAL        reduce using rule 38 (suma_resta -> .)
    MAYIGUAL        reduce using rule 38 (suma_resta -> .)
    IGUAL           reduce using rule 38 (suma_resta -> .)
    DIF             reduce using rule 38 (suma_resta -> .)
    AND             reduce using rule 38 (suma_resta -> .)
    OR              reduce using rule 38 (suma_resta -> .)
    CORDER          reduce using rule 38 (suma_resta -> .)
    PARDER          reduce using rule 38 (suma_resta -> .)
    PUNTCOM         reduce using rule 38 (suma_resta -> .)
    COMA            reduce using rule 38 (suma_resta -> .)

    suma_resta                     shift and go to state 114

state 63

    (39) termino -> factor . mult_div
    (40) mult_div -> . MULT factor
    (41) mult_div -> . DIV factor
    (42) mult_div -> .

    MULT            shift and go to state 118
    DIV             shift and go to state 119
    SUMA            reduce using rule 42 (mult_div -> .)
    RESTA           reduce using rule 42 (mult_div -> .)
    MENOR           reduce using rule 42 (mult_div -> .)
    MAYOR           reduce using rule 42 (mult_div -> .)
    MENIGUAL        reduce using rule 42 (mult_div -> .)
    MAYIGUAL        reduce using rule 42 (mult_div -> .)
    IGUAL           reduce using rule 42 (mult_div -> .)
    DIF             reduce using rule 42 (mult_div -> .)
    AND             reduce using rule 42 (mult_div -> .)
    OR              reduce using rule 42 (mult_div -> .)
    CORDER          reduce using rule 42 (mult_div -> .)
    PARDER          reduce using rule 42 (mult_div -> .)
    PUNTCOM         reduce using rule 42 (mult_div -> .)
    COMA            reduce using rule 42 (mult_div -> .)

    mult_div                       shift and go to state 117

state 64

    (43) factor -> PARIZQ . expresion PARDER
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 120
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 65

    (44) factor -> var_func_call .

    MULT            reduce using rule 44 (factor -> var_func_call .)
    DIV             reduce using rule 44 (factor -> var_func_call .)
    SUMA            reduce using rule 44 (factor -> var_func_call .)
    RESTA           reduce using rule 44 (factor -> var_func_call .)
    MENOR           reduce using rule 44 (factor -> var_func_call .)
    MAYOR           reduce using rule 44 (factor -> var_func_call .)
    MENIGUAL        reduce using rule 44 (factor -> var_func_call .)
    MAYIGUAL        reduce using rule 44 (factor -> var_func_call .)
    IGUAL           reduce using rule 44 (factor -> var_func_call .)
    DIF             reduce using rule 44 (factor -> var_func_call .)
    AND             reduce using rule 44 (factor -> var_func_call .)
    OR              reduce using rule 44 (factor -> var_func_call .)
    CORDER          reduce using rule 44 (factor -> var_func_call .)
    PARDER          reduce using rule 44 (factor -> var_func_call .)
    PUNTCOM         reduce using rule 44 (factor -> var_func_call .)
    COMA            reduce using rule 44 (factor -> var_func_call .)


state 66

    (45) factor -> SUMA . var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    var_func_call                  shift and go to state 121
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 67

    (46) factor -> RESTA . var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    var_func_call                  shift and go to state 122
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 68

    (47) var_func_call -> var .

    MULT            reduce using rule 47 (var_func_call -> var .)
    DIV             reduce using rule 47 (var_func_call -> var .)
    SUMA            reduce using rule 47 (var_func_call -> var .)
    RESTA           reduce using rule 47 (var_func_call -> var .)
    MENOR           reduce using rule 47 (var_func_call -> var .)
    MAYOR           reduce using rule 47 (var_func_call -> var .)
    MENIGUAL        reduce using rule 47 (var_func_call -> var .)
    MAYIGUAL        reduce using rule 47 (var_func_call -> var .)
    IGUAL           reduce using rule 47 (var_func_call -> var .)
    DIF             reduce using rule 47 (var_func_call -> var .)
    AND             reduce using rule 47 (var_func_call -> var .)
    OR              reduce using rule 47 (var_func_call -> var .)
    CORDER          reduce using rule 47 (var_func_call -> var .)
    PARDER          reduce using rule 47 (var_func_call -> var .)
    PUNTCOM         reduce using rule 47 (var_func_call -> var .)
    COMA            reduce using rule 47 (var_func_call -> var .)


state 69

    (48) var_func_call -> func_call .

    MULT            reduce using rule 48 (var_func_call -> func_call .)
    DIV             reduce using rule 48 (var_func_call -> func_call .)
    SUMA            reduce using rule 48 (var_func_call -> func_call .)
    RESTA           reduce using rule 48 (var_func_call -> func_call .)
    MENOR           reduce using rule 48 (var_func_call -> func_call .)
    MAYOR           reduce using rule 48 (var_func_call -> func_call .)
    MENIGUAL        reduce using rule 48 (var_func_call -> func_call .)
    MAYIGUAL        reduce using rule 48 (var_func_call -> func_call .)
    IGUAL           reduce using rule 48 (var_func_call -> func_call .)
    DIF             reduce using rule 48 (var_func_call -> func_call .)
    AND             reduce using rule 48 (var_func_call -> func_call .)
    OR              reduce using rule 48 (var_func_call -> func_call .)
    CORDER          reduce using rule 48 (var_func_call -> func_call .)
    PARDER          reduce using rule 48 (var_func_call -> func_call .)
    PUNTCOM         reduce using rule 48 (var_func_call -> func_call .)
    COMA            reduce using rule 48 (var_func_call -> func_call .)


state 70

    (73) var -> ID . lista
    (76) func_call -> ID . PARIZQ args PARDER
    (69) lista -> . CORIZQ expresion CORDER matriz
    (70) lista -> .

    PARIZQ          shift and go to state 80
    CORIZQ          shift and go to state 24
    MULT            reduce using rule 70 (lista -> .)
    DIV             reduce using rule 70 (lista -> .)
    SUMA            reduce using rule 70 (lista -> .)
    RESTA           reduce using rule 70 (lista -> .)
    MENOR           reduce using rule 70 (lista -> .)
    MAYOR           reduce using rule 70 (lista -> .)
    MENIGUAL        reduce using rule 70 (lista -> .)
    MAYIGUAL        reduce using rule 70 (lista -> .)
    IGUAL           reduce using rule 70 (lista -> .)
    DIF             reduce using rule 70 (lista -> .)
    AND             reduce using rule 70 (lista -> .)
    OR              reduce using rule 70 (lista -> .)
    CORDER          reduce using rule 70 (lista -> .)
    PARDER          reduce using rule 70 (lista -> .)
    PUNTCOM         reduce using rule 70 (lista -> .)
    COMA            reduce using rule 70 (lista -> .)

    lista                          shift and go to state 123

state 71

    (74) var -> CTE_I .

    MULT            reduce using rule 74 (var -> CTE_I .)
    DIV             reduce using rule 74 (var -> CTE_I .)
    SUMA            reduce using rule 74 (var -> CTE_I .)
    RESTA           reduce using rule 74 (var -> CTE_I .)
    MENOR           reduce using rule 74 (var -> CTE_I .)
    MAYOR           reduce using rule 74 (var -> CTE_I .)
    MENIGUAL        reduce using rule 74 (var -> CTE_I .)
    MAYIGUAL        reduce using rule 74 (var -> CTE_I .)
    IGUAL           reduce using rule 74 (var -> CTE_I .)
    DIF             reduce using rule 74 (var -> CTE_I .)
    AND             reduce using rule 74 (var -> CTE_I .)
    OR              reduce using rule 74 (var -> CTE_I .)
    CORDER          reduce using rule 74 (var -> CTE_I .)
    PARDER          reduce using rule 74 (var -> CTE_I .)
    PUNTCOM         reduce using rule 74 (var -> CTE_I .)
    COMA            reduce using rule 74 (var -> CTE_I .)


state 72

    (75) var -> CTE_F .

    MULT            reduce using rule 75 (var -> CTE_F .)
    DIV             reduce using rule 75 (var -> CTE_F .)
    SUMA            reduce using rule 75 (var -> CTE_F .)
    RESTA           reduce using rule 75 (var -> CTE_F .)
    MENOR           reduce using rule 75 (var -> CTE_F .)
    MAYOR           reduce using rule 75 (var -> CTE_F .)
    MENIGUAL        reduce using rule 75 (var -> CTE_F .)
    MAYIGUAL        reduce using rule 75 (var -> CTE_F .)
    IGUAL           reduce using rule 75 (var -> CTE_F .)
    DIF             reduce using rule 75 (var -> CTE_F .)
    AND             reduce using rule 75 (var -> CTE_F .)
    OR              reduce using rule 75 (var -> CTE_F .)
    CORDER          reduce using rule 75 (var -> CTE_F .)
    PARDER          reduce using rule 75 (var -> CTE_F .)
    PUNTCOM         reduce using rule 75 (var -> CTE_F .)
    COMA            reduce using rule 75 (var -> CTE_F .)


state 73

    (5) var_func -> VOID ID PARIZQ pars . PARDER bloque_func funcs

    PARDER          shift and go to state 124


state 74

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM . HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    HEIGHT          shift and go to state 125


state 75

    (9) bloque_func -> BRAIZQ vars_estatutos returns . BRADER

    BRADER          shift and go to state 126


state 76

    (14) returns -> RETURN . expresion PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 127
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 77

    (10) vars_estatutos -> vars estatutos .

    RETURN          reduce using rule 10 (vars_estatutos -> vars estatutos .)
    BRADER          reduce using rule 10 (vars_estatutos -> vars estatutos .)


state 78

    (16) vars -> tipo ID . lista vars_lista PUNTCOM mas_vars
    (69) lista -> . CORIZQ expresion CORDER matriz
    (70) lista -> .

    CORIZQ          shift and go to state 24
    COMA            reduce using rule 70 (lista -> .)
    PUNTCOM         reduce using rule 70 (lista -> .)

    lista                          shift and go to state 128

state 79

    (55) asignacion -> ID lista . ASIG exp_input PUNTCOM

    ASIG            shift and go to state 129


state 80

    (76) func_call -> ID PARIZQ . args PARDER
    (77) args -> . expresion arg
    (78) args -> .
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARDER          reduce using rule 78 (args -> .)
    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    args                           shift and go to state 130
    expresion                      shift and go to state 131
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 81

    (12) estatutos -> estatuto estatutos .

    RETURN          reduce using rule 12 (estatutos -> estatuto estatutos .)
    BRADER          reduce using rule 12 (estatutos -> estatuto estatutos .)


state 82

    (54) estatuto -> func_call PUNTCOM .

    ID              reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    IF              reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    PRINT           reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    REPEAT          reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    FORWARD         reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    BACKWARD        reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    LEFT            reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    RIGHT           reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    TURN            reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    SIZE            reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    CIRCLE          reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    TRIANGLE        reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    SQUARE          reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    NGON            reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    ARC             reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    UP              reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    DOWN            reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    COLOR           reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    RETURN          reduce using rule 54 (estatuto -> func_call PUNTCOM .)
    BRADER          reduce using rule 54 (estatuto -> func_call PUNTCOM .)


state 83

    (58) condicion -> IF PARIZQ . expresion PARDER bloque else_bloque
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 132
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 84

    (61) escritura -> PRINT PARIZQ . arg_escritura PARDER PUNTCOM
    (62) arg_escritura -> . expresion args_escritura
    (63) arg_escritura -> . CTE_STR args_escritura
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    CTE_STR         shift and go to state 135
    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    arg_escritura                  shift and go to state 133
    expresion                      shift and go to state 134
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 85

    (66) ciclo -> REPEAT PARIZQ . expresion PARDER bloque
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 136
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 86

    (86) instruccion -> FORWARD PARIZQ . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 137
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 87

    (87) instruccion -> BACKWARD PARIZQ . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 138
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 88

    (88) instruccion -> LEFT PARIZQ . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 139
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 89

    (89) instruccion -> RIGHT PARIZQ . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 140
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 90

    (90) instruccion -> TURN PARIZQ . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 141
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 91

    (91) instruccion -> SIZE PARIZQ . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 142
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 92

    (92) instruccion -> CIRCLE PARIZQ . expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 143
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 93

    (93) instruccion -> TRIANGLE PARIZQ . expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 144
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 94

    (94) instruccion -> SQUARE PARIZQ . expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 145
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 95

    (95) instruccion -> NGON PARIZQ . expresion COMA expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 146
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 96

    (96) instruccion -> ARC PARIZQ . expresion COMA expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 147
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 97

    (97) instruccion -> UP PARIZQ . PARDER PUNTCOM

    PARDER          shift and go to state 148


state 98

    (98) instruccion -> DOWN PARIZQ . PARDER PUNTCOM

    PARDER          shift and go to state 149


state 99

    (99) instruccion -> COLOR PARIZQ . expresion COMA expresion COMA expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 150
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 100

    (7) var_o_func -> lista vars_lista PUNTCOM . var_func
    (4) var_func -> . tipo ID var_o_func
    (5) var_func -> . VOID ID PARIZQ pars PARDER bloque_func funcs
    (6) var_func -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    VOID            shift and go to state 10
    MAIN            reduce using rule 6 (var_func -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    var_func                       shift and go to state 151
    tipo                           shift and go to state 9

state 101

    (17) vars_lista -> COMA ID . lista vars_lista
    (69) lista -> . CORIZQ expresion CORDER matriz
    (70) lista -> .

    CORIZQ          shift and go to state 24
    COMA            reduce using rule 70 (lista -> .)
    PUNTCOM         reduce using rule 70 (lista -> .)

    lista                          shift and go to state 152

state 102

    (8) var_o_func -> PARIZQ pars PARDER . bloque_func funcs
    (9) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 20

    bloque_func                    shift and go to state 153

state 103

    (82) pars -> tipo ID . par
    (84) par -> . COMA tipo ID par
    (85) par -> .

    COMA            shift and go to state 155
    PARDER          reduce using rule 85 (par -> .)

    par                            shift and go to state 154

state 104

    (69) lista -> CORIZQ expresion CORDER . matriz
    (71) matriz -> . CORIZQ expresion CORDER
    (72) matriz -> .

    CORIZQ          shift and go to state 156
    COMA            reduce using rule 72 (matriz -> .)
    PUNTCOM         reduce using rule 72 (matriz -> .)
    ASIG            reduce using rule 72 (matriz -> .)
    MULT            reduce using rule 72 (matriz -> .)
    DIV             reduce using rule 72 (matriz -> .)
    SUMA            reduce using rule 72 (matriz -> .)
    RESTA           reduce using rule 72 (matriz -> .)
    MENOR           reduce using rule 72 (matriz -> .)
    MAYOR           reduce using rule 72 (matriz -> .)
    MENIGUAL        reduce using rule 72 (matriz -> .)
    MAYIGUAL        reduce using rule 72 (matriz -> .)
    IGUAL           reduce using rule 72 (matriz -> .)
    DIF             reduce using rule 72 (matriz -> .)
    AND             reduce using rule 72 (matriz -> .)
    OR              reduce using rule 72 (matriz -> .)
    CORDER          reduce using rule 72 (matriz -> .)
    PARDER          reduce using rule 72 (matriz -> .)

    matriz                         shift and go to state 157

state 105

    (25) expresion -> exp mas_exp .

    CORDER          reduce using rule 25 (expresion -> exp mas_exp .)
    PARDER          reduce using rule 25 (expresion -> exp mas_exp .)
    PUNTCOM         reduce using rule 25 (expresion -> exp mas_exp .)
    COMA            reduce using rule 25 (expresion -> exp mas_exp .)


state 106

    (26) mas_exp -> MENOR . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 158
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 107

    (27) mas_exp -> MAYOR . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 159
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 108

    (28) mas_exp -> MENIGUAL . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 160
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 109

    (29) mas_exp -> MAYIGUAL . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 161
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 110

    (30) mas_exp -> IGUAL . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 162
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 111

    (31) mas_exp -> DIF . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 163
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 112

    (32) mas_exp -> AND . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 164
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 113

    (33) mas_exp -> OR . exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp                            shift and go to state 165
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 114

    (35) exp -> termino suma_resta .

    MENOR           reduce using rule 35 (exp -> termino suma_resta .)
    MAYOR           reduce using rule 35 (exp -> termino suma_resta .)
    MENIGUAL        reduce using rule 35 (exp -> termino suma_resta .)
    MAYIGUAL        reduce using rule 35 (exp -> termino suma_resta .)
    IGUAL           reduce using rule 35 (exp -> termino suma_resta .)
    DIF             reduce using rule 35 (exp -> termino suma_resta .)
    AND             reduce using rule 35 (exp -> termino suma_resta .)
    OR              reduce using rule 35 (exp -> termino suma_resta .)
    CORDER          reduce using rule 35 (exp -> termino suma_resta .)
    PARDER          reduce using rule 35 (exp -> termino suma_resta .)
    PUNTCOM         reduce using rule 35 (exp -> termino suma_resta .)
    COMA            reduce using rule 35 (exp -> termino suma_resta .)


state 115

    (36) suma_resta -> SUMA . termino
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    termino                        shift and go to state 166
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 116

    (37) suma_resta -> RESTA . termino
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    termino                        shift and go to state 167
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 117

    (39) termino -> factor mult_div .

    SUMA            reduce using rule 39 (termino -> factor mult_div .)
    RESTA           reduce using rule 39 (termino -> factor mult_div .)
    MENOR           reduce using rule 39 (termino -> factor mult_div .)
    MAYOR           reduce using rule 39 (termino -> factor mult_div .)
    MENIGUAL        reduce using rule 39 (termino -> factor mult_div .)
    MAYIGUAL        reduce using rule 39 (termino -> factor mult_div .)
    IGUAL           reduce using rule 39 (termino -> factor mult_div .)
    DIF             reduce using rule 39 (termino -> factor mult_div .)
    AND             reduce using rule 39 (termino -> factor mult_div .)
    OR              reduce using rule 39 (termino -> factor mult_div .)
    CORDER          reduce using rule 39 (termino -> factor mult_div .)
    PARDER          reduce using rule 39 (termino -> factor mult_div .)
    PUNTCOM         reduce using rule 39 (termino -> factor mult_div .)
    COMA            reduce using rule 39 (termino -> factor mult_div .)


state 118

    (40) mult_div -> MULT . factor
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    factor                         shift and go to state 168
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 119

    (41) mult_div -> DIV . factor
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    factor                         shift and go to state 169
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 120

    (43) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 170


state 121

    (45) factor -> SUMA var_func_call .

    MULT            reduce using rule 45 (factor -> SUMA var_func_call .)
    DIV             reduce using rule 45 (factor -> SUMA var_func_call .)
    SUMA            reduce using rule 45 (factor -> SUMA var_func_call .)
    RESTA           reduce using rule 45 (factor -> SUMA var_func_call .)
    MENOR           reduce using rule 45 (factor -> SUMA var_func_call .)
    MAYOR           reduce using rule 45 (factor -> SUMA var_func_call .)
    MENIGUAL        reduce using rule 45 (factor -> SUMA var_func_call .)
    MAYIGUAL        reduce using rule 45 (factor -> SUMA var_func_call .)
    IGUAL           reduce using rule 45 (factor -> SUMA var_func_call .)
    DIF             reduce using rule 45 (factor -> SUMA var_func_call .)
    AND             reduce using rule 45 (factor -> SUMA var_func_call .)
    OR              reduce using rule 45 (factor -> SUMA var_func_call .)
    CORDER          reduce using rule 45 (factor -> SUMA var_func_call .)
    PARDER          reduce using rule 45 (factor -> SUMA var_func_call .)
    PUNTCOM         reduce using rule 45 (factor -> SUMA var_func_call .)
    COMA            reduce using rule 45 (factor -> SUMA var_func_call .)


state 122

    (46) factor -> RESTA var_func_call .

    MULT            reduce using rule 46 (factor -> RESTA var_func_call .)
    DIV             reduce using rule 46 (factor -> RESTA var_func_call .)
    SUMA            reduce using rule 46 (factor -> RESTA var_func_call .)
    RESTA           reduce using rule 46 (factor -> RESTA var_func_call .)
    MENOR           reduce using rule 46 (factor -> RESTA var_func_call .)
    MAYOR           reduce using rule 46 (factor -> RESTA var_func_call .)
    MENIGUAL        reduce using rule 46 (factor -> RESTA var_func_call .)
    MAYIGUAL        reduce using rule 46 (factor -> RESTA var_func_call .)
    IGUAL           reduce using rule 46 (factor -> RESTA var_func_call .)
    DIF             reduce using rule 46 (factor -> RESTA var_func_call .)
    AND             reduce using rule 46 (factor -> RESTA var_func_call .)
    OR              reduce using rule 46 (factor -> RESTA var_func_call .)
    CORDER          reduce using rule 46 (factor -> RESTA var_func_call .)
    PARDER          reduce using rule 46 (factor -> RESTA var_func_call .)
    PUNTCOM         reduce using rule 46 (factor -> RESTA var_func_call .)
    COMA            reduce using rule 46 (factor -> RESTA var_func_call .)


state 123

    (73) var -> ID lista .

    MULT            reduce using rule 73 (var -> ID lista .)
    DIV             reduce using rule 73 (var -> ID lista .)
    SUMA            reduce using rule 73 (var -> ID lista .)
    RESTA           reduce using rule 73 (var -> ID lista .)
    MENOR           reduce using rule 73 (var -> ID lista .)
    MAYOR           reduce using rule 73 (var -> ID lista .)
    MENIGUAL        reduce using rule 73 (var -> ID lista .)
    MAYIGUAL        reduce using rule 73 (var -> ID lista .)
    IGUAL           reduce using rule 73 (var -> ID lista .)
    DIF             reduce using rule 73 (var -> ID lista .)
    AND             reduce using rule 73 (var -> ID lista .)
    OR              reduce using rule 73 (var -> ID lista .)
    CORDER          reduce using rule 73 (var -> ID lista .)
    PARDER          reduce using rule 73 (var -> ID lista .)
    PUNTCOM         reduce using rule 73 (var -> ID lista .)
    COMA            reduce using rule 73 (var -> ID lista .)


state 124

    (5) var_func -> VOID ID PARIZQ pars PARDER . bloque_func funcs
    (9) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 20

    bloque_func                    shift and go to state 171

state 125

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT . CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_I           shift and go to state 172


state 126

    (9) bloque_func -> BRAIZQ vars_estatutos returns BRADER .

    $end            reduce using rule 9 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    VOID            reduce using rule 9 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    INT             reduce using rule 9 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    FLOAT           reduce using rule 9 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)
    MAIN            reduce using rule 9 (bloque_func -> BRAIZQ vars_estatutos returns BRADER .)


state 127

    (14) returns -> RETURN expresion . PUNTCOM

    PUNTCOM         shift and go to state 173


state 128

    (16) vars -> tipo ID lista . vars_lista PUNTCOM mas_vars
    (17) vars_lista -> . COMA ID lista vars_lista
    (18) vars_lista -> .

    COMA            shift and go to state 57
    PUNTCOM         reduce using rule 18 (vars_lista -> .)

    vars_lista                     shift and go to state 174

state 129

    (55) asignacion -> ID lista ASIG . exp_input PUNTCOM
    (56) exp_input -> . expresion
    (57) exp_input -> . INPUT PARIZQ PARDER
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    INPUT           shift and go to state 177
    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    exp_input                      shift and go to state 175
    expresion                      shift and go to state 176
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 130

    (76) func_call -> ID PARIZQ args . PARDER

    PARDER          shift and go to state 178


state 131

    (77) args -> expresion . arg
    (79) arg -> . COMA expresion arg
    (80) arg -> .

    COMA            shift and go to state 180
    PARDER          reduce using rule 80 (arg -> .)

    arg                            shift and go to state 179

state 132

    (58) condicion -> IF PARIZQ expresion . PARDER bloque else_bloque

    PARDER          shift and go to state 181


state 133

    (61) escritura -> PRINT PARIZQ arg_escritura . PARDER PUNTCOM

    PARDER          shift and go to state 182


state 134

    (62) arg_escritura -> expresion . args_escritura
    (64) args_escritura -> . COMA arg_escritura
    (65) args_escritura -> .

    COMA            shift and go to state 184
    PARDER          reduce using rule 65 (args_escritura -> .)

    args_escritura                 shift and go to state 183

state 135

    (63) arg_escritura -> CTE_STR . args_escritura
    (64) args_escritura -> . COMA arg_escritura
    (65) args_escritura -> .

    COMA            shift and go to state 184
    PARDER          reduce using rule 65 (args_escritura -> .)

    args_escritura                 shift and go to state 185

state 136

    (66) ciclo -> REPEAT PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 186


state 137

    (86) instruccion -> FORWARD PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 187


state 138

    (87) instruccion -> BACKWARD PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 188


state 139

    (88) instruccion -> LEFT PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 189


state 140

    (89) instruccion -> RIGHT PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 190


state 141

    (90) instruccion -> TURN PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 191


state 142

    (91) instruccion -> SIZE PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 192


state 143

    (92) instruccion -> CIRCLE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 193


state 144

    (93) instruccion -> TRIANGLE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 194


state 145

    (94) instruccion -> SQUARE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 195


state 146

    (95) instruccion -> NGON PARIZQ expresion . COMA expresion PARDER transform PUNTCOM

    COMA            shift and go to state 196


state 147

    (96) instruccion -> ARC PARIZQ expresion . COMA expresion PARDER transform PUNTCOM

    COMA            shift and go to state 197


state 148

    (97) instruccion -> UP PARIZQ PARDER . PUNTCOM

    PUNTCOM         shift and go to state 198


state 149

    (98) instruccion -> DOWN PARIZQ PARDER . PUNTCOM

    PUNTCOM         shift and go to state 199


state 150

    (99) instruccion -> COLOR PARIZQ expresion . COMA expresion COMA expresion PARDER PUNTCOM

    COMA            shift and go to state 200


state 151

    (7) var_o_func -> lista vars_lista PUNTCOM var_func .

    MAIN            reduce using rule 7 (var_o_func -> lista vars_lista PUNTCOM var_func .)


state 152

    (17) vars_lista -> COMA ID lista . vars_lista
    (17) vars_lista -> . COMA ID lista vars_lista
    (18) vars_lista -> .

    COMA            shift and go to state 57
    PUNTCOM         reduce using rule 18 (vars_lista -> .)

    vars_lista                     shift and go to state 201

state 153

    (8) var_o_func -> PARIZQ pars PARDER bloque_func . funcs
    (21) funcs -> . func funcs
    (22) funcs -> .
    (23) func -> . tipo ID PARIZQ pars PARDER bloque_func
    (24) func -> . VOID ID PARIZQ pars PARDER bloque_func
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    MAIN            reduce using rule 22 (funcs -> .)
    VOID            shift and go to state 205
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    funcs                          shift and go to state 202
    func                           shift and go to state 203
    tipo                           shift and go to state 204

state 154

    (82) pars -> tipo ID par .

    PARDER          reduce using rule 82 (pars -> tipo ID par .)


state 155

    (84) par -> COMA . tipo ID par
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    tipo                           shift and go to state 206

state 156

    (71) matriz -> CORIZQ . expresion CORDER
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 207
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 157

    (69) lista -> CORIZQ expresion CORDER matriz .

    COMA            reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    PUNTCOM         reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    ASIG            reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    MULT            reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    DIV             reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    SUMA            reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    RESTA           reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    MENOR           reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    MAYOR           reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    MENIGUAL        reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    MAYIGUAL        reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    IGUAL           reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    DIF             reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    AND             reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    OR              reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    CORDER          reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)
    PARDER          reduce using rule 69 (lista -> CORIZQ expresion CORDER matriz .)


state 158

    (26) mas_exp -> MENOR exp .

    CORDER          reduce using rule 26 (mas_exp -> MENOR exp .)
    PARDER          reduce using rule 26 (mas_exp -> MENOR exp .)
    PUNTCOM         reduce using rule 26 (mas_exp -> MENOR exp .)
    COMA            reduce using rule 26 (mas_exp -> MENOR exp .)


state 159

    (27) mas_exp -> MAYOR exp .

    CORDER          reduce using rule 27 (mas_exp -> MAYOR exp .)
    PARDER          reduce using rule 27 (mas_exp -> MAYOR exp .)
    PUNTCOM         reduce using rule 27 (mas_exp -> MAYOR exp .)
    COMA            reduce using rule 27 (mas_exp -> MAYOR exp .)


state 160

    (28) mas_exp -> MENIGUAL exp .

    CORDER          reduce using rule 28 (mas_exp -> MENIGUAL exp .)
    PARDER          reduce using rule 28 (mas_exp -> MENIGUAL exp .)
    PUNTCOM         reduce using rule 28 (mas_exp -> MENIGUAL exp .)
    COMA            reduce using rule 28 (mas_exp -> MENIGUAL exp .)


state 161

    (29) mas_exp -> MAYIGUAL exp .

    CORDER          reduce using rule 29 (mas_exp -> MAYIGUAL exp .)
    PARDER          reduce using rule 29 (mas_exp -> MAYIGUAL exp .)
    PUNTCOM         reduce using rule 29 (mas_exp -> MAYIGUAL exp .)
    COMA            reduce using rule 29 (mas_exp -> MAYIGUAL exp .)


state 162

    (30) mas_exp -> IGUAL exp .

    CORDER          reduce using rule 30 (mas_exp -> IGUAL exp .)
    PARDER          reduce using rule 30 (mas_exp -> IGUAL exp .)
    PUNTCOM         reduce using rule 30 (mas_exp -> IGUAL exp .)
    COMA            reduce using rule 30 (mas_exp -> IGUAL exp .)


state 163

    (31) mas_exp -> DIF exp .

    CORDER          reduce using rule 31 (mas_exp -> DIF exp .)
    PARDER          reduce using rule 31 (mas_exp -> DIF exp .)
    PUNTCOM         reduce using rule 31 (mas_exp -> DIF exp .)
    COMA            reduce using rule 31 (mas_exp -> DIF exp .)


state 164

    (32) mas_exp -> AND exp .

    CORDER          reduce using rule 32 (mas_exp -> AND exp .)
    PARDER          reduce using rule 32 (mas_exp -> AND exp .)
    PUNTCOM         reduce using rule 32 (mas_exp -> AND exp .)
    COMA            reduce using rule 32 (mas_exp -> AND exp .)


state 165

    (33) mas_exp -> OR exp .

    CORDER          reduce using rule 33 (mas_exp -> OR exp .)
    PARDER          reduce using rule 33 (mas_exp -> OR exp .)
    PUNTCOM         reduce using rule 33 (mas_exp -> OR exp .)
    COMA            reduce using rule 33 (mas_exp -> OR exp .)


state 166

    (36) suma_resta -> SUMA termino .

    MENOR           reduce using rule 36 (suma_resta -> SUMA termino .)
    MAYOR           reduce using rule 36 (suma_resta -> SUMA termino .)
    MENIGUAL        reduce using rule 36 (suma_resta -> SUMA termino .)
    MAYIGUAL        reduce using rule 36 (suma_resta -> SUMA termino .)
    IGUAL           reduce using rule 36 (suma_resta -> SUMA termino .)
    DIF             reduce using rule 36 (suma_resta -> SUMA termino .)
    AND             reduce using rule 36 (suma_resta -> SUMA termino .)
    OR              reduce using rule 36 (suma_resta -> SUMA termino .)
    CORDER          reduce using rule 36 (suma_resta -> SUMA termino .)
    PARDER          reduce using rule 36 (suma_resta -> SUMA termino .)
    PUNTCOM         reduce using rule 36 (suma_resta -> SUMA termino .)
    COMA            reduce using rule 36 (suma_resta -> SUMA termino .)


state 167

    (37) suma_resta -> RESTA termino .

    MENOR           reduce using rule 37 (suma_resta -> RESTA termino .)
    MAYOR           reduce using rule 37 (suma_resta -> RESTA termino .)
    MENIGUAL        reduce using rule 37 (suma_resta -> RESTA termino .)
    MAYIGUAL        reduce using rule 37 (suma_resta -> RESTA termino .)
    IGUAL           reduce using rule 37 (suma_resta -> RESTA termino .)
    DIF             reduce using rule 37 (suma_resta -> RESTA termino .)
    AND             reduce using rule 37 (suma_resta -> RESTA termino .)
    OR              reduce using rule 37 (suma_resta -> RESTA termino .)
    CORDER          reduce using rule 37 (suma_resta -> RESTA termino .)
    PARDER          reduce using rule 37 (suma_resta -> RESTA termino .)
    PUNTCOM         reduce using rule 37 (suma_resta -> RESTA termino .)
    COMA            reduce using rule 37 (suma_resta -> RESTA termino .)


state 168

    (40) mult_div -> MULT factor .

    SUMA            reduce using rule 40 (mult_div -> MULT factor .)
    RESTA           reduce using rule 40 (mult_div -> MULT factor .)
    MENOR           reduce using rule 40 (mult_div -> MULT factor .)
    MAYOR           reduce using rule 40 (mult_div -> MULT factor .)
    MENIGUAL        reduce using rule 40 (mult_div -> MULT factor .)
    MAYIGUAL        reduce using rule 40 (mult_div -> MULT factor .)
    IGUAL           reduce using rule 40 (mult_div -> MULT factor .)
    DIF             reduce using rule 40 (mult_div -> MULT factor .)
    AND             reduce using rule 40 (mult_div -> MULT factor .)
    OR              reduce using rule 40 (mult_div -> MULT factor .)
    CORDER          reduce using rule 40 (mult_div -> MULT factor .)
    PARDER          reduce using rule 40 (mult_div -> MULT factor .)
    PUNTCOM         reduce using rule 40 (mult_div -> MULT factor .)
    COMA            reduce using rule 40 (mult_div -> MULT factor .)


state 169

    (41) mult_div -> DIV factor .

    SUMA            reduce using rule 41 (mult_div -> DIV factor .)
    RESTA           reduce using rule 41 (mult_div -> DIV factor .)
    MENOR           reduce using rule 41 (mult_div -> DIV factor .)
    MAYOR           reduce using rule 41 (mult_div -> DIV factor .)
    MENIGUAL        reduce using rule 41 (mult_div -> DIV factor .)
    MAYIGUAL        reduce using rule 41 (mult_div -> DIV factor .)
    IGUAL           reduce using rule 41 (mult_div -> DIV factor .)
    DIF             reduce using rule 41 (mult_div -> DIV factor .)
    AND             reduce using rule 41 (mult_div -> DIV factor .)
    OR              reduce using rule 41 (mult_div -> DIV factor .)
    CORDER          reduce using rule 41 (mult_div -> DIV factor .)
    PARDER          reduce using rule 41 (mult_div -> DIV factor .)
    PUNTCOM         reduce using rule 41 (mult_div -> DIV factor .)
    COMA            reduce using rule 41 (mult_div -> DIV factor .)


state 170

    (43) factor -> PARIZQ expresion PARDER .

    MULT            reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    SUMA            reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    RESTA           reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    MENIGUAL        reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    MAYIGUAL        reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    IGUAL           reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    DIF             reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 43 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 43 (factor -> PARIZQ expresion PARDER .)


state 171

    (5) var_func -> VOID ID PARIZQ pars PARDER bloque_func . funcs
    (21) funcs -> . func funcs
    (22) funcs -> .
    (23) func -> . tipo ID PARIZQ pars PARDER bloque_func
    (24) func -> . VOID ID PARIZQ pars PARDER bloque_func
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    MAIN            reduce using rule 22 (funcs -> .)
    VOID            shift and go to state 205
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    funcs                          shift and go to state 208
    func                           shift and go to state 203
    tipo                           shift and go to state 204

state 172

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I . PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    PUNTCOM         shift and go to state 209


state 173

    (14) returns -> RETURN expresion PUNTCOM .

    BRADER          reduce using rule 14 (returns -> RETURN expresion PUNTCOM .)


state 174

    (16) vars -> tipo ID lista vars_lista . PUNTCOM mas_vars

    PUNTCOM         shift and go to state 210


state 175

    (55) asignacion -> ID lista ASIG exp_input . PUNTCOM

    PUNTCOM         shift and go to state 211


state 176

    (56) exp_input -> expresion .

    PUNTCOM         reduce using rule 56 (exp_input -> expresion .)


state 177

    (57) exp_input -> INPUT . PARIZQ PARDER

    PARIZQ          shift and go to state 212


state 178

    (76) func_call -> ID PARIZQ args PARDER .

    PUNTCOM         reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    MULT            reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    DIV             reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    SUMA            reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    RESTA           reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    MENOR           reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    MAYOR           reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    MENIGUAL        reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    MAYIGUAL        reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    IGUAL           reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    DIF             reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    AND             reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    OR              reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    CORDER          reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    PARDER          reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)
    COMA            reduce using rule 76 (func_call -> ID PARIZQ args PARDER .)


state 179

    (77) args -> expresion arg .

    PARDER          reduce using rule 77 (args -> expresion arg .)


state 180

    (79) arg -> COMA . expresion arg
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 213
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 181

    (58) condicion -> IF PARIZQ expresion PARDER . bloque else_bloque
    (81) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 215

    bloque                         shift and go to state 214

state 182

    (61) escritura -> PRINT PARIZQ arg_escritura PARDER . PUNTCOM

    PUNTCOM         shift and go to state 216


state 183

    (62) arg_escritura -> expresion args_escritura .

    PARDER          reduce using rule 62 (arg_escritura -> expresion args_escritura .)


state 184

    (64) args_escritura -> COMA . arg_escritura
    (62) arg_escritura -> . expresion args_escritura
    (63) arg_escritura -> . CTE_STR args_escritura
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    CTE_STR         shift and go to state 135
    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    arg_escritura                  shift and go to state 217
    expresion                      shift and go to state 134
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 185

    (63) arg_escritura -> CTE_STR args_escritura .

    PARDER          reduce using rule 63 (arg_escritura -> CTE_STR args_escritura .)


state 186

    (66) ciclo -> REPEAT PARIZQ expresion PARDER . bloque
    (81) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 215

    bloque                         shift and go to state 218

state 187

    (86) instruccion -> FORWARD PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 219


state 188

    (87) instruccion -> BACKWARD PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 220


state 189

    (88) instruccion -> LEFT PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 221


state 190

    (89) instruccion -> RIGHT PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 222


state 191

    (90) instruccion -> TURN PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 223


state 192

    (91) instruccion -> SIZE PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 224


state 193

    (92) instruccion -> CIRCLE PARIZQ expresion PARDER . transform PUNTCOM
    (100) transform -> . PUNTO altera transform
    (101) transform -> .

    PUNTO           shift and go to state 226
    PUNTCOM         reduce using rule 101 (transform -> .)

    transform                      shift and go to state 225

state 194

    (93) instruccion -> TRIANGLE PARIZQ expresion PARDER . transform PUNTCOM
    (100) transform -> . PUNTO altera transform
    (101) transform -> .

    PUNTO           shift and go to state 226
    PUNTCOM         reduce using rule 101 (transform -> .)

    transform                      shift and go to state 227

state 195

    (94) instruccion -> SQUARE PARIZQ expresion PARDER . transform PUNTCOM
    (100) transform -> . PUNTO altera transform
    (101) transform -> .

    PUNTO           shift and go to state 226
    PUNTCOM         reduce using rule 101 (transform -> .)

    transform                      shift and go to state 228

state 196

    (95) instruccion -> NGON PARIZQ expresion COMA . expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 229
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 197

    (96) instruccion -> ARC PARIZQ expresion COMA . expresion PARDER transform PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 230
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 198

    (97) instruccion -> UP PARIZQ PARDER PUNTCOM .

    ID              reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    IF              reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    PRINT           reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    REPEAT          reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    FORWARD         reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    BACKWARD        reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    LEFT            reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    RIGHT           reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    TURN            reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    SIZE            reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    CIRCLE          reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    SQUARE          reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    NGON            reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    ARC             reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    UP              reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    DOWN            reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    COLOR           reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    RETURN          reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    BRADER          reduce using rule 97 (instruccion -> UP PARIZQ PARDER PUNTCOM .)


state 199

    (98) instruccion -> DOWN PARIZQ PARDER PUNTCOM .

    ID              reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    IF              reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    PRINT           reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    REPEAT          reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    FORWARD         reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    BACKWARD        reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    LEFT            reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    RIGHT           reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    TURN            reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    SIZE            reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    CIRCLE          reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    SQUARE          reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    NGON            reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    ARC             reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    UP              reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    DOWN            reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    COLOR           reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    RETURN          reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    BRADER          reduce using rule 98 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)


state 200

    (99) instruccion -> COLOR PARIZQ expresion COMA . expresion COMA expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 231
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 201

    (17) vars_lista -> COMA ID lista vars_lista .

    PUNTCOM         reduce using rule 17 (vars_lista -> COMA ID lista vars_lista .)


state 202

    (8) var_o_func -> PARIZQ pars PARDER bloque_func funcs .

    MAIN            reduce using rule 8 (var_o_func -> PARIZQ pars PARDER bloque_func funcs .)


state 203

    (21) funcs -> func . funcs
    (21) funcs -> . func funcs
    (22) funcs -> .
    (23) func -> . tipo ID PARIZQ pars PARDER bloque_func
    (24) func -> . VOID ID PARIZQ pars PARDER bloque_func
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    MAIN            reduce using rule 22 (funcs -> .)
    VOID            shift and go to state 205
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    func                           shift and go to state 203
    funcs                          shift and go to state 232
    tipo                           shift and go to state 204

state 204

    (23) func -> tipo . ID PARIZQ pars PARDER bloque_func

    ID              shift and go to state 233


state 205

    (24) func -> VOID . ID PARIZQ pars PARDER bloque_func

    ID              shift and go to state 234


state 206

    (84) par -> COMA tipo . ID par

    ID              shift and go to state 235


state 207

    (71) matriz -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 236


state 208

    (5) var_func -> VOID ID PARIZQ pars PARDER bloque_func funcs .

    MAIN            reduce using rule 5 (var_func -> VOID ID PARIZQ pars PARDER bloque_func funcs .)


state 209

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM . BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    BACKGROUND      shift and go to state 237


state 210

    (16) vars -> tipo ID lista vars_lista PUNTCOM . mas_vars
    (19) mas_vars -> . vars
    (20) mas_vars -> .
    (16) vars -> . tipo ID lista vars_lista PUNTCOM mas_vars
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    ID              reduce using rule 20 (mas_vars -> .)
    IF              reduce using rule 20 (mas_vars -> .)
    PRINT           reduce using rule 20 (mas_vars -> .)
    REPEAT          reduce using rule 20 (mas_vars -> .)
    FORWARD         reduce using rule 20 (mas_vars -> .)
    BACKWARD        reduce using rule 20 (mas_vars -> .)
    LEFT            reduce using rule 20 (mas_vars -> .)
    RIGHT           reduce using rule 20 (mas_vars -> .)
    TURN            reduce using rule 20 (mas_vars -> .)
    SIZE            reduce using rule 20 (mas_vars -> .)
    CIRCLE          reduce using rule 20 (mas_vars -> .)
    TRIANGLE        reduce using rule 20 (mas_vars -> .)
    SQUARE          reduce using rule 20 (mas_vars -> .)
    NGON            reduce using rule 20 (mas_vars -> .)
    ARC             reduce using rule 20 (mas_vars -> .)
    UP              reduce using rule 20 (mas_vars -> .)
    DOWN            reduce using rule 20 (mas_vars -> .)
    COLOR           reduce using rule 20 (mas_vars -> .)
    RETURN          reduce using rule 20 (mas_vars -> .)
    BRADER          reduce using rule 20 (mas_vars -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    tipo                           shift and go to state 30
    mas_vars                       shift and go to state 238
    vars                           shift and go to state 239

state 211

    (55) asignacion -> ID lista ASIG exp_input PUNTCOM .

    ID              reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    IF              reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    PRINT           reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    REPEAT          reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    FORWARD         reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    BACKWARD        reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    LEFT            reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    RIGHT           reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    TURN            reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    SIZE            reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    CIRCLE          reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    TRIANGLE        reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    SQUARE          reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    NGON            reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    ARC             reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    UP              reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    DOWN            reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    COLOR           reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    RETURN          reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)
    BRADER          reduce using rule 55 (asignacion -> ID lista ASIG exp_input PUNTCOM .)


state 212

    (57) exp_input -> INPUT PARIZQ . PARDER

    PARDER          shift and go to state 240


state 213

    (79) arg -> COMA expresion . arg
    (79) arg -> . COMA expresion arg
    (80) arg -> .

    COMA            shift and go to state 180
    PARDER          reduce using rule 80 (arg -> .)

    arg                            shift and go to state 241

state 214

    (58) condicion -> IF PARIZQ expresion PARDER bloque . else_bloque
    (59) else_bloque -> . ELSE bloque
    (60) else_bloque -> .

    ELSE            shift and go to state 243
    ID              reduce using rule 60 (else_bloque -> .)
    IF              reduce using rule 60 (else_bloque -> .)
    PRINT           reduce using rule 60 (else_bloque -> .)
    REPEAT          reduce using rule 60 (else_bloque -> .)
    FORWARD         reduce using rule 60 (else_bloque -> .)
    BACKWARD        reduce using rule 60 (else_bloque -> .)
    LEFT            reduce using rule 60 (else_bloque -> .)
    RIGHT           reduce using rule 60 (else_bloque -> .)
    TURN            reduce using rule 60 (else_bloque -> .)
    SIZE            reduce using rule 60 (else_bloque -> .)
    CIRCLE          reduce using rule 60 (else_bloque -> .)
    TRIANGLE        reduce using rule 60 (else_bloque -> .)
    SQUARE          reduce using rule 60 (else_bloque -> .)
    NGON            reduce using rule 60 (else_bloque -> .)
    ARC             reduce using rule 60 (else_bloque -> .)
    UP              reduce using rule 60 (else_bloque -> .)
    DOWN            reduce using rule 60 (else_bloque -> .)
    COLOR           reduce using rule 60 (else_bloque -> .)
    RETURN          reduce using rule 60 (else_bloque -> .)
    BRADER          reduce using rule 60 (else_bloque -> .)

    else_bloque                    shift and go to state 242

state 215

    (81) bloque -> BRAIZQ . estatutos BRADER
    (12) estatutos -> . estatuto estatutos
    (13) estatutos -> .
    (49) estatuto -> . asignacion
    (50) estatuto -> . condicion
    (51) estatuto -> . escritura
    (52) estatuto -> . ciclo
    (53) estatuto -> . instruccion
    (54) estatuto -> . func_call PUNTCOM
    (55) asignacion -> . ID lista ASIG exp_input PUNTCOM
    (58) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (61) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (66) ciclo -> . REPEAT PARIZQ expresion PARDER bloque
    (86) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (87) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (88) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (89) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (90) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (91) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (92) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (93) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (94) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (95) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (96) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (97) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (98) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (99) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (76) func_call -> . ID PARIZQ args PARDER

    BRADER          reduce using rule 13 (estatutos -> .)
    ID              shift and go to state 31
    IF              shift and go to state 39
    PRINT           shift and go to state 40
    REPEAT          shift and go to state 41
    FORWARD         shift and go to state 42
    BACKWARD        shift and go to state 43
    LEFT            shift and go to state 44
    RIGHT           shift and go to state 45
    TURN            shift and go to state 46
    SIZE            shift and go to state 47
    CIRCLE          shift and go to state 48
    TRIANGLE        shift and go to state 49
    SQUARE          shift and go to state 50
    NGON            shift and go to state 51
    ARC             shift and go to state 52
    UP              shift and go to state 53
    DOWN            shift and go to state 54
    COLOR           shift and go to state 55

    estatutos                      shift and go to state 244
    estatuto                       shift and go to state 32
    asignacion                     shift and go to state 33
    condicion                      shift and go to state 34
    escritura                      shift and go to state 35
    ciclo                          shift and go to state 36
    instruccion                    shift and go to state 37
    func_call                      shift and go to state 38

state 216

    (61) escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .

    ID              reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    IF              reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    PRINT           reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    REPEAT          reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    FORWARD         reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    BACKWARD        reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    LEFT            reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    RIGHT           reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    TURN            reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    SIZE            reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    CIRCLE          reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    SQUARE          reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    NGON            reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    ARC             reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    UP              reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    DOWN            reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    COLOR           reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    RETURN          reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    BRADER          reduce using rule 61 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)


state 217

    (64) args_escritura -> COMA arg_escritura .

    PARDER          reduce using rule 64 (args_escritura -> COMA arg_escritura .)


state 218

    (66) ciclo -> REPEAT PARIZQ expresion PARDER bloque .

    ID              reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    PRINT           reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    REPEAT          reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    FORWARD         reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    BACKWARD        reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    LEFT            reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    RIGHT           reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    TURN            reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    SIZE            reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    CIRCLE          reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    TRIANGLE        reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    SQUARE          reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    NGON            reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    ARC             reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    UP              reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    DOWN            reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    COLOR           reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)
    BRADER          reduce using rule 66 (ciclo -> REPEAT PARIZQ expresion PARDER bloque .)


state 219

    (86) instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 86 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)


state 220

    (87) instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 87 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)


state 221

    (88) instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 88 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)


state 222

    (89) instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 89 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)


state 223

    (90) instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 90 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)


state 224

    (91) instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 91 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)


state 225

    (92) instruccion -> CIRCLE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 245


state 226

    (100) transform -> PUNTO . altera transform
    (102) altera -> . ROTATE PARIZQ expresion PARDER
    (103) altera -> . STRETCH PARIZQ expresion PARDER
    (104) altera -> . FILL PARIZQ PARDER

    ROTATE          shift and go to state 247
    STRETCH         shift and go to state 248
    FILL            shift and go to state 249

    altera                         shift and go to state 246

state 227

    (93) instruccion -> TRIANGLE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 250


state 228

    (94) instruccion -> SQUARE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 251


state 229

    (95) instruccion -> NGON PARIZQ expresion COMA expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 252


state 230

    (96) instruccion -> ARC PARIZQ expresion COMA expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 253


state 231

    (99) instruccion -> COLOR PARIZQ expresion COMA expresion . COMA expresion PARDER PUNTCOM

    COMA            shift and go to state 254


state 232

    (21) funcs -> func funcs .

    MAIN            reduce using rule 21 (funcs -> func funcs .)


state 233

    (23) func -> tipo ID . PARIZQ pars PARDER bloque_func

    PARIZQ          shift and go to state 255


state 234

    (24) func -> VOID ID . PARIZQ pars PARDER bloque_func

    PARIZQ          shift and go to state 256


state 235

    (84) par -> COMA tipo ID . par
    (84) par -> . COMA tipo ID par
    (85) par -> .

    COMA            shift and go to state 155
    PARDER          reduce using rule 85 (par -> .)

    par                            shift and go to state 257

state 236

    (71) matriz -> CORIZQ expresion CORDER .

    COMA            reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    PUNTCOM         reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    ASIG            reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    SUMA            reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    RESTA           reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    MENOR           reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    MAYOR           reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    MENIGUAL        reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    MAYIGUAL        reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    IGUAL           reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    AND             reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    OR              reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 71 (matriz -> CORIZQ expresion CORDER .)


state 237

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND . CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 258


state 238

    (16) vars -> tipo ID lista vars_lista PUNTCOM mas_vars .

    ID              reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    IF              reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    PRINT           reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    REPEAT          reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    FORWARD         reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    BACKWARD        reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    LEFT            reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    RIGHT           reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    TURN            reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    SIZE            reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    CIRCLE          reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    TRIANGLE        reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    SQUARE          reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    NGON            reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    ARC             reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    UP              reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    DOWN            reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    COLOR           reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    RETURN          reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)
    BRADER          reduce using rule 16 (vars -> tipo ID lista vars_lista PUNTCOM mas_vars .)


state 239

    (19) mas_vars -> vars .

    ID              reduce using rule 19 (mas_vars -> vars .)
    IF              reduce using rule 19 (mas_vars -> vars .)
    PRINT           reduce using rule 19 (mas_vars -> vars .)
    REPEAT          reduce using rule 19 (mas_vars -> vars .)
    FORWARD         reduce using rule 19 (mas_vars -> vars .)
    BACKWARD        reduce using rule 19 (mas_vars -> vars .)
    LEFT            reduce using rule 19 (mas_vars -> vars .)
    RIGHT           reduce using rule 19 (mas_vars -> vars .)
    TURN            reduce using rule 19 (mas_vars -> vars .)
    SIZE            reduce using rule 19 (mas_vars -> vars .)
    CIRCLE          reduce using rule 19 (mas_vars -> vars .)
    TRIANGLE        reduce using rule 19 (mas_vars -> vars .)
    SQUARE          reduce using rule 19 (mas_vars -> vars .)
    NGON            reduce using rule 19 (mas_vars -> vars .)
    ARC             reduce using rule 19 (mas_vars -> vars .)
    UP              reduce using rule 19 (mas_vars -> vars .)
    DOWN            reduce using rule 19 (mas_vars -> vars .)
    COLOR           reduce using rule 19 (mas_vars -> vars .)
    RETURN          reduce using rule 19 (mas_vars -> vars .)
    BRADER          reduce using rule 19 (mas_vars -> vars .)


state 240

    (57) exp_input -> INPUT PARIZQ PARDER .

    PUNTCOM         reduce using rule 57 (exp_input -> INPUT PARIZQ PARDER .)


state 241

    (79) arg -> COMA expresion arg .

    PARDER          reduce using rule 79 (arg -> COMA expresion arg .)


state 242

    (58) condicion -> IF PARIZQ expresion PARDER bloque else_bloque .

    ID              reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    IF              reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    PRINT           reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    REPEAT          reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    FORWARD         reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    BACKWARD        reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    LEFT            reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    RIGHT           reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    TURN            reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    SIZE            reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    CIRCLE          reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    TRIANGLE        reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    SQUARE          reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    NGON            reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    ARC             reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    UP              reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    DOWN            reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    COLOR           reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    RETURN          reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    BRADER          reduce using rule 58 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)


state 243

    (59) else_bloque -> ELSE . bloque
    (81) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 215

    bloque                         shift and go to state 259

state 244

    (81) bloque -> BRAIZQ estatutos . BRADER

    BRADER          shift and go to state 260


state 245

    (92) instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 92 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)


state 246

    (100) transform -> PUNTO altera . transform
    (100) transform -> . PUNTO altera transform
    (101) transform -> .

    PUNTO           shift and go to state 226
    PUNTCOM         reduce using rule 101 (transform -> .)

    transform                      shift and go to state 261

state 247

    (102) altera -> ROTATE . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 262


state 248

    (103) altera -> STRETCH . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 263


state 249

    (104) altera -> FILL . PARIZQ PARDER

    PARIZQ          shift and go to state 264


state 250

    (93) instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 93 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)


state 251

    (94) instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 94 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)


state 252

    (95) instruccion -> NGON PARIZQ expresion COMA expresion PARDER . transform PUNTCOM
    (100) transform -> . PUNTO altera transform
    (101) transform -> .

    PUNTO           shift and go to state 226
    PUNTCOM         reduce using rule 101 (transform -> .)

    transform                      shift and go to state 265

state 253

    (96) instruccion -> ARC PARIZQ expresion COMA expresion PARDER . transform PUNTCOM
    (100) transform -> . PUNTO altera transform
    (101) transform -> .

    PUNTO           shift and go to state 226
    PUNTCOM         reduce using rule 101 (transform -> .)

    transform                      shift and go to state 266

state 254

    (99) instruccion -> COLOR PARIZQ expresion COMA expresion COMA . expresion PARDER PUNTCOM
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 267
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 255

    (23) func -> tipo ID PARIZQ . pars PARDER bloque_func
    (82) pars -> . tipo ID par
    (83) pars -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    PARDER          reduce using rule 83 (pars -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    tipo                           shift and go to state 59
    pars                           shift and go to state 268

state 256

    (24) func -> VOID ID PARIZQ . pars PARDER bloque_func
    (82) pars -> . tipo ID par
    (83) pars -> .
    (67) tipo -> . INT
    (68) tipo -> . FLOAT

    PARDER          reduce using rule 83 (pars -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    pars                           shift and go to state 269
    tipo                           shift and go to state 59

state 257

    (84) par -> COMA tipo ID par .

    PARDER          reduce using rule 84 (par -> COMA tipo ID par .)


state 258

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F . COMA CTE_F COMA CTE_F PUNTCOM BRADER

    COMA            shift and go to state 270


state 259

    (59) else_bloque -> ELSE bloque .

    ID              reduce using rule 59 (else_bloque -> ELSE bloque .)
    IF              reduce using rule 59 (else_bloque -> ELSE bloque .)
    PRINT           reduce using rule 59 (else_bloque -> ELSE bloque .)
    REPEAT          reduce using rule 59 (else_bloque -> ELSE bloque .)
    FORWARD         reduce using rule 59 (else_bloque -> ELSE bloque .)
    BACKWARD        reduce using rule 59 (else_bloque -> ELSE bloque .)
    LEFT            reduce using rule 59 (else_bloque -> ELSE bloque .)
    RIGHT           reduce using rule 59 (else_bloque -> ELSE bloque .)
    TURN            reduce using rule 59 (else_bloque -> ELSE bloque .)
    SIZE            reduce using rule 59 (else_bloque -> ELSE bloque .)
    CIRCLE          reduce using rule 59 (else_bloque -> ELSE bloque .)
    TRIANGLE        reduce using rule 59 (else_bloque -> ELSE bloque .)
    SQUARE          reduce using rule 59 (else_bloque -> ELSE bloque .)
    NGON            reduce using rule 59 (else_bloque -> ELSE bloque .)
    ARC             reduce using rule 59 (else_bloque -> ELSE bloque .)
    UP              reduce using rule 59 (else_bloque -> ELSE bloque .)
    DOWN            reduce using rule 59 (else_bloque -> ELSE bloque .)
    COLOR           reduce using rule 59 (else_bloque -> ELSE bloque .)
    RETURN          reduce using rule 59 (else_bloque -> ELSE bloque .)
    BRADER          reduce using rule 59 (else_bloque -> ELSE bloque .)


state 260

    (81) bloque -> BRAIZQ estatutos BRADER .

    ELSE            reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    ID              reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    IF              reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    PRINT           reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    REPEAT          reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    FORWARD         reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    BACKWARD        reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    LEFT            reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    RIGHT           reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    TURN            reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    SIZE            reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    CIRCLE          reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    TRIANGLE        reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    SQUARE          reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    NGON            reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    ARC             reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    UP              reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    DOWN            reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    COLOR           reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    RETURN          reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)
    BRADER          reduce using rule 81 (bloque -> BRAIZQ estatutos BRADER .)


state 261

    (100) transform -> PUNTO altera transform .

    PUNTCOM         reduce using rule 100 (transform -> PUNTO altera transform .)


state 262

    (102) altera -> ROTATE PARIZQ . expresion PARDER
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 271
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 263

    (103) altera -> STRETCH PARIZQ . expresion PARDER
    (25) expresion -> . exp mas_exp
    (35) exp -> . termino suma_resta
    (39) termino -> . factor mult_div
    (43) factor -> . PARIZQ expresion PARDER
    (44) factor -> . var_func_call
    (45) factor -> . SUMA var_func_call
    (46) factor -> . RESTA var_func_call
    (47) var_func_call -> . var
    (48) var_func_call -> . func_call
    (73) var -> . ID lista
    (74) var -> . CTE_I
    (75) var -> . CTE_F
    (76) func_call -> . ID PARIZQ args PARDER

    PARIZQ          shift and go to state 64
    SUMA            shift and go to state 66
    RESTA           shift and go to state 67
    ID              shift and go to state 70
    CTE_I           shift and go to state 71
    CTE_F           shift and go to state 72

    expresion                      shift and go to state 272
    exp                            shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 63
    var_func_call                  shift and go to state 65
    var                            shift and go to state 68
    func_call                      shift and go to state 69

state 264

    (104) altera -> FILL PARIZQ . PARDER

    PARDER          shift and go to state 273


state 265

    (95) instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 274


state 266

    (96) instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 275


state 267

    (99) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion . PARDER PUNTCOM

    PARDER          shift and go to state 276


state 268

    (23) func -> tipo ID PARIZQ pars . PARDER bloque_func

    PARDER          shift and go to state 277


state 269

    (24) func -> VOID ID PARIZQ pars . PARDER bloque_func

    PARDER          shift and go to state 278


state 270

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA . CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 279


state 271

    (102) altera -> ROTATE PARIZQ expresion . PARDER

    PARDER          shift and go to state 280


state 272

    (103) altera -> STRETCH PARIZQ expresion . PARDER

    PARDER          shift and go to state 281


state 273

    (104) altera -> FILL PARIZQ PARDER .

    PUNTO           reduce using rule 104 (altera -> FILL PARIZQ PARDER .)
    PUNTCOM         reduce using rule 104 (altera -> FILL PARIZQ PARDER .)


state 274

    (95) instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .

    ID              reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 95 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)


state 275

    (96) instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .

    ID              reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 96 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)


state 276

    (99) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 282


state 277

    (23) func -> tipo ID PARIZQ pars PARDER . bloque_func
    (9) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 20

    bloque_func                    shift and go to state 283

state 278

    (24) func -> VOID ID PARIZQ pars PARDER . bloque_func
    (9) bloque_func -> . BRAIZQ vars_estatutos returns BRADER

    BRAIZQ          shift and go to state 20

    bloque_func                    shift and go to state 284

state 279

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F . COMA CTE_F PUNTCOM BRADER

    COMA            shift and go to state 285


state 280

    (102) altera -> ROTATE PARIZQ expresion PARDER .

    PUNTO           reduce using rule 102 (altera -> ROTATE PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 102 (altera -> ROTATE PARIZQ expresion PARDER .)


state 281

    (103) altera -> STRETCH PARIZQ expresion PARDER .

    PUNTO           reduce using rule 103 (altera -> STRETCH PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 103 (altera -> STRETCH PARIZQ expresion PARDER .)


state 282

    (99) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .

    ID              reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    IF              reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    TURN            reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    NGON            reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    ARC             reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    UP              reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 99 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)


state 283

    (23) func -> tipo ID PARIZQ pars PARDER bloque_func .

    VOID            reduce using rule 23 (func -> tipo ID PARIZQ pars PARDER bloque_func .)
    INT             reduce using rule 23 (func -> tipo ID PARIZQ pars PARDER bloque_func .)
    FLOAT           reduce using rule 23 (func -> tipo ID PARIZQ pars PARDER bloque_func .)
    MAIN            reduce using rule 23 (func -> tipo ID PARIZQ pars PARDER bloque_func .)


state 284

    (24) func -> VOID ID PARIZQ pars PARDER bloque_func .

    VOID            reduce using rule 24 (func -> VOID ID PARIZQ pars PARDER bloque_func .)
    INT             reduce using rule 24 (func -> VOID ID PARIZQ pars PARDER bloque_func .)
    FLOAT           reduce using rule 24 (func -> VOID ID PARIZQ pars PARDER bloque_func .)
    MAIN            reduce using rule 24 (func -> VOID ID PARIZQ pars PARDER bloque_func .)


state 285

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA . CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 286


state 286

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F . PUNTCOM BRADER

    PUNTCOM         shift and go to state 287


state 287

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM . BRADER

    BRADER          shift and go to state 288


state 288

    (2) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .

    VOID            reduce using rule 2 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    INT             reduce using rule 2 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    FLOAT           reduce using rule 2 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    MAIN            reduce using rule 2 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)

