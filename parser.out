Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func
Rule 2     creaDirFunc -> <empty>
Rule 3     ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER
Rule 4     ajustes -> IMPORT CTE_STR
Rule 5     var_func -> tipo ID actualiza_id var_o_func
Rule 6     var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
Rule 7     var_func -> <empty>
Rule 8     actualiza_id -> <empty>
Rule 9     var_o_func -> PARIZQ crea_func pars PARDER bloque_func funcs
Rule 10    var_o_func -> crea_var lista vars_lista PUNTCOM var_func
Rule 11    crea_var -> <empty>
Rule 12    bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER
Rule 13    vars_estatutos -> vars estatutos
Rule 14    vars_estatutos -> estatutos
Rule 15    estatutos -> estatuto estatutos
Rule 16    estatutos -> <empty>
Rule 17    returns -> expresion PUNTCOM
Rule 18    returns -> PUNTCOM
Rule 19    vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
Rule 20    vars_lista -> COMA ID actualiza_id crea_var lista vars_lista
Rule 21    vars_lista -> <empty>
Rule 22    mas_vars -> vars
Rule 23    mas_vars -> <empty>
Rule 24    funcs -> func funcs
Rule 25    funcs -> <empty>
Rule 26    func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
Rule 27    func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
Rule 28    tipo_void -> <empty>
Rule 29    tipo_main -> <empty>
Rule 30    crea_func -> <empty>
Rule 31    push_oper -> <empty>
Rule 32    pop_or -> <empty>
Rule 33    pop_and -> <empty>
Rule 34    pop_rel_e -> <empty>
Rule 35    pop_suma_resta -> <empty>
Rule 36    pop_mult_div -> <empty>
Rule 37    expresion -> expr pop_or or_expr
Rule 38    or_expr -> OR push_oper expresion
Rule 39    or_expr -> <empty>
Rule 40    expr -> exp pop_and and_exp
Rule 41    and_exp -> AND push_oper expr
Rule 42    and_exp -> <empty>
Rule 43    exp -> e pop_rel_e rel_e
Rule 44    rel_e -> DIF push_oper exp
Rule 45    rel_e -> MENOR push_oper exp
Rule 46    rel_e -> MAYOR push_oper exp
Rule 47    rel_e -> MENIGUAL push_oper exp
Rule 48    rel_e -> MAYIGUAL push_oper exp
Rule 49    rel_e -> IGUAL push_oper exp
Rule 50    rel_e -> <empty>
Rule 51    e -> termino pop_suma_resta suma_resta
Rule 52    suma_resta -> SUMA push_oper e
Rule 53    suma_resta -> RESTA push_oper e
Rule 54    suma_resta -> <empty>
Rule 55    termino -> factor pop_mult_div mult_div
Rule 56    mult_div -> MULT push_oper termino
Rule 57    mult_div -> DIV push_oper termino
Rule 58    mult_div -> <empty>
Rule 59    factor -> PARIZQ push_paren e PARDER pop_paren
Rule 60    factor -> var
Rule 61    factor -> SUMA var
Rule 62    factor -> RESTA var
Rule 63    push_paren -> <empty>
Rule 64    pop_paren -> <empty>
Rule 65    estatuto -> asignacion
Rule 66    estatuto -> condicion
Rule 67    estatuto -> escritura
Rule 68    estatuto -> ciclo
Rule 69    estatuto -> instruccion
Rule 70    estatuto -> func_call PUNTCOM
Rule 71    func_call -> ID PARIZQ args PARDER
Rule 72    asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM
Rule 73    asignacion -> error
Rule 74    exp_input -> expresion
Rule 75    exp_input -> INPUT PARIZQ PARDER
Rule 76    condicion -> IF PARIZQ expresion PARDER bloque else_bloque
Rule 77    else_bloque -> ELSE bloque
Rule 78    else_bloque -> <empty>
Rule 79    escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM
Rule 80    arg_escritura -> expresion args_escritura
Rule 81    arg_escritura -> CTE_STR args_escritura
Rule 82    args_escritura -> COMA arg_escritura
Rule 83    args_escritura -> <empty>
Rule 84    ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat
Rule 85    push_cont -> <empty>
Rule 86    fin_exp_repeat -> <empty>
Rule 87    fin_repeat -> <empty>
Rule 88    tipo -> INT actualiza_tipo
Rule 89    tipo -> FLOAT actualiza_tipo
Rule 90    actualiza_tipo -> <empty>
Rule 91    lista -> CORIZQ expresion CORDER matriz
Rule 92    lista -> <empty>
Rule 93    matriz -> CORIZQ expresion CORDER
Rule 94    matriz -> <empty>
Rule 95    var -> ID actualiza_id var_func_call
Rule 96    var -> CTE_I
Rule 97    var -> CTE_F
Rule 98    var_func_call -> PARIZQ args PARDER
Rule 99    var_func_call -> lista
Rule 100   args -> expresion arg
Rule 101   args -> <empty>
Rule 102   arg -> COMA expresion arg
Rule 103   arg -> <empty>
Rule 104   bloque -> BRAIZQ estatutos BRADER
Rule 105   pars -> tipo ID actualiza_id crea_var lista par
Rule 106   pars -> <empty>
Rule 107   par -> COMA tipo ID actualiza_id crea_var lista par
Rule 108   par -> <empty>
Rule 109   instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM
Rule 110   instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM
Rule 111   instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM
Rule 112   instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM
Rule 113   instruccion -> TURN PARIZQ expresion PARDER PUNTCOM
Rule 114   instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM
Rule 115   instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM
Rule 116   instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
Rule 117   instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM
Rule 118   instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
Rule 119   instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
Rule 120   instruccion -> UP PARIZQ PARDER PUNTCOM
Rule 121   instruccion -> DOWN PARIZQ PARDER PUNTCOM
Rule 122   instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
Rule 123   transform -> PUNTO altera transform
Rule 124   transform -> <empty>
Rule 125   altera -> ROTATE PARIZQ expresion PARDER
Rule 126   altera -> STRETCH PARIZQ expresion PARDER
Rule 127   altera -> FILL PARIZQ PARDER

Terminals, with rules where they appear

AND                  : 41
ARC                  : 119
ASIG                 : 72
BACKGROUND           : 3
BACKWARD             : 110
BRADER               : 3 12 104
BRAIZQ               : 3 12 104
CANVAS               : 3
CIRCLE               : 115
COLOR                : 122
COMA                 : 3 3 20 82 102 107 118 119 122 122
CORDER               : 91 93
CORIZQ               : 91 93
CTE_F                : 3 3 3 97
CTE_I                : 3 3 96
CTE_STR              : 4 81
DIF                  : 44
DIV                  : 57
DOWN                 : 121
ELSE                 : 77
FILL                 : 127
FLOAT                : 89
FORWARD              : 109
HEIGHT               : 3
ID                   : 1 5 6 19 20 26 27 71 72 95 105 107
IF                   : 76
IGUAL                : 49
IMPORT               : 4
INPUT                : 75
INT                  : 88
LEFT                 : 111
MAIN                 : 1
MAYIGUAL             : 48
MAYOR                : 46
MENIGUAL             : 47
MENOR                : 45
MODULE               : 1
MULT                 : 56
NGON                 : 118
OR                   : 38
PARDER               : 6 9 26 27 59 71 75 76 79 84 98 109 110 111 112 113 114 115 116 117 118 119 120 121 122 125 126 127
PARIZQ               : 6 9 26 27 59 71 75 76 79 84 98 109 110 111 112 113 114 115 116 117 118 119 120 121 122 125 126 127
PRINT                : 79
PUNTCOM              : 1 3 3 3 10 17 18 19 70 72 79 109 110 111 112 113 114 115 116 117 118 119 120 121 122
PUNTO                : 123
REPEAT               : 84
RESTA                : 53 62
RETURN               : 12
RIGHT                : 112
ROTATE               : 125
SIZE                 : 114
SQUARE               : 117
STRETCH              : 126
SUMA                 : 52 61
TRIANGLE             : 116
TURN                 : 113
UP                   : 120
VOID                 : 6 27
WIDTH                : 3
error                : 73

Nonterminals, with rules where they appear

actualiza_id         : 1 5 6 19 20 26 27 72 95 105 107
actualiza_tipo       : 88 89
ajustes              : 1
altera               : 123
and_exp              : 40
arg                  : 100 102
arg_escritura        : 79 82
args                 : 71 98
args_escritura       : 80 81
asignacion           : 65
bloque               : 76 77 84
bloque_func          : 1 6 9 26 27
ciclo                : 68
condicion            : 66
creaDirFunc          : 1
crea_func            : 1 6 9 26 27
crea_var             : 10 19 20 105 107
e                    : 43 52 53 59
else_bloque          : 76
escritura            : 67
estatuto             : 15
estatutos            : 13 14 15 104
exp                  : 40 44 45 46 47 48 49
exp_input            : 72
expr                 : 37 41
expresion            : 17 38 74 76 80 84 91 93 100 102 109 110 111 112 113 114 115 116 117 118 118 119 119 122 122 122 125 126
factor               : 55
fin_exp_repeat       : 84
fin_repeat           : 84
func                 : 24
func_call            : 70
funcs                : 6 9 24
instruccion          : 69
lista                : 10 19 20 72 99 105 107
mas_vars             : 19
matriz               : 91
mult_div             : 55
or_expr              : 37
par                  : 105 107
pars                 : 6 9 26 27
pop_and              : 40
pop_mult_div         : 55
pop_or               : 37
pop_paren            : 59
pop_rel_e            : 43
pop_suma_resta       : 51
programa             : 0
push_cont            : 84
push_oper            : 38 41 44 45 46 47 48 49 52 53 56 57
push_paren           : 59
rel_e                : 43
returns              : 12
suma_resta           : 51
termino              : 51 56 57
tipo                 : 5 19 26 105 107
tipo_main            : 1
tipo_void            : 6 27
transform            : 115 116 117 118 119 123
var                  : 60 61 62
var_func             : 1 10
var_func_call        : 95
var_o_func           : 5
vars                 : 13 22
vars_estatutos       : 12
vars_lista           : 10 19 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func

    MODULE          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> MODULE . ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func

    ID              shift and go to state 3


state 3

    (1) programa -> MODULE ID . creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func
    (2) creaDirFunc -> .

    PUNTCOM         reduce using rule 2 (creaDirFunc -> .)

    creaDirFunc                    shift and go to state 4

state 4

    (1) programa -> MODULE ID creaDirFunc . PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func

    PUNTCOM         shift and go to state 5


state 5

    (1) programa -> MODULE ID creaDirFunc PUNTCOM . ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func
    (3) ajustes -> . CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER
    (4) ajustes -> . IMPORT CTE_STR

    CANVAS          shift and go to state 7
    IMPORT          shift and go to state 8

    ajustes                        shift and go to state 6

state 6

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes . var_func tipo_main MAIN actualiza_id crea_func bloque_func
    (5) var_func -> . tipo ID actualiza_id var_o_func
    (6) var_func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (7) var_func -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    VOID            shift and go to state 11
    MAIN            reduce using rule 7 (var_func -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    var_func                       shift and go to state 9
    tipo                           shift and go to state 10

state 7

    (3) ajustes -> CANVAS . BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    BRAIZQ          shift and go to state 14


state 8

    (4) ajustes -> IMPORT . CTE_STR

    CTE_STR         shift and go to state 15


state 9

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func . tipo_main MAIN actualiza_id crea_func bloque_func
    (29) tipo_main -> .

    MAIN            reduce using rule 29 (tipo_main -> .)

    tipo_main                      shift and go to state 16

state 10

    (5) var_func -> tipo . ID actualiza_id var_o_func

    ID              shift and go to state 17


state 11

    (6) var_func -> VOID . tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (28) tipo_void -> .

    ID              reduce using rule 28 (tipo_void -> .)

    tipo_void                      shift and go to state 18

state 12

    (88) tipo -> INT . actualiza_tipo
    (90) actualiza_tipo -> .

    ID              reduce using rule 90 (actualiza_tipo -> .)

    actualiza_tipo                 shift and go to state 19

state 13

    (89) tipo -> FLOAT . actualiza_tipo
    (90) actualiza_tipo -> .

    ID              reduce using rule 90 (actualiza_tipo -> .)

    actualiza_tipo                 shift and go to state 20

state 14

    (3) ajustes -> CANVAS BRAIZQ . WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    WIDTH           shift and go to state 21


state 15

    (4) ajustes -> IMPORT CTE_STR .

    VOID            reduce using rule 4 (ajustes -> IMPORT CTE_STR .)
    INT             reduce using rule 4 (ajustes -> IMPORT CTE_STR .)
    FLOAT           reduce using rule 4 (ajustes -> IMPORT CTE_STR .)
    MAIN            reduce using rule 4 (ajustes -> IMPORT CTE_STR .)


state 16

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main . MAIN actualiza_id crea_func bloque_func

    MAIN            shift and go to state 22


state 17

    (5) var_func -> tipo ID . actualiza_id var_o_func
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)
    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 23

state 18

    (6) var_func -> VOID tipo_void . ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs

    ID              shift and go to state 24


state 19

    (88) tipo -> INT actualiza_tipo .

    ID              reduce using rule 88 (tipo -> INT actualiza_tipo .)


state 20

    (89) tipo -> FLOAT actualiza_tipo .

    ID              reduce using rule 89 (tipo -> FLOAT actualiza_tipo .)


state 21

    (3) ajustes -> CANVAS BRAIZQ WIDTH . CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_I           shift and go to state 25


state 22

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN . actualiza_id crea_func bloque_func
    (8) actualiza_id -> .

    BRAIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 26

state 23

    (5) var_func -> tipo ID actualiza_id . var_o_func
    (9) var_o_func -> . PARIZQ crea_func pars PARDER bloque_func funcs
    (10) var_o_func -> . crea_var lista vars_lista PUNTCOM var_func
    (11) crea_var -> .

    PARIZQ          shift and go to state 28
    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PUNTCOM         reduce using rule 11 (crea_var -> .)

    var_o_func                     shift and go to state 27
    crea_var                       shift and go to state 29

state 24

    (6) var_func -> VOID tipo_void ID . actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 30

state 25

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I . PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    PUNTCOM         shift and go to state 31


state 26

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id . crea_func bloque_func
    (30) crea_func -> .

    BRAIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 32

state 27

    (5) var_func -> tipo ID actualiza_id var_o_func .

    MAIN            reduce using rule 5 (var_func -> tipo ID actualiza_id var_o_func .)


state 28

    (9) var_o_func -> PARIZQ . crea_func pars PARDER bloque_func funcs
    (30) crea_func -> .

    INT             reduce using rule 30 (crea_func -> .)
    FLOAT           reduce using rule 30 (crea_func -> .)
    PARDER          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 33

state 29

    (10) var_o_func -> crea_var . lista vars_lista PUNTCOM var_func
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 92 (lista -> .)
    PUNTCOM         reduce using rule 92 (lista -> .)

    lista                          shift and go to state 34

state 30

    (6) var_func -> VOID tipo_void ID actualiza_id . crea_func PARIZQ pars PARDER bloque_func funcs
    (30) crea_func -> .

    PARIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 36

state 31

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM . HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    HEIGHT          shift and go to state 37


state 32

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func . bloque_func
    (12) bloque_func -> . BRAIZQ vars_estatutos RETURN returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 38

state 33

    (9) var_o_func -> PARIZQ crea_func . pars PARDER bloque_func funcs
    (105) pars -> . tipo ID actualiza_id crea_var lista par
    (106) pars -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 106 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    pars                           shift and go to state 40
    tipo                           shift and go to state 41

state 34

    (10) var_o_func -> crea_var lista . vars_lista PUNTCOM var_func
    (20) vars_lista -> . COMA ID actualiza_id crea_var lista vars_lista
    (21) vars_lista -> .

    COMA            shift and go to state 43
    PUNTCOM         reduce using rule 21 (vars_lista -> .)

    vars_lista                     shift and go to state 42

state 35

    (91) lista -> CORIZQ . expresion CORDER matriz
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 44
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 36

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func . PARIZQ pars PARDER bloque_func funcs

    PARIZQ          shift and go to state 57


state 37

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT . CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_I           shift and go to state 58


state 38

    (1) programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func .

    $end            reduce using rule 1 (programa -> MODULE ID creaDirFunc PUNTCOM ajustes var_func tipo_main MAIN actualiza_id crea_func bloque_func .)


state 39

    (12) bloque_func -> BRAIZQ . vars_estatutos RETURN returns BRADER
    (13) vars_estatutos -> . vars estatutos
    (14) vars_estatutos -> . estatutos
    (19) vars -> . tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo
    (65) estatuto -> . asignacion
    (66) estatuto -> . condicion
    (67) estatuto -> . escritura
    (68) estatuto -> . ciclo
    (69) estatuto -> . instruccion
    (70) estatuto -> . func_call PUNTCOM
    (72) asignacion -> . ID actualiza_id lista ASIG exp_input PUNTCOM
    (73) asignacion -> . error
    (76) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (79) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (84) ciclo -> . REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat
    (109) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (110) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (111) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (112) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (113) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (114) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (115) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (116) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (117) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (118) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (119) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (120) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (121) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (122) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (71) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 16 (estatutos -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 63
    error           shift and go to state 71
    IF              shift and go to state 72
    PRINT           shift and go to state 73
    REPEAT          shift and go to state 74
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 76
    LEFT            shift and go to state 77
    RIGHT           shift and go to state 78
    TURN            shift and go to state 79
    SIZE            shift and go to state 80
    CIRCLE          shift and go to state 81
    TRIANGLE        shift and go to state 82
    SQUARE          shift and go to state 83
    NGON            shift and go to state 84
    ARC             shift and go to state 85
    UP              shift and go to state 86
    DOWN            shift and go to state 87
    COLOR           shift and go to state 88

    vars_estatutos                 shift and go to state 59
    vars                           shift and go to state 60
    estatutos                      shift and go to state 61
    tipo                           shift and go to state 62
    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 40

    (9) var_o_func -> PARIZQ crea_func pars . PARDER bloque_func funcs

    PARDER          shift and go to state 89


state 41

    (105) pars -> tipo . ID actualiza_id crea_var lista par

    ID              shift and go to state 90


state 42

    (10) var_o_func -> crea_var lista vars_lista . PUNTCOM var_func

    PUNTCOM         shift and go to state 91


state 43

    (20) vars_lista -> COMA . ID actualiza_id crea_var lista vars_lista

    ID              shift and go to state 92


state 44

    (91) lista -> CORIZQ expresion . CORDER matriz

    CORDER          shift and go to state 93


state 45

    (37) expresion -> expr . pop_or or_expr
    (32) pop_or -> .

    OR              reduce using rule 32 (pop_or -> .)
    CORDER          reduce using rule 32 (pop_or -> .)
    PUNTCOM         reduce using rule 32 (pop_or -> .)
    COMA            reduce using rule 32 (pop_or -> .)
    PARDER          reduce using rule 32 (pop_or -> .)

    pop_or                         shift and go to state 94

state 46

    (40) expr -> exp . pop_and and_exp
    (33) pop_and -> .

    AND             reduce using rule 33 (pop_and -> .)
    OR              reduce using rule 33 (pop_and -> .)
    CORDER          reduce using rule 33 (pop_and -> .)
    PUNTCOM         reduce using rule 33 (pop_and -> .)
    COMA            reduce using rule 33 (pop_and -> .)
    PARDER          reduce using rule 33 (pop_and -> .)

    pop_and                        shift and go to state 95

state 47

    (43) exp -> e . pop_rel_e rel_e
    (34) pop_rel_e -> .

    DIF             reduce using rule 34 (pop_rel_e -> .)
    MENOR           reduce using rule 34 (pop_rel_e -> .)
    MAYOR           reduce using rule 34 (pop_rel_e -> .)
    MENIGUAL        reduce using rule 34 (pop_rel_e -> .)
    MAYIGUAL        reduce using rule 34 (pop_rel_e -> .)
    IGUAL           reduce using rule 34 (pop_rel_e -> .)
    AND             reduce using rule 34 (pop_rel_e -> .)
    OR              reduce using rule 34 (pop_rel_e -> .)
    CORDER          reduce using rule 34 (pop_rel_e -> .)
    PUNTCOM         reduce using rule 34 (pop_rel_e -> .)
    COMA            reduce using rule 34 (pop_rel_e -> .)
    PARDER          reduce using rule 34 (pop_rel_e -> .)

    pop_rel_e                      shift and go to state 96

state 48

    (51) e -> termino . pop_suma_resta suma_resta
    (35) pop_suma_resta -> .

    SUMA            reduce using rule 35 (pop_suma_resta -> .)
    RESTA           reduce using rule 35 (pop_suma_resta -> .)
    DIF             reduce using rule 35 (pop_suma_resta -> .)
    MENOR           reduce using rule 35 (pop_suma_resta -> .)
    MAYOR           reduce using rule 35 (pop_suma_resta -> .)
    MENIGUAL        reduce using rule 35 (pop_suma_resta -> .)
    MAYIGUAL        reduce using rule 35 (pop_suma_resta -> .)
    IGUAL           reduce using rule 35 (pop_suma_resta -> .)
    AND             reduce using rule 35 (pop_suma_resta -> .)
    OR              reduce using rule 35 (pop_suma_resta -> .)
    CORDER          reduce using rule 35 (pop_suma_resta -> .)
    PARDER          reduce using rule 35 (pop_suma_resta -> .)
    PUNTCOM         reduce using rule 35 (pop_suma_resta -> .)
    COMA            reduce using rule 35 (pop_suma_resta -> .)

    pop_suma_resta                 shift and go to state 97

state 49

    (55) termino -> factor . pop_mult_div mult_div
    (36) pop_mult_div -> .

    MULT            reduce using rule 36 (pop_mult_div -> .)
    DIV             reduce using rule 36 (pop_mult_div -> .)
    SUMA            reduce using rule 36 (pop_mult_div -> .)
    RESTA           reduce using rule 36 (pop_mult_div -> .)
    DIF             reduce using rule 36 (pop_mult_div -> .)
    MENOR           reduce using rule 36 (pop_mult_div -> .)
    MAYOR           reduce using rule 36 (pop_mult_div -> .)
    MENIGUAL        reduce using rule 36 (pop_mult_div -> .)
    MAYIGUAL        reduce using rule 36 (pop_mult_div -> .)
    IGUAL           reduce using rule 36 (pop_mult_div -> .)
    AND             reduce using rule 36 (pop_mult_div -> .)
    OR              reduce using rule 36 (pop_mult_div -> .)
    CORDER          reduce using rule 36 (pop_mult_div -> .)
    PARDER          reduce using rule 36 (pop_mult_div -> .)
    PUNTCOM         reduce using rule 36 (pop_mult_div -> .)
    COMA            reduce using rule 36 (pop_mult_div -> .)

    pop_mult_div                   shift and go to state 98

state 50

    (59) factor -> PARIZQ . push_paren e PARDER pop_paren
    (63) push_paren -> .

    PARIZQ          reduce using rule 63 (push_paren -> .)
    SUMA            reduce using rule 63 (push_paren -> .)
    RESTA           reduce using rule 63 (push_paren -> .)
    ID              reduce using rule 63 (push_paren -> .)
    CTE_I           reduce using rule 63 (push_paren -> .)
    CTE_F           reduce using rule 63 (push_paren -> .)

    push_paren                     shift and go to state 99

state 51

    (60) factor -> var .

    MULT            reduce using rule 60 (factor -> var .)
    DIV             reduce using rule 60 (factor -> var .)
    SUMA            reduce using rule 60 (factor -> var .)
    RESTA           reduce using rule 60 (factor -> var .)
    DIF             reduce using rule 60 (factor -> var .)
    MENOR           reduce using rule 60 (factor -> var .)
    MAYOR           reduce using rule 60 (factor -> var .)
    MENIGUAL        reduce using rule 60 (factor -> var .)
    MAYIGUAL        reduce using rule 60 (factor -> var .)
    IGUAL           reduce using rule 60 (factor -> var .)
    AND             reduce using rule 60 (factor -> var .)
    OR              reduce using rule 60 (factor -> var .)
    CORDER          reduce using rule 60 (factor -> var .)
    PARDER          reduce using rule 60 (factor -> var .)
    PUNTCOM         reduce using rule 60 (factor -> var .)
    COMA            reduce using rule 60 (factor -> var .)


state 52

    (61) factor -> SUMA . var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    var                            shift and go to state 100

state 53

    (62) factor -> RESTA . var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    var                            shift and go to state 101

state 54

    (95) var -> ID . actualiza_id var_func_call
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)
    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    MULT            reduce using rule 8 (actualiza_id -> .)
    DIV             reduce using rule 8 (actualiza_id -> .)
    SUMA            reduce using rule 8 (actualiza_id -> .)
    RESTA           reduce using rule 8 (actualiza_id -> .)
    DIF             reduce using rule 8 (actualiza_id -> .)
    MENOR           reduce using rule 8 (actualiza_id -> .)
    MAYOR           reduce using rule 8 (actualiza_id -> .)
    MENIGUAL        reduce using rule 8 (actualiza_id -> .)
    MAYIGUAL        reduce using rule 8 (actualiza_id -> .)
    IGUAL           reduce using rule 8 (actualiza_id -> .)
    AND             reduce using rule 8 (actualiza_id -> .)
    OR              reduce using rule 8 (actualiza_id -> .)
    CORDER          reduce using rule 8 (actualiza_id -> .)
    PARDER          reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 102

state 55

    (96) var -> CTE_I .

    MULT            reduce using rule 96 (var -> CTE_I .)
    DIV             reduce using rule 96 (var -> CTE_I .)
    SUMA            reduce using rule 96 (var -> CTE_I .)
    RESTA           reduce using rule 96 (var -> CTE_I .)
    DIF             reduce using rule 96 (var -> CTE_I .)
    MENOR           reduce using rule 96 (var -> CTE_I .)
    MAYOR           reduce using rule 96 (var -> CTE_I .)
    MENIGUAL        reduce using rule 96 (var -> CTE_I .)
    MAYIGUAL        reduce using rule 96 (var -> CTE_I .)
    IGUAL           reduce using rule 96 (var -> CTE_I .)
    AND             reduce using rule 96 (var -> CTE_I .)
    OR              reduce using rule 96 (var -> CTE_I .)
    CORDER          reduce using rule 96 (var -> CTE_I .)
    PARDER          reduce using rule 96 (var -> CTE_I .)
    PUNTCOM         reduce using rule 96 (var -> CTE_I .)
    COMA            reduce using rule 96 (var -> CTE_I .)


state 56

    (97) var -> CTE_F .

    MULT            reduce using rule 97 (var -> CTE_F .)
    DIV             reduce using rule 97 (var -> CTE_F .)
    SUMA            reduce using rule 97 (var -> CTE_F .)
    RESTA           reduce using rule 97 (var -> CTE_F .)
    DIF             reduce using rule 97 (var -> CTE_F .)
    MENOR           reduce using rule 97 (var -> CTE_F .)
    MAYOR           reduce using rule 97 (var -> CTE_F .)
    MENIGUAL        reduce using rule 97 (var -> CTE_F .)
    MAYIGUAL        reduce using rule 97 (var -> CTE_F .)
    IGUAL           reduce using rule 97 (var -> CTE_F .)
    AND             reduce using rule 97 (var -> CTE_F .)
    OR              reduce using rule 97 (var -> CTE_F .)
    CORDER          reduce using rule 97 (var -> CTE_F .)
    PARDER          reduce using rule 97 (var -> CTE_F .)
    PUNTCOM         reduce using rule 97 (var -> CTE_F .)
    COMA            reduce using rule 97 (var -> CTE_F .)


state 57

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ . pars PARDER bloque_func funcs
    (105) pars -> . tipo ID actualiza_id crea_var lista par
    (106) pars -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 106 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    pars                           shift and go to state 103
    tipo                           shift and go to state 41

state 58

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I . PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    PUNTCOM         shift and go to state 104


state 59

    (12) bloque_func -> BRAIZQ vars_estatutos . RETURN returns BRADER

    RETURN          shift and go to state 105


state 60

    (13) vars_estatutos -> vars . estatutos
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (65) estatuto -> . asignacion
    (66) estatuto -> . condicion
    (67) estatuto -> . escritura
    (68) estatuto -> . ciclo
    (69) estatuto -> . instruccion
    (70) estatuto -> . func_call PUNTCOM
    (72) asignacion -> . ID actualiza_id lista ASIG exp_input PUNTCOM
    (73) asignacion -> . error
    (76) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (79) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (84) ciclo -> . REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat
    (109) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (110) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (111) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (112) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (113) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (114) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (115) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (116) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (117) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (118) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (119) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (120) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (121) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (122) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (71) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 16 (estatutos -> .)
    ID              shift and go to state 63
    error           shift and go to state 71
    IF              shift and go to state 72
    PRINT           shift and go to state 73
    REPEAT          shift and go to state 74
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 76
    LEFT            shift and go to state 77
    RIGHT           shift and go to state 78
    TURN            shift and go to state 79
    SIZE            shift and go to state 80
    CIRCLE          shift and go to state 81
    TRIANGLE        shift and go to state 82
    SQUARE          shift and go to state 83
    NGON            shift and go to state 84
    ARC             shift and go to state 85
    UP              shift and go to state 86
    DOWN            shift and go to state 87
    COLOR           shift and go to state 88

    estatutos                      shift and go to state 106
    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 61

    (14) vars_estatutos -> estatutos .

    RETURN          reduce using rule 14 (vars_estatutos -> estatutos .)


state 62

    (19) vars -> tipo . ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars

    ID              shift and go to state 107


state 63

    (72) asignacion -> ID . actualiza_id lista ASIG exp_input PUNTCOM
    (71) func_call -> ID . PARIZQ args PARDER
    (8) actualiza_id -> .

    PARIZQ          shift and go to state 109
    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    ASIG            reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 108

state 64

    (15) estatutos -> estatuto . estatutos
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (65) estatuto -> . asignacion
    (66) estatuto -> . condicion
    (67) estatuto -> . escritura
    (68) estatuto -> . ciclo
    (69) estatuto -> . instruccion
    (70) estatuto -> . func_call PUNTCOM
    (72) asignacion -> . ID actualiza_id lista ASIG exp_input PUNTCOM
    (73) asignacion -> . error
    (76) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (79) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (84) ciclo -> . REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat
    (109) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (110) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (111) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (112) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (113) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (114) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (115) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (116) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (117) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (118) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (119) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (120) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (121) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (122) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (71) func_call -> . ID PARIZQ args PARDER

    RETURN          reduce using rule 16 (estatutos -> .)
    BRADER          reduce using rule 16 (estatutos -> .)
    ID              shift and go to state 63
    error           shift and go to state 71
    IF              shift and go to state 72
    PRINT           shift and go to state 73
    REPEAT          shift and go to state 74
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 76
    LEFT            shift and go to state 77
    RIGHT           shift and go to state 78
    TURN            shift and go to state 79
    SIZE            shift and go to state 80
    CIRCLE          shift and go to state 81
    TRIANGLE        shift and go to state 82
    SQUARE          shift and go to state 83
    NGON            shift and go to state 84
    ARC             shift and go to state 85
    UP              shift and go to state 86
    DOWN            shift and go to state 87
    COLOR           shift and go to state 88

    estatuto                       shift and go to state 64
    estatutos                      shift and go to state 110
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 65

    (65) estatuto -> asignacion .

    ID              reduce using rule 65 (estatuto -> asignacion .)
    error           reduce using rule 65 (estatuto -> asignacion .)
    IF              reduce using rule 65 (estatuto -> asignacion .)
    PRINT           reduce using rule 65 (estatuto -> asignacion .)
    REPEAT          reduce using rule 65 (estatuto -> asignacion .)
    FORWARD         reduce using rule 65 (estatuto -> asignacion .)
    BACKWARD        reduce using rule 65 (estatuto -> asignacion .)
    LEFT            reduce using rule 65 (estatuto -> asignacion .)
    RIGHT           reduce using rule 65 (estatuto -> asignacion .)
    TURN            reduce using rule 65 (estatuto -> asignacion .)
    SIZE            reduce using rule 65 (estatuto -> asignacion .)
    CIRCLE          reduce using rule 65 (estatuto -> asignacion .)
    TRIANGLE        reduce using rule 65 (estatuto -> asignacion .)
    SQUARE          reduce using rule 65 (estatuto -> asignacion .)
    NGON            reduce using rule 65 (estatuto -> asignacion .)
    ARC             reduce using rule 65 (estatuto -> asignacion .)
    UP              reduce using rule 65 (estatuto -> asignacion .)
    DOWN            reduce using rule 65 (estatuto -> asignacion .)
    COLOR           reduce using rule 65 (estatuto -> asignacion .)
    RETURN          reduce using rule 65 (estatuto -> asignacion .)
    BRADER          reduce using rule 65 (estatuto -> asignacion .)


state 66

    (66) estatuto -> condicion .

    ID              reduce using rule 66 (estatuto -> condicion .)
    error           reduce using rule 66 (estatuto -> condicion .)
    IF              reduce using rule 66 (estatuto -> condicion .)
    PRINT           reduce using rule 66 (estatuto -> condicion .)
    REPEAT          reduce using rule 66 (estatuto -> condicion .)
    FORWARD         reduce using rule 66 (estatuto -> condicion .)
    BACKWARD        reduce using rule 66 (estatuto -> condicion .)
    LEFT            reduce using rule 66 (estatuto -> condicion .)
    RIGHT           reduce using rule 66 (estatuto -> condicion .)
    TURN            reduce using rule 66 (estatuto -> condicion .)
    SIZE            reduce using rule 66 (estatuto -> condicion .)
    CIRCLE          reduce using rule 66 (estatuto -> condicion .)
    TRIANGLE        reduce using rule 66 (estatuto -> condicion .)
    SQUARE          reduce using rule 66 (estatuto -> condicion .)
    NGON            reduce using rule 66 (estatuto -> condicion .)
    ARC             reduce using rule 66 (estatuto -> condicion .)
    UP              reduce using rule 66 (estatuto -> condicion .)
    DOWN            reduce using rule 66 (estatuto -> condicion .)
    COLOR           reduce using rule 66 (estatuto -> condicion .)
    RETURN          reduce using rule 66 (estatuto -> condicion .)
    BRADER          reduce using rule 66 (estatuto -> condicion .)


state 67

    (67) estatuto -> escritura .

    ID              reduce using rule 67 (estatuto -> escritura .)
    error           reduce using rule 67 (estatuto -> escritura .)
    IF              reduce using rule 67 (estatuto -> escritura .)
    PRINT           reduce using rule 67 (estatuto -> escritura .)
    REPEAT          reduce using rule 67 (estatuto -> escritura .)
    FORWARD         reduce using rule 67 (estatuto -> escritura .)
    BACKWARD        reduce using rule 67 (estatuto -> escritura .)
    LEFT            reduce using rule 67 (estatuto -> escritura .)
    RIGHT           reduce using rule 67 (estatuto -> escritura .)
    TURN            reduce using rule 67 (estatuto -> escritura .)
    SIZE            reduce using rule 67 (estatuto -> escritura .)
    CIRCLE          reduce using rule 67 (estatuto -> escritura .)
    TRIANGLE        reduce using rule 67 (estatuto -> escritura .)
    SQUARE          reduce using rule 67 (estatuto -> escritura .)
    NGON            reduce using rule 67 (estatuto -> escritura .)
    ARC             reduce using rule 67 (estatuto -> escritura .)
    UP              reduce using rule 67 (estatuto -> escritura .)
    DOWN            reduce using rule 67 (estatuto -> escritura .)
    COLOR           reduce using rule 67 (estatuto -> escritura .)
    RETURN          reduce using rule 67 (estatuto -> escritura .)
    BRADER          reduce using rule 67 (estatuto -> escritura .)


state 68

    (68) estatuto -> ciclo .

    ID              reduce using rule 68 (estatuto -> ciclo .)
    error           reduce using rule 68 (estatuto -> ciclo .)
    IF              reduce using rule 68 (estatuto -> ciclo .)
    PRINT           reduce using rule 68 (estatuto -> ciclo .)
    REPEAT          reduce using rule 68 (estatuto -> ciclo .)
    FORWARD         reduce using rule 68 (estatuto -> ciclo .)
    BACKWARD        reduce using rule 68 (estatuto -> ciclo .)
    LEFT            reduce using rule 68 (estatuto -> ciclo .)
    RIGHT           reduce using rule 68 (estatuto -> ciclo .)
    TURN            reduce using rule 68 (estatuto -> ciclo .)
    SIZE            reduce using rule 68 (estatuto -> ciclo .)
    CIRCLE          reduce using rule 68 (estatuto -> ciclo .)
    TRIANGLE        reduce using rule 68 (estatuto -> ciclo .)
    SQUARE          reduce using rule 68 (estatuto -> ciclo .)
    NGON            reduce using rule 68 (estatuto -> ciclo .)
    ARC             reduce using rule 68 (estatuto -> ciclo .)
    UP              reduce using rule 68 (estatuto -> ciclo .)
    DOWN            reduce using rule 68 (estatuto -> ciclo .)
    COLOR           reduce using rule 68 (estatuto -> ciclo .)
    RETURN          reduce using rule 68 (estatuto -> ciclo .)
    BRADER          reduce using rule 68 (estatuto -> ciclo .)


state 69

    (69) estatuto -> instruccion .

    ID              reduce using rule 69 (estatuto -> instruccion .)
    error           reduce using rule 69 (estatuto -> instruccion .)
    IF              reduce using rule 69 (estatuto -> instruccion .)
    PRINT           reduce using rule 69 (estatuto -> instruccion .)
    REPEAT          reduce using rule 69 (estatuto -> instruccion .)
    FORWARD         reduce using rule 69 (estatuto -> instruccion .)
    BACKWARD        reduce using rule 69 (estatuto -> instruccion .)
    LEFT            reduce using rule 69 (estatuto -> instruccion .)
    RIGHT           reduce using rule 69 (estatuto -> instruccion .)
    TURN            reduce using rule 69 (estatuto -> instruccion .)
    SIZE            reduce using rule 69 (estatuto -> instruccion .)
    CIRCLE          reduce using rule 69 (estatuto -> instruccion .)
    TRIANGLE        reduce using rule 69 (estatuto -> instruccion .)
    SQUARE          reduce using rule 69 (estatuto -> instruccion .)
    NGON            reduce using rule 69 (estatuto -> instruccion .)
    ARC             reduce using rule 69 (estatuto -> instruccion .)
    UP              reduce using rule 69 (estatuto -> instruccion .)
    DOWN            reduce using rule 69 (estatuto -> instruccion .)
    COLOR           reduce using rule 69 (estatuto -> instruccion .)
    RETURN          reduce using rule 69 (estatuto -> instruccion .)
    BRADER          reduce using rule 69 (estatuto -> instruccion .)


state 70

    (70) estatuto -> func_call . PUNTCOM

    PUNTCOM         shift and go to state 111


state 71

    (73) asignacion -> error .

    ID              reduce using rule 73 (asignacion -> error .)
    error           reduce using rule 73 (asignacion -> error .)
    IF              reduce using rule 73 (asignacion -> error .)
    PRINT           reduce using rule 73 (asignacion -> error .)
    REPEAT          reduce using rule 73 (asignacion -> error .)
    FORWARD         reduce using rule 73 (asignacion -> error .)
    BACKWARD        reduce using rule 73 (asignacion -> error .)
    LEFT            reduce using rule 73 (asignacion -> error .)
    RIGHT           reduce using rule 73 (asignacion -> error .)
    TURN            reduce using rule 73 (asignacion -> error .)
    SIZE            reduce using rule 73 (asignacion -> error .)
    CIRCLE          reduce using rule 73 (asignacion -> error .)
    TRIANGLE        reduce using rule 73 (asignacion -> error .)
    SQUARE          reduce using rule 73 (asignacion -> error .)
    NGON            reduce using rule 73 (asignacion -> error .)
    ARC             reduce using rule 73 (asignacion -> error .)
    UP              reduce using rule 73 (asignacion -> error .)
    DOWN            reduce using rule 73 (asignacion -> error .)
    COLOR           reduce using rule 73 (asignacion -> error .)
    RETURN          reduce using rule 73 (asignacion -> error .)
    BRADER          reduce using rule 73 (asignacion -> error .)


state 72

    (76) condicion -> IF . PARIZQ expresion PARDER bloque else_bloque

    PARIZQ          shift and go to state 112


state 73

    (79) escritura -> PRINT . PARIZQ arg_escritura PARDER PUNTCOM

    PARIZQ          shift and go to state 113


state 74

    (84) ciclo -> REPEAT . push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat
    (85) push_cont -> .

    PARIZQ          reduce using rule 85 (push_cont -> .)

    push_cont                      shift and go to state 114

state 75

    (109) instruccion -> FORWARD . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 115


state 76

    (110) instruccion -> BACKWARD . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 116


state 77

    (111) instruccion -> LEFT . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 117


state 78

    (112) instruccion -> RIGHT . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 118


state 79

    (113) instruccion -> TURN . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 119


state 80

    (114) instruccion -> SIZE . PARIZQ expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 120


state 81

    (115) instruccion -> CIRCLE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 121


state 82

    (116) instruccion -> TRIANGLE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 122


state 83

    (117) instruccion -> SQUARE . PARIZQ expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 123


state 84

    (118) instruccion -> NGON . PARIZQ expresion COMA expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 124


state 85

    (119) instruccion -> ARC . PARIZQ expresion COMA expresion PARDER transform PUNTCOM

    PARIZQ          shift and go to state 125


state 86

    (120) instruccion -> UP . PARIZQ PARDER PUNTCOM

    PARIZQ          shift and go to state 126


state 87

    (121) instruccion -> DOWN . PARIZQ PARDER PUNTCOM

    PARIZQ          shift and go to state 127


state 88

    (122) instruccion -> COLOR . PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM

    PARIZQ          shift and go to state 128


state 89

    (9) var_o_func -> PARIZQ crea_func pars PARDER . bloque_func funcs
    (12) bloque_func -> . BRAIZQ vars_estatutos RETURN returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 129

state 90

    (105) pars -> tipo ID . actualiza_id crea_var lista par
    (8) actualiza_id -> .

    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PARDER          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 130

state 91

    (10) var_o_func -> crea_var lista vars_lista PUNTCOM . var_func
    (5) var_func -> . tipo ID actualiza_id var_o_func
    (6) var_func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs
    (7) var_func -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    VOID            shift and go to state 11
    MAIN            reduce using rule 7 (var_func -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    var_func                       shift and go to state 131
    tipo                           shift and go to state 10

state 92

    (20) vars_lista -> COMA ID . actualiza_id crea_var lista vars_lista
    (8) actualiza_id -> .

    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 132

state 93

    (91) lista -> CORIZQ expresion CORDER . matriz
    (93) matriz -> . CORIZQ expresion CORDER
    (94) matriz -> .

    CORIZQ          shift and go to state 133
    COMA            reduce using rule 94 (matriz -> .)
    PUNTCOM         reduce using rule 94 (matriz -> .)
    MULT            reduce using rule 94 (matriz -> .)
    DIV             reduce using rule 94 (matriz -> .)
    SUMA            reduce using rule 94 (matriz -> .)
    RESTA           reduce using rule 94 (matriz -> .)
    DIF             reduce using rule 94 (matriz -> .)
    MENOR           reduce using rule 94 (matriz -> .)
    MAYOR           reduce using rule 94 (matriz -> .)
    MENIGUAL        reduce using rule 94 (matriz -> .)
    MAYIGUAL        reduce using rule 94 (matriz -> .)
    IGUAL           reduce using rule 94 (matriz -> .)
    AND             reduce using rule 94 (matriz -> .)
    OR              reduce using rule 94 (matriz -> .)
    CORDER          reduce using rule 94 (matriz -> .)
    PARDER          reduce using rule 94 (matriz -> .)
    ASIG            reduce using rule 94 (matriz -> .)

    matriz                         shift and go to state 134

state 94

    (37) expresion -> expr pop_or . or_expr
    (38) or_expr -> . OR push_oper expresion
    (39) or_expr -> .

    OR              shift and go to state 136
    CORDER          reduce using rule 39 (or_expr -> .)
    PUNTCOM         reduce using rule 39 (or_expr -> .)
    COMA            reduce using rule 39 (or_expr -> .)
    PARDER          reduce using rule 39 (or_expr -> .)

    or_expr                        shift and go to state 135

state 95

    (40) expr -> exp pop_and . and_exp
    (41) and_exp -> . AND push_oper expr
    (42) and_exp -> .

    AND             shift and go to state 138
    OR              reduce using rule 42 (and_exp -> .)
    CORDER          reduce using rule 42 (and_exp -> .)
    PUNTCOM         reduce using rule 42 (and_exp -> .)
    COMA            reduce using rule 42 (and_exp -> .)
    PARDER          reduce using rule 42 (and_exp -> .)

    and_exp                        shift and go to state 137

state 96

    (43) exp -> e pop_rel_e . rel_e
    (44) rel_e -> . DIF push_oper exp
    (45) rel_e -> . MENOR push_oper exp
    (46) rel_e -> . MAYOR push_oper exp
    (47) rel_e -> . MENIGUAL push_oper exp
    (48) rel_e -> . MAYIGUAL push_oper exp
    (49) rel_e -> . IGUAL push_oper exp
    (50) rel_e -> .

    DIF             shift and go to state 140
    MENOR           shift and go to state 141
    MAYOR           shift and go to state 142
    MENIGUAL        shift and go to state 143
    MAYIGUAL        shift and go to state 144
    IGUAL           shift and go to state 145
    AND             reduce using rule 50 (rel_e -> .)
    OR              reduce using rule 50 (rel_e -> .)
    CORDER          reduce using rule 50 (rel_e -> .)
    PUNTCOM         reduce using rule 50 (rel_e -> .)
    COMA            reduce using rule 50 (rel_e -> .)
    PARDER          reduce using rule 50 (rel_e -> .)

    rel_e                          shift and go to state 139

state 97

    (51) e -> termino pop_suma_resta . suma_resta
    (52) suma_resta -> . SUMA push_oper e
    (53) suma_resta -> . RESTA push_oper e
    (54) suma_resta -> .

    SUMA            shift and go to state 147
    RESTA           shift and go to state 148
    DIF             reduce using rule 54 (suma_resta -> .)
    MENOR           reduce using rule 54 (suma_resta -> .)
    MAYOR           reduce using rule 54 (suma_resta -> .)
    MENIGUAL        reduce using rule 54 (suma_resta -> .)
    MAYIGUAL        reduce using rule 54 (suma_resta -> .)
    IGUAL           reduce using rule 54 (suma_resta -> .)
    AND             reduce using rule 54 (suma_resta -> .)
    OR              reduce using rule 54 (suma_resta -> .)
    CORDER          reduce using rule 54 (suma_resta -> .)
    PARDER          reduce using rule 54 (suma_resta -> .)
    PUNTCOM         reduce using rule 54 (suma_resta -> .)
    COMA            reduce using rule 54 (suma_resta -> .)

    suma_resta                     shift and go to state 146

state 98

    (55) termino -> factor pop_mult_div . mult_div
    (56) mult_div -> . MULT push_oper termino
    (57) mult_div -> . DIV push_oper termino
    (58) mult_div -> .

    MULT            shift and go to state 150
    DIV             shift and go to state 151
    SUMA            reduce using rule 58 (mult_div -> .)
    RESTA           reduce using rule 58 (mult_div -> .)
    DIF             reduce using rule 58 (mult_div -> .)
    MENOR           reduce using rule 58 (mult_div -> .)
    MAYOR           reduce using rule 58 (mult_div -> .)
    MENIGUAL        reduce using rule 58 (mult_div -> .)
    MAYIGUAL        reduce using rule 58 (mult_div -> .)
    IGUAL           reduce using rule 58 (mult_div -> .)
    AND             reduce using rule 58 (mult_div -> .)
    OR              reduce using rule 58 (mult_div -> .)
    CORDER          reduce using rule 58 (mult_div -> .)
    PARDER          reduce using rule 58 (mult_div -> .)
    PUNTCOM         reduce using rule 58 (mult_div -> .)
    COMA            reduce using rule 58 (mult_div -> .)

    mult_div                       shift and go to state 149

state 99

    (59) factor -> PARIZQ push_paren . e PARDER pop_paren
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    e                              shift and go to state 152
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 100

    (61) factor -> SUMA var .

    MULT            reduce using rule 61 (factor -> SUMA var .)
    DIV             reduce using rule 61 (factor -> SUMA var .)
    SUMA            reduce using rule 61 (factor -> SUMA var .)
    RESTA           reduce using rule 61 (factor -> SUMA var .)
    DIF             reduce using rule 61 (factor -> SUMA var .)
    MENOR           reduce using rule 61 (factor -> SUMA var .)
    MAYOR           reduce using rule 61 (factor -> SUMA var .)
    MENIGUAL        reduce using rule 61 (factor -> SUMA var .)
    MAYIGUAL        reduce using rule 61 (factor -> SUMA var .)
    IGUAL           reduce using rule 61 (factor -> SUMA var .)
    AND             reduce using rule 61 (factor -> SUMA var .)
    OR              reduce using rule 61 (factor -> SUMA var .)
    CORDER          reduce using rule 61 (factor -> SUMA var .)
    PARDER          reduce using rule 61 (factor -> SUMA var .)
    PUNTCOM         reduce using rule 61 (factor -> SUMA var .)
    COMA            reduce using rule 61 (factor -> SUMA var .)


state 101

    (62) factor -> RESTA var .

    MULT            reduce using rule 62 (factor -> RESTA var .)
    DIV             reduce using rule 62 (factor -> RESTA var .)
    SUMA            reduce using rule 62 (factor -> RESTA var .)
    RESTA           reduce using rule 62 (factor -> RESTA var .)
    DIF             reduce using rule 62 (factor -> RESTA var .)
    MENOR           reduce using rule 62 (factor -> RESTA var .)
    MAYOR           reduce using rule 62 (factor -> RESTA var .)
    MENIGUAL        reduce using rule 62 (factor -> RESTA var .)
    MAYIGUAL        reduce using rule 62 (factor -> RESTA var .)
    IGUAL           reduce using rule 62 (factor -> RESTA var .)
    AND             reduce using rule 62 (factor -> RESTA var .)
    OR              reduce using rule 62 (factor -> RESTA var .)
    CORDER          reduce using rule 62 (factor -> RESTA var .)
    PARDER          reduce using rule 62 (factor -> RESTA var .)
    PUNTCOM         reduce using rule 62 (factor -> RESTA var .)
    COMA            reduce using rule 62 (factor -> RESTA var .)


state 102

    (95) var -> ID actualiza_id . var_func_call
    (98) var_func_call -> . PARIZQ args PARDER
    (99) var_func_call -> . lista
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    PARIZQ          shift and go to state 154
    CORIZQ          shift and go to state 35
    MULT            reduce using rule 92 (lista -> .)
    DIV             reduce using rule 92 (lista -> .)
    SUMA            reduce using rule 92 (lista -> .)
    RESTA           reduce using rule 92 (lista -> .)
    DIF             reduce using rule 92 (lista -> .)
    MENOR           reduce using rule 92 (lista -> .)
    MAYOR           reduce using rule 92 (lista -> .)
    MENIGUAL        reduce using rule 92 (lista -> .)
    MAYIGUAL        reduce using rule 92 (lista -> .)
    IGUAL           reduce using rule 92 (lista -> .)
    AND             reduce using rule 92 (lista -> .)
    OR              reduce using rule 92 (lista -> .)
    CORDER          reduce using rule 92 (lista -> .)
    PARDER          reduce using rule 92 (lista -> .)
    PUNTCOM         reduce using rule 92 (lista -> .)
    COMA            reduce using rule 92 (lista -> .)

    var_func_call                  shift and go to state 153
    lista                          shift and go to state 155

state 103

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars . PARDER bloque_func funcs

    PARDER          shift and go to state 156


state 104

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM . BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    BACKGROUND      shift and go to state 157


state 105

    (12) bloque_func -> BRAIZQ vars_estatutos RETURN . returns BRADER
    (17) returns -> . expresion PUNTCOM
    (18) returns -> . PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PUNTCOM         shift and go to state 160
    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    returns                        shift and go to state 158
    expresion                      shift and go to state 159
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 106

    (13) vars_estatutos -> vars estatutos .

    RETURN          reduce using rule 13 (vars_estatutos -> vars estatutos .)


state 107

    (19) vars -> tipo ID . actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
    (8) actualiza_id -> .

    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PUNTCOM         reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 161

state 108

    (72) asignacion -> ID actualiza_id . lista ASIG exp_input PUNTCOM
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    CORIZQ          shift and go to state 35
    ASIG            reduce using rule 92 (lista -> .)

    lista                          shift and go to state 162

state 109

    (71) func_call -> ID PARIZQ . args PARDER
    (100) args -> . expresion arg
    (101) args -> .
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARDER          reduce using rule 101 (args -> .)
    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    args                           shift and go to state 163
    expresion                      shift and go to state 164
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 110

    (15) estatutos -> estatuto estatutos .

    RETURN          reduce using rule 15 (estatutos -> estatuto estatutos .)
    BRADER          reduce using rule 15 (estatutos -> estatuto estatutos .)


state 111

    (70) estatuto -> func_call PUNTCOM .

    ID              reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    error           reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    IF              reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    PRINT           reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    REPEAT          reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    FORWARD         reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    BACKWARD        reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    LEFT            reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    RIGHT           reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    TURN            reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    SIZE            reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    CIRCLE          reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    TRIANGLE        reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    SQUARE          reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    NGON            reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    ARC             reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    UP              reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    DOWN            reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    COLOR           reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    RETURN          reduce using rule 70 (estatuto -> func_call PUNTCOM .)
    BRADER          reduce using rule 70 (estatuto -> func_call PUNTCOM .)


state 112

    (76) condicion -> IF PARIZQ . expresion PARDER bloque else_bloque
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 165
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 113

    (79) escritura -> PRINT PARIZQ . arg_escritura PARDER PUNTCOM
    (80) arg_escritura -> . expresion args_escritura
    (81) arg_escritura -> . CTE_STR args_escritura
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    CTE_STR         shift and go to state 168
    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    arg_escritura                  shift and go to state 166
    expresion                      shift and go to state 167
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 114

    (84) ciclo -> REPEAT push_cont . PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat

    PARIZQ          shift and go to state 169


state 115

    (109) instruccion -> FORWARD PARIZQ . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 170
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 116

    (110) instruccion -> BACKWARD PARIZQ . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 171
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 117

    (111) instruccion -> LEFT PARIZQ . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 172
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 118

    (112) instruccion -> RIGHT PARIZQ . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 173
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 119

    (113) instruccion -> TURN PARIZQ . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 174
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 120

    (114) instruccion -> SIZE PARIZQ . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 175
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 121

    (115) instruccion -> CIRCLE PARIZQ . expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 176
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 122

    (116) instruccion -> TRIANGLE PARIZQ . expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 177
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 123

    (117) instruccion -> SQUARE PARIZQ . expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 178
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 124

    (118) instruccion -> NGON PARIZQ . expresion COMA expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 179
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 125

    (119) instruccion -> ARC PARIZQ . expresion COMA expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 180
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 126

    (120) instruccion -> UP PARIZQ . PARDER PUNTCOM

    PARDER          shift and go to state 181


state 127

    (121) instruccion -> DOWN PARIZQ . PARDER PUNTCOM

    PARDER          shift and go to state 182


state 128

    (122) instruccion -> COLOR PARIZQ . expresion COMA expresion COMA expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 183
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 129

    (9) var_o_func -> PARIZQ crea_func pars PARDER bloque_func . funcs
    (24) funcs -> . func funcs
    (25) funcs -> .
    (26) func -> . tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (27) func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    MAIN            reduce using rule 25 (funcs -> .)
    VOID            shift and go to state 187
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    funcs                          shift and go to state 184
    func                           shift and go to state 185
    tipo                           shift and go to state 186

state 130

    (105) pars -> tipo ID actualiza_id . crea_var lista par
    (11) crea_var -> .

    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PARDER          reduce using rule 11 (crea_var -> .)

    crea_var                       shift and go to state 188

state 131

    (10) var_o_func -> crea_var lista vars_lista PUNTCOM var_func .

    MAIN            reduce using rule 10 (var_o_func -> crea_var lista vars_lista PUNTCOM var_func .)


state 132

    (20) vars_lista -> COMA ID actualiza_id . crea_var lista vars_lista
    (11) crea_var -> .

    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PUNTCOM         reduce using rule 11 (crea_var -> .)

    crea_var                       shift and go to state 189

state 133

    (93) matriz -> CORIZQ . expresion CORDER
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 190
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 134

    (91) lista -> CORIZQ expresion CORDER matriz .

    COMA            reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    PUNTCOM         reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    MULT            reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    DIV             reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    SUMA            reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    RESTA           reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    DIF             reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    MENOR           reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    MAYOR           reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    MENIGUAL        reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    MAYIGUAL        reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    IGUAL           reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    AND             reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    OR              reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    CORDER          reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    PARDER          reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)
    ASIG            reduce using rule 91 (lista -> CORIZQ expresion CORDER matriz .)


state 135

    (37) expresion -> expr pop_or or_expr .

    CORDER          reduce using rule 37 (expresion -> expr pop_or or_expr .)
    PUNTCOM         reduce using rule 37 (expresion -> expr pop_or or_expr .)
    COMA            reduce using rule 37 (expresion -> expr pop_or or_expr .)
    PARDER          reduce using rule 37 (expresion -> expr pop_or or_expr .)


state 136

    (38) or_expr -> OR . push_oper expresion
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 191

state 137

    (40) expr -> exp pop_and and_exp .

    OR              reduce using rule 40 (expr -> exp pop_and and_exp .)
    CORDER          reduce using rule 40 (expr -> exp pop_and and_exp .)
    PUNTCOM         reduce using rule 40 (expr -> exp pop_and and_exp .)
    COMA            reduce using rule 40 (expr -> exp pop_and and_exp .)
    PARDER          reduce using rule 40 (expr -> exp pop_and and_exp .)


state 138

    (41) and_exp -> AND . push_oper expr
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 192

state 139

    (43) exp -> e pop_rel_e rel_e .

    AND             reduce using rule 43 (exp -> e pop_rel_e rel_e .)
    OR              reduce using rule 43 (exp -> e pop_rel_e rel_e .)
    CORDER          reduce using rule 43 (exp -> e pop_rel_e rel_e .)
    PUNTCOM         reduce using rule 43 (exp -> e pop_rel_e rel_e .)
    COMA            reduce using rule 43 (exp -> e pop_rel_e rel_e .)
    PARDER          reduce using rule 43 (exp -> e pop_rel_e rel_e .)


state 140

    (44) rel_e -> DIF . push_oper exp
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 193

state 141

    (45) rel_e -> MENOR . push_oper exp
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 194

state 142

    (46) rel_e -> MAYOR . push_oper exp
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 195

state 143

    (47) rel_e -> MENIGUAL . push_oper exp
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 196

state 144

    (48) rel_e -> MAYIGUAL . push_oper exp
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 197

state 145

    (49) rel_e -> IGUAL . push_oper exp
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 198

state 146

    (51) e -> termino pop_suma_resta suma_resta .

    DIF             reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    MENOR           reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    MAYOR           reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    MENIGUAL        reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    MAYIGUAL        reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    IGUAL           reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    AND             reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    OR              reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    CORDER          reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    PARDER          reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    PUNTCOM         reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)
    COMA            reduce using rule 51 (e -> termino pop_suma_resta suma_resta .)


state 147

    (52) suma_resta -> SUMA . push_oper e
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 199

state 148

    (53) suma_resta -> RESTA . push_oper e
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 200

state 149

    (55) termino -> factor pop_mult_div mult_div .

    SUMA            reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    RESTA           reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    DIF             reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    MENOR           reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    MAYOR           reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    MENIGUAL        reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    MAYIGUAL        reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    IGUAL           reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    AND             reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    OR              reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    CORDER          reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    PARDER          reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    PUNTCOM         reduce using rule 55 (termino -> factor pop_mult_div mult_div .)
    COMA            reduce using rule 55 (termino -> factor pop_mult_div mult_div .)


state 150

    (56) mult_div -> MULT . push_oper termino
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 201

state 151

    (57) mult_div -> DIV . push_oper termino
    (31) push_oper -> .

    PARIZQ          reduce using rule 31 (push_oper -> .)
    SUMA            reduce using rule 31 (push_oper -> .)
    RESTA           reduce using rule 31 (push_oper -> .)
    ID              reduce using rule 31 (push_oper -> .)
    CTE_I           reduce using rule 31 (push_oper -> .)
    CTE_F           reduce using rule 31 (push_oper -> .)

    push_oper                      shift and go to state 202

state 152

    (59) factor -> PARIZQ push_paren e . PARDER pop_paren

    PARDER          shift and go to state 203


state 153

    (95) var -> ID actualiza_id var_func_call .

    MULT            reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    DIV             reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    SUMA            reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    RESTA           reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    DIF             reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    MENOR           reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    MAYOR           reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    MENIGUAL        reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    MAYIGUAL        reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    IGUAL           reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    AND             reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    OR              reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    CORDER          reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    PARDER          reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    PUNTCOM         reduce using rule 95 (var -> ID actualiza_id var_func_call .)
    COMA            reduce using rule 95 (var -> ID actualiza_id var_func_call .)


state 154

    (98) var_func_call -> PARIZQ . args PARDER
    (100) args -> . expresion arg
    (101) args -> .
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARDER          reduce using rule 101 (args -> .)
    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    args                           shift and go to state 204
    expresion                      shift and go to state 164
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 155

    (99) var_func_call -> lista .

    MULT            reduce using rule 99 (var_func_call -> lista .)
    DIV             reduce using rule 99 (var_func_call -> lista .)
    SUMA            reduce using rule 99 (var_func_call -> lista .)
    RESTA           reduce using rule 99 (var_func_call -> lista .)
    DIF             reduce using rule 99 (var_func_call -> lista .)
    MENOR           reduce using rule 99 (var_func_call -> lista .)
    MAYOR           reduce using rule 99 (var_func_call -> lista .)
    MENIGUAL        reduce using rule 99 (var_func_call -> lista .)
    MAYIGUAL        reduce using rule 99 (var_func_call -> lista .)
    IGUAL           reduce using rule 99 (var_func_call -> lista .)
    AND             reduce using rule 99 (var_func_call -> lista .)
    OR              reduce using rule 99 (var_func_call -> lista .)
    CORDER          reduce using rule 99 (var_func_call -> lista .)
    PARDER          reduce using rule 99 (var_func_call -> lista .)
    PUNTCOM         reduce using rule 99 (var_func_call -> lista .)
    COMA            reduce using rule 99 (var_func_call -> lista .)


state 156

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER . bloque_func funcs
    (12) bloque_func -> . BRAIZQ vars_estatutos RETURN returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 205

state 157

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND . CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 206


state 158

    (12) bloque_func -> BRAIZQ vars_estatutos RETURN returns . BRADER

    BRADER          shift and go to state 207


state 159

    (17) returns -> expresion . PUNTCOM

    PUNTCOM         shift and go to state 208


state 160

    (18) returns -> PUNTCOM .

    BRADER          reduce using rule 18 (returns -> PUNTCOM .)


state 161

    (19) vars -> tipo ID actualiza_id . crea_var lista vars_lista PUNTCOM mas_vars
    (11) crea_var -> .

    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PUNTCOM         reduce using rule 11 (crea_var -> .)

    crea_var                       shift and go to state 209

state 162

    (72) asignacion -> ID actualiza_id lista . ASIG exp_input PUNTCOM

    ASIG            shift and go to state 210


state 163

    (71) func_call -> ID PARIZQ args . PARDER

    PARDER          shift and go to state 211


state 164

    (100) args -> expresion . arg
    (102) arg -> . COMA expresion arg
    (103) arg -> .

    COMA            shift and go to state 213
    PARDER          reduce using rule 103 (arg -> .)

    arg                            shift and go to state 212

state 165

    (76) condicion -> IF PARIZQ expresion . PARDER bloque else_bloque

    PARDER          shift and go to state 214


state 166

    (79) escritura -> PRINT PARIZQ arg_escritura . PARDER PUNTCOM

    PARDER          shift and go to state 215


state 167

    (80) arg_escritura -> expresion . args_escritura
    (82) args_escritura -> . COMA arg_escritura
    (83) args_escritura -> .

    COMA            shift and go to state 217
    PARDER          reduce using rule 83 (args_escritura -> .)

    args_escritura                 shift and go to state 216

state 168

    (81) arg_escritura -> CTE_STR . args_escritura
    (82) args_escritura -> . COMA arg_escritura
    (83) args_escritura -> .

    COMA            shift and go to state 217
    PARDER          reduce using rule 83 (args_escritura -> .)

    args_escritura                 shift and go to state 218

state 169

    (84) ciclo -> REPEAT push_cont PARIZQ . expresion fin_exp_repeat PARDER bloque fin_repeat
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 219
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 170

    (109) instruccion -> FORWARD PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 220


state 171

    (110) instruccion -> BACKWARD PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 221


state 172

    (111) instruccion -> LEFT PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 222


state 173

    (112) instruccion -> RIGHT PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 223


state 174

    (113) instruccion -> TURN PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 224


state 175

    (114) instruccion -> SIZE PARIZQ expresion . PARDER PUNTCOM

    PARDER          shift and go to state 225


state 176

    (115) instruccion -> CIRCLE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 226


state 177

    (116) instruccion -> TRIANGLE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 227


state 178

    (117) instruccion -> SQUARE PARIZQ expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 228


state 179

    (118) instruccion -> NGON PARIZQ expresion . COMA expresion PARDER transform PUNTCOM

    COMA            shift and go to state 229


state 180

    (119) instruccion -> ARC PARIZQ expresion . COMA expresion PARDER transform PUNTCOM

    COMA            shift and go to state 230


state 181

    (120) instruccion -> UP PARIZQ PARDER . PUNTCOM

    PUNTCOM         shift and go to state 231


state 182

    (121) instruccion -> DOWN PARIZQ PARDER . PUNTCOM

    PUNTCOM         shift and go to state 232


state 183

    (122) instruccion -> COLOR PARIZQ expresion . COMA expresion COMA expresion PARDER PUNTCOM

    COMA            shift and go to state 233


state 184

    (9) var_o_func -> PARIZQ crea_func pars PARDER bloque_func funcs .

    MAIN            reduce using rule 9 (var_o_func -> PARIZQ crea_func pars PARDER bloque_func funcs .)


state 185

    (24) funcs -> func . funcs
    (24) funcs -> . func funcs
    (25) funcs -> .
    (26) func -> . tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (27) func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    MAIN            reduce using rule 25 (funcs -> .)
    VOID            shift and go to state 187
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    func                           shift and go to state 185
    funcs                          shift and go to state 234
    tipo                           shift and go to state 186

state 186

    (26) func -> tipo . ID actualiza_id crea_func PARIZQ pars PARDER bloque_func

    ID              shift and go to state 235


state 187

    (27) func -> VOID . tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (28) tipo_void -> .

    ID              reduce using rule 28 (tipo_void -> .)

    tipo_void                      shift and go to state 236

state 188

    (105) pars -> tipo ID actualiza_id crea_var . lista par
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 92 (lista -> .)
    PARDER          reduce using rule 92 (lista -> .)

    lista                          shift and go to state 237

state 189

    (20) vars_lista -> COMA ID actualiza_id crea_var . lista vars_lista
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 92 (lista -> .)
    PUNTCOM         reduce using rule 92 (lista -> .)

    lista                          shift and go to state 238

state 190

    (93) matriz -> CORIZQ expresion . CORDER

    CORDER          shift and go to state 239


state 191

    (38) or_expr -> OR push_oper . expresion
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 240
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 192

    (41) and_exp -> AND push_oper . expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expr                           shift and go to state 241
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 193

    (44) rel_e -> DIF push_oper . exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 242
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 194

    (45) rel_e -> MENOR push_oper . exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 243
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 195

    (46) rel_e -> MAYOR push_oper . exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 244
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 196

    (47) rel_e -> MENIGUAL push_oper . exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 245
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 197

    (48) rel_e -> MAYIGUAL push_oper . exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 246
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 198

    (49) rel_e -> IGUAL push_oper . exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp                            shift and go to state 247
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 199

    (52) suma_resta -> SUMA push_oper . e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    e                              shift and go to state 248
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 200

    (53) suma_resta -> RESTA push_oper . e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    e                              shift and go to state 249
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 201

    (56) mult_div -> MULT push_oper . termino
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    termino                        shift and go to state 250
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 202

    (57) mult_div -> DIV push_oper . termino
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    termino                        shift and go to state 251
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 203

    (59) factor -> PARIZQ push_paren e PARDER . pop_paren
    (64) pop_paren -> .

    MULT            reduce using rule 64 (pop_paren -> .)
    DIV             reduce using rule 64 (pop_paren -> .)
    SUMA            reduce using rule 64 (pop_paren -> .)
    RESTA           reduce using rule 64 (pop_paren -> .)
    DIF             reduce using rule 64 (pop_paren -> .)
    MENOR           reduce using rule 64 (pop_paren -> .)
    MAYOR           reduce using rule 64 (pop_paren -> .)
    MENIGUAL        reduce using rule 64 (pop_paren -> .)
    MAYIGUAL        reduce using rule 64 (pop_paren -> .)
    IGUAL           reduce using rule 64 (pop_paren -> .)
    AND             reduce using rule 64 (pop_paren -> .)
    OR              reduce using rule 64 (pop_paren -> .)
    CORDER          reduce using rule 64 (pop_paren -> .)
    PARDER          reduce using rule 64 (pop_paren -> .)
    PUNTCOM         reduce using rule 64 (pop_paren -> .)
    COMA            reduce using rule 64 (pop_paren -> .)

    pop_paren                      shift and go to state 252

state 204

    (98) var_func_call -> PARIZQ args . PARDER

    PARDER          shift and go to state 253


state 205

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func . funcs
    (24) funcs -> . func funcs
    (25) funcs -> .
    (26) func -> . tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (27) func -> . VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    MAIN            reduce using rule 25 (funcs -> .)
    VOID            shift and go to state 187
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    funcs                          shift and go to state 254
    func                           shift and go to state 185
    tipo                           shift and go to state 186

state 206

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F . COMA CTE_F COMA CTE_F PUNTCOM BRADER

    COMA            shift and go to state 255


state 207

    (12) bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER .

    $end            reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER .)
    VOID            reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER .)
    INT             reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER .)
    FLOAT           reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER .)
    MAIN            reduce using rule 12 (bloque_func -> BRAIZQ vars_estatutos RETURN returns BRADER .)


state 208

    (17) returns -> expresion PUNTCOM .

    BRADER          reduce using rule 17 (returns -> expresion PUNTCOM .)


state 209

    (19) vars -> tipo ID actualiza_id crea_var . lista vars_lista PUNTCOM mas_vars
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 92 (lista -> .)
    PUNTCOM         reduce using rule 92 (lista -> .)

    lista                          shift and go to state 256

state 210

    (72) asignacion -> ID actualiza_id lista ASIG . exp_input PUNTCOM
    (74) exp_input -> . expresion
    (75) exp_input -> . INPUT PARIZQ PARDER
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    INPUT           shift and go to state 259
    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    exp_input                      shift and go to state 257
    expresion                      shift and go to state 258
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 211

    (71) func_call -> ID PARIZQ args PARDER .

    PUNTCOM         reduce using rule 71 (func_call -> ID PARIZQ args PARDER .)


state 212

    (100) args -> expresion arg .

    PARDER          reduce using rule 100 (args -> expresion arg .)


state 213

    (102) arg -> COMA . expresion arg
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 260
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 214

    (76) condicion -> IF PARIZQ expresion PARDER . bloque else_bloque
    (104) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 262

    bloque                         shift and go to state 261

state 215

    (79) escritura -> PRINT PARIZQ arg_escritura PARDER . PUNTCOM

    PUNTCOM         shift and go to state 263


state 216

    (80) arg_escritura -> expresion args_escritura .

    PARDER          reduce using rule 80 (arg_escritura -> expresion args_escritura .)


state 217

    (82) args_escritura -> COMA . arg_escritura
    (80) arg_escritura -> . expresion args_escritura
    (81) arg_escritura -> . CTE_STR args_escritura
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    CTE_STR         shift and go to state 168
    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    arg_escritura                  shift and go to state 264
    expresion                      shift and go to state 167
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 218

    (81) arg_escritura -> CTE_STR args_escritura .

    PARDER          reduce using rule 81 (arg_escritura -> CTE_STR args_escritura .)


state 219

    (84) ciclo -> REPEAT push_cont PARIZQ expresion . fin_exp_repeat PARDER bloque fin_repeat
    (86) fin_exp_repeat -> .

    PARDER          reduce using rule 86 (fin_exp_repeat -> .)

    fin_exp_repeat                 shift and go to state 265

state 220

    (109) instruccion -> FORWARD PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 266


state 221

    (110) instruccion -> BACKWARD PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 267


state 222

    (111) instruccion -> LEFT PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 268


state 223

    (112) instruccion -> RIGHT PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 269


state 224

    (113) instruccion -> TURN PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 270


state 225

    (114) instruccion -> SIZE PARIZQ expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 271


state 226

    (115) instruccion -> CIRCLE PARIZQ expresion PARDER . transform PUNTCOM
    (123) transform -> . PUNTO altera transform
    (124) transform -> .

    PUNTO           shift and go to state 273
    PUNTCOM         reduce using rule 124 (transform -> .)

    transform                      shift and go to state 272

state 227

    (116) instruccion -> TRIANGLE PARIZQ expresion PARDER . transform PUNTCOM
    (123) transform -> . PUNTO altera transform
    (124) transform -> .

    PUNTO           shift and go to state 273
    PUNTCOM         reduce using rule 124 (transform -> .)

    transform                      shift and go to state 274

state 228

    (117) instruccion -> SQUARE PARIZQ expresion PARDER . transform PUNTCOM
    (123) transform -> . PUNTO altera transform
    (124) transform -> .

    PUNTO           shift and go to state 273
    PUNTCOM         reduce using rule 124 (transform -> .)

    transform                      shift and go to state 275

state 229

    (118) instruccion -> NGON PARIZQ expresion COMA . expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 276
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 230

    (119) instruccion -> ARC PARIZQ expresion COMA . expresion PARDER transform PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 277
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 231

    (120) instruccion -> UP PARIZQ PARDER PUNTCOM .

    ID              reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    error           reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    IF              reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    PRINT           reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    REPEAT          reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    FORWARD         reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    BACKWARD        reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    LEFT            reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    RIGHT           reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    TURN            reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    SIZE            reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    CIRCLE          reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    SQUARE          reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    NGON            reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    ARC             reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    UP              reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    DOWN            reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    COLOR           reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    RETURN          reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)
    BRADER          reduce using rule 120 (instruccion -> UP PARIZQ PARDER PUNTCOM .)


state 232

    (121) instruccion -> DOWN PARIZQ PARDER PUNTCOM .

    ID              reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    error           reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    IF              reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    PRINT           reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    REPEAT          reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    FORWARD         reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    BACKWARD        reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    LEFT            reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    RIGHT           reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    TURN            reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    SIZE            reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    CIRCLE          reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    SQUARE          reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    NGON            reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    ARC             reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    UP              reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    DOWN            reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    COLOR           reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    RETURN          reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)
    BRADER          reduce using rule 121 (instruccion -> DOWN PARIZQ PARDER PUNTCOM .)


state 233

    (122) instruccion -> COLOR PARIZQ expresion COMA . expresion COMA expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 278
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 234

    (24) funcs -> func funcs .

    MAIN            reduce using rule 24 (funcs -> func funcs .)


state 235

    (26) func -> tipo ID . actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 279

state 236

    (27) func -> VOID tipo_void . ID actualiza_id crea_func PARIZQ pars PARDER bloque_func

    ID              shift and go to state 280


state 237

    (105) pars -> tipo ID actualiza_id crea_var lista . par
    (107) par -> . COMA tipo ID actualiza_id crea_var lista par
    (108) par -> .

    COMA            shift and go to state 282
    PARDER          reduce using rule 108 (par -> .)

    par                            shift and go to state 281

state 238

    (20) vars_lista -> COMA ID actualiza_id crea_var lista . vars_lista
    (20) vars_lista -> . COMA ID actualiza_id crea_var lista vars_lista
    (21) vars_lista -> .

    COMA            shift and go to state 43
    PUNTCOM         reduce using rule 21 (vars_lista -> .)

    vars_lista                     shift and go to state 283

state 239

    (93) matriz -> CORIZQ expresion CORDER .

    COMA            reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    PUNTCOM         reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    MULT            reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    DIV             reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    SUMA            reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    RESTA           reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    DIF             reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    MENOR           reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    MAYOR           reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    MENIGUAL        reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    MAYIGUAL        reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    IGUAL           reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    AND             reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    OR              reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)
    ASIG            reduce using rule 93 (matriz -> CORIZQ expresion CORDER .)


state 240

    (38) or_expr -> OR push_oper expresion .

    CORDER          reduce using rule 38 (or_expr -> OR push_oper expresion .)
    PUNTCOM         reduce using rule 38 (or_expr -> OR push_oper expresion .)
    COMA            reduce using rule 38 (or_expr -> OR push_oper expresion .)
    PARDER          reduce using rule 38 (or_expr -> OR push_oper expresion .)


state 241

    (41) and_exp -> AND push_oper expr .

    OR              reduce using rule 41 (and_exp -> AND push_oper expr .)
    CORDER          reduce using rule 41 (and_exp -> AND push_oper expr .)
    PUNTCOM         reduce using rule 41 (and_exp -> AND push_oper expr .)
    COMA            reduce using rule 41 (and_exp -> AND push_oper expr .)
    PARDER          reduce using rule 41 (and_exp -> AND push_oper expr .)


state 242

    (44) rel_e -> DIF push_oper exp .

    AND             reduce using rule 44 (rel_e -> DIF push_oper exp .)
    OR              reduce using rule 44 (rel_e -> DIF push_oper exp .)
    CORDER          reduce using rule 44 (rel_e -> DIF push_oper exp .)
    PUNTCOM         reduce using rule 44 (rel_e -> DIF push_oper exp .)
    COMA            reduce using rule 44 (rel_e -> DIF push_oper exp .)
    PARDER          reduce using rule 44 (rel_e -> DIF push_oper exp .)


state 243

    (45) rel_e -> MENOR push_oper exp .

    AND             reduce using rule 45 (rel_e -> MENOR push_oper exp .)
    OR              reduce using rule 45 (rel_e -> MENOR push_oper exp .)
    CORDER          reduce using rule 45 (rel_e -> MENOR push_oper exp .)
    PUNTCOM         reduce using rule 45 (rel_e -> MENOR push_oper exp .)
    COMA            reduce using rule 45 (rel_e -> MENOR push_oper exp .)
    PARDER          reduce using rule 45 (rel_e -> MENOR push_oper exp .)


state 244

    (46) rel_e -> MAYOR push_oper exp .

    AND             reduce using rule 46 (rel_e -> MAYOR push_oper exp .)
    OR              reduce using rule 46 (rel_e -> MAYOR push_oper exp .)
    CORDER          reduce using rule 46 (rel_e -> MAYOR push_oper exp .)
    PUNTCOM         reduce using rule 46 (rel_e -> MAYOR push_oper exp .)
    COMA            reduce using rule 46 (rel_e -> MAYOR push_oper exp .)
    PARDER          reduce using rule 46 (rel_e -> MAYOR push_oper exp .)


state 245

    (47) rel_e -> MENIGUAL push_oper exp .

    AND             reduce using rule 47 (rel_e -> MENIGUAL push_oper exp .)
    OR              reduce using rule 47 (rel_e -> MENIGUAL push_oper exp .)
    CORDER          reduce using rule 47 (rel_e -> MENIGUAL push_oper exp .)
    PUNTCOM         reduce using rule 47 (rel_e -> MENIGUAL push_oper exp .)
    COMA            reduce using rule 47 (rel_e -> MENIGUAL push_oper exp .)
    PARDER          reduce using rule 47 (rel_e -> MENIGUAL push_oper exp .)


state 246

    (48) rel_e -> MAYIGUAL push_oper exp .

    AND             reduce using rule 48 (rel_e -> MAYIGUAL push_oper exp .)
    OR              reduce using rule 48 (rel_e -> MAYIGUAL push_oper exp .)
    CORDER          reduce using rule 48 (rel_e -> MAYIGUAL push_oper exp .)
    PUNTCOM         reduce using rule 48 (rel_e -> MAYIGUAL push_oper exp .)
    COMA            reduce using rule 48 (rel_e -> MAYIGUAL push_oper exp .)
    PARDER          reduce using rule 48 (rel_e -> MAYIGUAL push_oper exp .)


state 247

    (49) rel_e -> IGUAL push_oper exp .

    AND             reduce using rule 49 (rel_e -> IGUAL push_oper exp .)
    OR              reduce using rule 49 (rel_e -> IGUAL push_oper exp .)
    CORDER          reduce using rule 49 (rel_e -> IGUAL push_oper exp .)
    PUNTCOM         reduce using rule 49 (rel_e -> IGUAL push_oper exp .)
    COMA            reduce using rule 49 (rel_e -> IGUAL push_oper exp .)
    PARDER          reduce using rule 49 (rel_e -> IGUAL push_oper exp .)


state 248

    (52) suma_resta -> SUMA push_oper e .

    DIF             reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    MENOR           reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    MAYOR           reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    MENIGUAL        reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    MAYIGUAL        reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    IGUAL           reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    AND             reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    OR              reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    CORDER          reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    PARDER          reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    PUNTCOM         reduce using rule 52 (suma_resta -> SUMA push_oper e .)
    COMA            reduce using rule 52 (suma_resta -> SUMA push_oper e .)


state 249

    (53) suma_resta -> RESTA push_oper e .

    DIF             reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    MENOR           reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    MAYOR           reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    MENIGUAL        reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    MAYIGUAL        reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    IGUAL           reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    AND             reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    OR              reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    CORDER          reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    PARDER          reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    PUNTCOM         reduce using rule 53 (suma_resta -> RESTA push_oper e .)
    COMA            reduce using rule 53 (suma_resta -> RESTA push_oper e .)


state 250

    (56) mult_div -> MULT push_oper termino .

    SUMA            reduce using rule 56 (mult_div -> MULT push_oper termino .)
    RESTA           reduce using rule 56 (mult_div -> MULT push_oper termino .)
    DIF             reduce using rule 56 (mult_div -> MULT push_oper termino .)
    MENOR           reduce using rule 56 (mult_div -> MULT push_oper termino .)
    MAYOR           reduce using rule 56 (mult_div -> MULT push_oper termino .)
    MENIGUAL        reduce using rule 56 (mult_div -> MULT push_oper termino .)
    MAYIGUAL        reduce using rule 56 (mult_div -> MULT push_oper termino .)
    IGUAL           reduce using rule 56 (mult_div -> MULT push_oper termino .)
    AND             reduce using rule 56 (mult_div -> MULT push_oper termino .)
    OR              reduce using rule 56 (mult_div -> MULT push_oper termino .)
    CORDER          reduce using rule 56 (mult_div -> MULT push_oper termino .)
    PARDER          reduce using rule 56 (mult_div -> MULT push_oper termino .)
    PUNTCOM         reduce using rule 56 (mult_div -> MULT push_oper termino .)
    COMA            reduce using rule 56 (mult_div -> MULT push_oper termino .)


state 251

    (57) mult_div -> DIV push_oper termino .

    SUMA            reduce using rule 57 (mult_div -> DIV push_oper termino .)
    RESTA           reduce using rule 57 (mult_div -> DIV push_oper termino .)
    DIF             reduce using rule 57 (mult_div -> DIV push_oper termino .)
    MENOR           reduce using rule 57 (mult_div -> DIV push_oper termino .)
    MAYOR           reduce using rule 57 (mult_div -> DIV push_oper termino .)
    MENIGUAL        reduce using rule 57 (mult_div -> DIV push_oper termino .)
    MAYIGUAL        reduce using rule 57 (mult_div -> DIV push_oper termino .)
    IGUAL           reduce using rule 57 (mult_div -> DIV push_oper termino .)
    AND             reduce using rule 57 (mult_div -> DIV push_oper termino .)
    OR              reduce using rule 57 (mult_div -> DIV push_oper termino .)
    CORDER          reduce using rule 57 (mult_div -> DIV push_oper termino .)
    PARDER          reduce using rule 57 (mult_div -> DIV push_oper termino .)
    PUNTCOM         reduce using rule 57 (mult_div -> DIV push_oper termino .)
    COMA            reduce using rule 57 (mult_div -> DIV push_oper termino .)


state 252

    (59) factor -> PARIZQ push_paren e PARDER pop_paren .

    MULT            reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    DIV             reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    SUMA            reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    RESTA           reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    DIF             reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    MENOR           reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    MAYOR           reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    MENIGUAL        reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    MAYIGUAL        reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    IGUAL           reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    AND             reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    OR              reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    CORDER          reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    PARDER          reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    PUNTCOM         reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)
    COMA            reduce using rule 59 (factor -> PARIZQ push_paren e PARDER pop_paren .)


state 253

    (98) var_func_call -> PARIZQ args PARDER .

    MULT            reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    DIV             reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    SUMA            reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    RESTA           reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    DIF             reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    MENOR           reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    MAYOR           reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    MENIGUAL        reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    MAYIGUAL        reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    IGUAL           reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    AND             reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    OR              reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    CORDER          reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    PARDER          reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    PUNTCOM         reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)
    COMA            reduce using rule 98 (var_func_call -> PARIZQ args PARDER .)


state 254

    (6) var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs .

    MAIN            reduce using rule 6 (var_func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func funcs .)


state 255

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA . CTE_F COMA CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 284


state 256

    (19) vars -> tipo ID actualiza_id crea_var lista . vars_lista PUNTCOM mas_vars
    (20) vars_lista -> . COMA ID actualiza_id crea_var lista vars_lista
    (21) vars_lista -> .

    COMA            shift and go to state 43
    PUNTCOM         reduce using rule 21 (vars_lista -> .)

    vars_lista                     shift and go to state 285

state 257

    (72) asignacion -> ID actualiza_id lista ASIG exp_input . PUNTCOM

    PUNTCOM         shift and go to state 286


state 258

    (74) exp_input -> expresion .

    PUNTCOM         reduce using rule 74 (exp_input -> expresion .)


state 259

    (75) exp_input -> INPUT . PARIZQ PARDER

    PARIZQ          shift and go to state 287


state 260

    (102) arg -> COMA expresion . arg
    (102) arg -> . COMA expresion arg
    (103) arg -> .

    COMA            shift and go to state 213
    PARDER          reduce using rule 103 (arg -> .)

    arg                            shift and go to state 288

state 261

    (76) condicion -> IF PARIZQ expresion PARDER bloque . else_bloque
    (77) else_bloque -> . ELSE bloque
    (78) else_bloque -> .

    ELSE            shift and go to state 290
    ID              reduce using rule 78 (else_bloque -> .)
    error           reduce using rule 78 (else_bloque -> .)
    IF              reduce using rule 78 (else_bloque -> .)
    PRINT           reduce using rule 78 (else_bloque -> .)
    REPEAT          reduce using rule 78 (else_bloque -> .)
    FORWARD         reduce using rule 78 (else_bloque -> .)
    BACKWARD        reduce using rule 78 (else_bloque -> .)
    LEFT            reduce using rule 78 (else_bloque -> .)
    RIGHT           reduce using rule 78 (else_bloque -> .)
    TURN            reduce using rule 78 (else_bloque -> .)
    SIZE            reduce using rule 78 (else_bloque -> .)
    CIRCLE          reduce using rule 78 (else_bloque -> .)
    TRIANGLE        reduce using rule 78 (else_bloque -> .)
    SQUARE          reduce using rule 78 (else_bloque -> .)
    NGON            reduce using rule 78 (else_bloque -> .)
    ARC             reduce using rule 78 (else_bloque -> .)
    UP              reduce using rule 78 (else_bloque -> .)
    DOWN            reduce using rule 78 (else_bloque -> .)
    COLOR           reduce using rule 78 (else_bloque -> .)
    RETURN          reduce using rule 78 (else_bloque -> .)
    BRADER          reduce using rule 78 (else_bloque -> .)

    else_bloque                    shift and go to state 289

state 262

    (104) bloque -> BRAIZQ . estatutos BRADER
    (15) estatutos -> . estatuto estatutos
    (16) estatutos -> .
    (65) estatuto -> . asignacion
    (66) estatuto -> . condicion
    (67) estatuto -> . escritura
    (68) estatuto -> . ciclo
    (69) estatuto -> . instruccion
    (70) estatuto -> . func_call PUNTCOM
    (72) asignacion -> . ID actualiza_id lista ASIG exp_input PUNTCOM
    (73) asignacion -> . error
    (76) condicion -> . IF PARIZQ expresion PARDER bloque else_bloque
    (79) escritura -> . PRINT PARIZQ arg_escritura PARDER PUNTCOM
    (84) ciclo -> . REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat
    (109) instruccion -> . FORWARD PARIZQ expresion PARDER PUNTCOM
    (110) instruccion -> . BACKWARD PARIZQ expresion PARDER PUNTCOM
    (111) instruccion -> . LEFT PARIZQ expresion PARDER PUNTCOM
    (112) instruccion -> . RIGHT PARIZQ expresion PARDER PUNTCOM
    (113) instruccion -> . TURN PARIZQ expresion PARDER PUNTCOM
    (114) instruccion -> . SIZE PARIZQ expresion PARDER PUNTCOM
    (115) instruccion -> . CIRCLE PARIZQ expresion PARDER transform PUNTCOM
    (116) instruccion -> . TRIANGLE PARIZQ expresion PARDER transform PUNTCOM
    (117) instruccion -> . SQUARE PARIZQ expresion PARDER transform PUNTCOM
    (118) instruccion -> . NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (119) instruccion -> . ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM
    (120) instruccion -> . UP PARIZQ PARDER PUNTCOM
    (121) instruccion -> . DOWN PARIZQ PARDER PUNTCOM
    (122) instruccion -> . COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM
    (71) func_call -> . ID PARIZQ args PARDER

    BRADER          reduce using rule 16 (estatutos -> .)
    ID              shift and go to state 63
    error           shift and go to state 71
    IF              shift and go to state 72
    PRINT           shift and go to state 73
    REPEAT          shift and go to state 74
    FORWARD         shift and go to state 75
    BACKWARD        shift and go to state 76
    LEFT            shift and go to state 77
    RIGHT           shift and go to state 78
    TURN            shift and go to state 79
    SIZE            shift and go to state 80
    CIRCLE          shift and go to state 81
    TRIANGLE        shift and go to state 82
    SQUARE          shift and go to state 83
    NGON            shift and go to state 84
    ARC             shift and go to state 85
    UP              shift and go to state 86
    DOWN            shift and go to state 87
    COLOR           shift and go to state 88

    estatutos                      shift and go to state 291
    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    ciclo                          shift and go to state 68
    instruccion                    shift and go to state 69
    func_call                      shift and go to state 70

state 263

    (79) escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .

    ID              reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    error           reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    IF              reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    PRINT           reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    REPEAT          reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    FORWARD         reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    BACKWARD        reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    LEFT            reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    RIGHT           reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    TURN            reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    SIZE            reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    CIRCLE          reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    SQUARE          reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    NGON            reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    ARC             reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    UP              reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    DOWN            reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    COLOR           reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    RETURN          reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)
    BRADER          reduce using rule 79 (escritura -> PRINT PARIZQ arg_escritura PARDER PUNTCOM .)


state 264

    (82) args_escritura -> COMA arg_escritura .

    PARDER          reduce using rule 82 (args_escritura -> COMA arg_escritura .)


state 265

    (84) ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat . PARDER bloque fin_repeat

    PARDER          shift and go to state 292


state 266

    (109) instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    error           reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 109 (instruccion -> FORWARD PARIZQ expresion PARDER PUNTCOM .)


state 267

    (110) instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    error           reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 110 (instruccion -> BACKWARD PARIZQ expresion PARDER PUNTCOM .)


state 268

    (111) instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    error           reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 111 (instruccion -> LEFT PARIZQ expresion PARDER PUNTCOM .)


state 269

    (112) instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    error           reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 112 (instruccion -> RIGHT PARIZQ expresion PARDER PUNTCOM .)


state 270

    (113) instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    error           reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 113 (instruccion -> TURN PARIZQ expresion PARDER PUNTCOM .)


state 271

    (114) instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .

    ID              reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    error           reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    IF              reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    TURN            reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    NGON            reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    ARC             reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    UP              reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 114 (instruccion -> SIZE PARIZQ expresion PARDER PUNTCOM .)


state 272

    (115) instruccion -> CIRCLE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 293


state 273

    (123) transform -> PUNTO . altera transform
    (125) altera -> . ROTATE PARIZQ expresion PARDER
    (126) altera -> . STRETCH PARIZQ expresion PARDER
    (127) altera -> . FILL PARIZQ PARDER

    ROTATE          shift and go to state 295
    STRETCH         shift and go to state 296
    FILL            shift and go to state 297

    altera                         shift and go to state 294

state 274

    (116) instruccion -> TRIANGLE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 298


state 275

    (117) instruccion -> SQUARE PARIZQ expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 299


state 276

    (118) instruccion -> NGON PARIZQ expresion COMA expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 300


state 277

    (119) instruccion -> ARC PARIZQ expresion COMA expresion . PARDER transform PUNTCOM

    PARDER          shift and go to state 301


state 278

    (122) instruccion -> COLOR PARIZQ expresion COMA expresion . COMA expresion PARDER PUNTCOM

    COMA            shift and go to state 302


state 279

    (26) func -> tipo ID actualiza_id . crea_func PARIZQ pars PARDER bloque_func
    (30) crea_func -> .

    PARIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 303

state 280

    (27) func -> VOID tipo_void ID . actualiza_id crea_func PARIZQ pars PARDER bloque_func
    (8) actualiza_id -> .

    PARIZQ          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 304

state 281

    (105) pars -> tipo ID actualiza_id crea_var lista par .

    PARDER          reduce using rule 105 (pars -> tipo ID actualiza_id crea_var lista par .)


state 282

    (107) par -> COMA . tipo ID actualiza_id crea_var lista par
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    tipo                           shift and go to state 305

state 283

    (20) vars_lista -> COMA ID actualiza_id crea_var lista vars_lista .

    PUNTCOM         reduce using rule 20 (vars_lista -> COMA ID actualiza_id crea_var lista vars_lista .)


state 284

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F . COMA CTE_F PUNTCOM BRADER

    COMA            shift and go to state 306


state 285

    (19) vars -> tipo ID actualiza_id crea_var lista vars_lista . PUNTCOM mas_vars

    PUNTCOM         shift and go to state 307


state 286

    (72) asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .

    ID              reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    error           reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    IF              reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    PRINT           reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    REPEAT          reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    FORWARD         reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    BACKWARD        reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    LEFT            reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    RIGHT           reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    TURN            reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    SIZE            reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    CIRCLE          reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    TRIANGLE        reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    SQUARE          reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    NGON            reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    ARC             reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    UP              reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    DOWN            reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    COLOR           reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    RETURN          reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)
    BRADER          reduce using rule 72 (asignacion -> ID actualiza_id lista ASIG exp_input PUNTCOM .)


state 287

    (75) exp_input -> INPUT PARIZQ . PARDER

    PARDER          shift and go to state 308


state 288

    (102) arg -> COMA expresion arg .

    PARDER          reduce using rule 102 (arg -> COMA expresion arg .)


state 289

    (76) condicion -> IF PARIZQ expresion PARDER bloque else_bloque .

    ID              reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    error           reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    IF              reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    PRINT           reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    REPEAT          reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    FORWARD         reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    BACKWARD        reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    LEFT            reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    RIGHT           reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    TURN            reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    SIZE            reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    CIRCLE          reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    TRIANGLE        reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    SQUARE          reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    NGON            reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    ARC             reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    UP              reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    DOWN            reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    COLOR           reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    RETURN          reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)
    BRADER          reduce using rule 76 (condicion -> IF PARIZQ expresion PARDER bloque else_bloque .)


state 290

    (77) else_bloque -> ELSE . bloque
    (104) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 262

    bloque                         shift and go to state 309

state 291

    (104) bloque -> BRAIZQ estatutos . BRADER

    BRADER          shift and go to state 310


state 292

    (84) ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER . bloque fin_repeat
    (104) bloque -> . BRAIZQ estatutos BRADER

    BRAIZQ          shift and go to state 262

    bloque                         shift and go to state 311

state 293

    (115) instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    error           reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 115 (instruccion -> CIRCLE PARIZQ expresion PARDER transform PUNTCOM .)


state 294

    (123) transform -> PUNTO altera . transform
    (123) transform -> . PUNTO altera transform
    (124) transform -> .

    PUNTO           shift and go to state 273
    PUNTCOM         reduce using rule 124 (transform -> .)

    transform                      shift and go to state 312

state 295

    (125) altera -> ROTATE . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 313


state 296

    (126) altera -> STRETCH . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 314


state 297

    (127) altera -> FILL . PARIZQ PARDER

    PARIZQ          shift and go to state 315


state 298

    (116) instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    error           reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 116 (instruccion -> TRIANGLE PARIZQ expresion PARDER transform PUNTCOM .)


state 299

    (117) instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .

    ID              reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    error           reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 117 (instruccion -> SQUARE PARIZQ expresion PARDER transform PUNTCOM .)


state 300

    (118) instruccion -> NGON PARIZQ expresion COMA expresion PARDER . transform PUNTCOM
    (123) transform -> . PUNTO altera transform
    (124) transform -> .

    PUNTO           shift and go to state 273
    PUNTCOM         reduce using rule 124 (transform -> .)

    transform                      shift and go to state 316

state 301

    (119) instruccion -> ARC PARIZQ expresion COMA expresion PARDER . transform PUNTCOM
    (123) transform -> . PUNTO altera transform
    (124) transform -> .

    PUNTO           shift and go to state 273
    PUNTCOM         reduce using rule 124 (transform -> .)

    transform                      shift and go to state 317

state 302

    (122) instruccion -> COLOR PARIZQ expresion COMA expresion COMA . expresion PARDER PUNTCOM
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 318
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 303

    (26) func -> tipo ID actualiza_id crea_func . PARIZQ pars PARDER bloque_func

    PARIZQ          shift and go to state 319


state 304

    (27) func -> VOID tipo_void ID actualiza_id . crea_func PARIZQ pars PARDER bloque_func
    (30) crea_func -> .

    PARIZQ          reduce using rule 30 (crea_func -> .)

    crea_func                      shift and go to state 320

state 305

    (107) par -> COMA tipo . ID actualiza_id crea_var lista par

    ID              shift and go to state 321


state 306

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA . CTE_F PUNTCOM BRADER

    CTE_F           shift and go to state 322


state 307

    (19) vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM . mas_vars
    (22) mas_vars -> . vars
    (23) mas_vars -> .
    (19) vars -> . tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    ID              reduce using rule 23 (mas_vars -> .)
    error           reduce using rule 23 (mas_vars -> .)
    IF              reduce using rule 23 (mas_vars -> .)
    PRINT           reduce using rule 23 (mas_vars -> .)
    REPEAT          reduce using rule 23 (mas_vars -> .)
    FORWARD         reduce using rule 23 (mas_vars -> .)
    BACKWARD        reduce using rule 23 (mas_vars -> .)
    LEFT            reduce using rule 23 (mas_vars -> .)
    RIGHT           reduce using rule 23 (mas_vars -> .)
    TURN            reduce using rule 23 (mas_vars -> .)
    SIZE            reduce using rule 23 (mas_vars -> .)
    CIRCLE          reduce using rule 23 (mas_vars -> .)
    TRIANGLE        reduce using rule 23 (mas_vars -> .)
    SQUARE          reduce using rule 23 (mas_vars -> .)
    NGON            reduce using rule 23 (mas_vars -> .)
    ARC             reduce using rule 23 (mas_vars -> .)
    UP              reduce using rule 23 (mas_vars -> .)
    DOWN            reduce using rule 23 (mas_vars -> .)
    COLOR           reduce using rule 23 (mas_vars -> .)
    RETURN          reduce using rule 23 (mas_vars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    tipo                           shift and go to state 62
    mas_vars                       shift and go to state 323
    vars                           shift and go to state 324

state 308

    (75) exp_input -> INPUT PARIZQ PARDER .

    PUNTCOM         reduce using rule 75 (exp_input -> INPUT PARIZQ PARDER .)


state 309

    (77) else_bloque -> ELSE bloque .

    ID              reduce using rule 77 (else_bloque -> ELSE bloque .)
    error           reduce using rule 77 (else_bloque -> ELSE bloque .)
    IF              reduce using rule 77 (else_bloque -> ELSE bloque .)
    PRINT           reduce using rule 77 (else_bloque -> ELSE bloque .)
    REPEAT          reduce using rule 77 (else_bloque -> ELSE bloque .)
    FORWARD         reduce using rule 77 (else_bloque -> ELSE bloque .)
    BACKWARD        reduce using rule 77 (else_bloque -> ELSE bloque .)
    LEFT            reduce using rule 77 (else_bloque -> ELSE bloque .)
    RIGHT           reduce using rule 77 (else_bloque -> ELSE bloque .)
    TURN            reduce using rule 77 (else_bloque -> ELSE bloque .)
    SIZE            reduce using rule 77 (else_bloque -> ELSE bloque .)
    CIRCLE          reduce using rule 77 (else_bloque -> ELSE bloque .)
    TRIANGLE        reduce using rule 77 (else_bloque -> ELSE bloque .)
    SQUARE          reduce using rule 77 (else_bloque -> ELSE bloque .)
    NGON            reduce using rule 77 (else_bloque -> ELSE bloque .)
    ARC             reduce using rule 77 (else_bloque -> ELSE bloque .)
    UP              reduce using rule 77 (else_bloque -> ELSE bloque .)
    DOWN            reduce using rule 77 (else_bloque -> ELSE bloque .)
    COLOR           reduce using rule 77 (else_bloque -> ELSE bloque .)
    RETURN          reduce using rule 77 (else_bloque -> ELSE bloque .)
    BRADER          reduce using rule 77 (else_bloque -> ELSE bloque .)


state 310

    (104) bloque -> BRAIZQ estatutos BRADER .

    ELSE            reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    ID              reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    error           reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    IF              reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    PRINT           reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    REPEAT          reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    FORWARD         reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    BACKWARD        reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    LEFT            reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    RIGHT           reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    TURN            reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    SIZE            reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    CIRCLE          reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    TRIANGLE        reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    SQUARE          reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    NGON            reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    ARC             reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    UP              reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    DOWN            reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    COLOR           reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    RETURN          reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)
    BRADER          reduce using rule 104 (bloque -> BRAIZQ estatutos BRADER .)


state 311

    (84) ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque . fin_repeat
    (87) fin_repeat -> .

    ID              reduce using rule 87 (fin_repeat -> .)
    error           reduce using rule 87 (fin_repeat -> .)
    IF              reduce using rule 87 (fin_repeat -> .)
    PRINT           reduce using rule 87 (fin_repeat -> .)
    REPEAT          reduce using rule 87 (fin_repeat -> .)
    FORWARD         reduce using rule 87 (fin_repeat -> .)
    BACKWARD        reduce using rule 87 (fin_repeat -> .)
    LEFT            reduce using rule 87 (fin_repeat -> .)
    RIGHT           reduce using rule 87 (fin_repeat -> .)
    TURN            reduce using rule 87 (fin_repeat -> .)
    SIZE            reduce using rule 87 (fin_repeat -> .)
    CIRCLE          reduce using rule 87 (fin_repeat -> .)
    TRIANGLE        reduce using rule 87 (fin_repeat -> .)
    SQUARE          reduce using rule 87 (fin_repeat -> .)
    NGON            reduce using rule 87 (fin_repeat -> .)
    ARC             reduce using rule 87 (fin_repeat -> .)
    UP              reduce using rule 87 (fin_repeat -> .)
    DOWN            reduce using rule 87 (fin_repeat -> .)
    COLOR           reduce using rule 87 (fin_repeat -> .)
    RETURN          reduce using rule 87 (fin_repeat -> .)
    BRADER          reduce using rule 87 (fin_repeat -> .)

    fin_repeat                     shift and go to state 325

state 312

    (123) transform -> PUNTO altera transform .

    PUNTCOM         reduce using rule 123 (transform -> PUNTO altera transform .)


state 313

    (125) altera -> ROTATE PARIZQ . expresion PARDER
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 326
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 314

    (126) altera -> STRETCH PARIZQ . expresion PARDER
    (37) expresion -> . expr pop_or or_expr
    (40) expr -> . exp pop_and and_exp
    (43) exp -> . e pop_rel_e rel_e
    (51) e -> . termino pop_suma_resta suma_resta
    (55) termino -> . factor pop_mult_div mult_div
    (59) factor -> . PARIZQ push_paren e PARDER pop_paren
    (60) factor -> . var
    (61) factor -> . SUMA var
    (62) factor -> . RESTA var
    (95) var -> . ID actualiza_id var_func_call
    (96) var -> . CTE_I
    (97) var -> . CTE_F

    PARIZQ          shift and go to state 50
    SUMA            shift and go to state 52
    RESTA           shift and go to state 53
    ID              shift and go to state 54
    CTE_I           shift and go to state 55
    CTE_F           shift and go to state 56

    expresion                      shift and go to state 327
    expr                           shift and go to state 45
    exp                            shift and go to state 46
    e                              shift and go to state 47
    termino                        shift and go to state 48
    factor                         shift and go to state 49
    var                            shift and go to state 51

state 315

    (127) altera -> FILL PARIZQ . PARDER

    PARDER          shift and go to state 328


state 316

    (118) instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 329


state 317

    (119) instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform . PUNTCOM

    PUNTCOM         shift and go to state 330


state 318

    (122) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion . PARDER PUNTCOM

    PARDER          shift and go to state 331


state 319

    (26) func -> tipo ID actualiza_id crea_func PARIZQ . pars PARDER bloque_func
    (105) pars -> . tipo ID actualiza_id crea_var lista par
    (106) pars -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 106 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    tipo                           shift and go to state 41
    pars                           shift and go to state 332

state 320

    (27) func -> VOID tipo_void ID actualiza_id crea_func . PARIZQ pars PARDER bloque_func

    PARIZQ          shift and go to state 333


state 321

    (107) par -> COMA tipo ID . actualiza_id crea_var lista par
    (8) actualiza_id -> .

    CORIZQ          reduce using rule 8 (actualiza_id -> .)
    COMA            reduce using rule 8 (actualiza_id -> .)
    PARDER          reduce using rule 8 (actualiza_id -> .)

    actualiza_id                   shift and go to state 334

state 322

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F . PUNTCOM BRADER

    PUNTCOM         shift and go to state 335


state 323

    (19) vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .

    ID              reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    error           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    IF              reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    PRINT           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    REPEAT          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    FORWARD         reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    BACKWARD        reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    LEFT            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    RIGHT           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    TURN            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    SIZE            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    CIRCLE          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    TRIANGLE        reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    SQUARE          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    NGON            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    ARC             reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    UP              reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    DOWN            reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    COLOR           reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)
    RETURN          reduce using rule 19 (vars -> tipo ID actualiza_id crea_var lista vars_lista PUNTCOM mas_vars .)


state 324

    (22) mas_vars -> vars .

    ID              reduce using rule 22 (mas_vars -> vars .)
    error           reduce using rule 22 (mas_vars -> vars .)
    IF              reduce using rule 22 (mas_vars -> vars .)
    PRINT           reduce using rule 22 (mas_vars -> vars .)
    REPEAT          reduce using rule 22 (mas_vars -> vars .)
    FORWARD         reduce using rule 22 (mas_vars -> vars .)
    BACKWARD        reduce using rule 22 (mas_vars -> vars .)
    LEFT            reduce using rule 22 (mas_vars -> vars .)
    RIGHT           reduce using rule 22 (mas_vars -> vars .)
    TURN            reduce using rule 22 (mas_vars -> vars .)
    SIZE            reduce using rule 22 (mas_vars -> vars .)
    CIRCLE          reduce using rule 22 (mas_vars -> vars .)
    TRIANGLE        reduce using rule 22 (mas_vars -> vars .)
    SQUARE          reduce using rule 22 (mas_vars -> vars .)
    NGON            reduce using rule 22 (mas_vars -> vars .)
    ARC             reduce using rule 22 (mas_vars -> vars .)
    UP              reduce using rule 22 (mas_vars -> vars .)
    DOWN            reduce using rule 22 (mas_vars -> vars .)
    COLOR           reduce using rule 22 (mas_vars -> vars .)
    RETURN          reduce using rule 22 (mas_vars -> vars .)


state 325

    (84) ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .

    ID              reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    error           reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    IF              reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    PRINT           reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    REPEAT          reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    FORWARD         reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    BACKWARD        reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    LEFT            reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    RIGHT           reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    TURN            reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    SIZE            reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    CIRCLE          reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    TRIANGLE        reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    SQUARE          reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    NGON            reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    ARC             reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    UP              reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    DOWN            reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    COLOR           reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    RETURN          reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)
    BRADER          reduce using rule 84 (ciclo -> REPEAT push_cont PARIZQ expresion fin_exp_repeat PARDER bloque fin_repeat .)


state 326

    (125) altera -> ROTATE PARIZQ expresion . PARDER

    PARDER          shift and go to state 336


state 327

    (126) altera -> STRETCH PARIZQ expresion . PARDER

    PARDER          shift and go to state 337


state 328

    (127) altera -> FILL PARIZQ PARDER .

    PUNTO           reduce using rule 127 (altera -> FILL PARIZQ PARDER .)
    PUNTCOM         reduce using rule 127 (altera -> FILL PARIZQ PARDER .)


state 329

    (118) instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .

    ID              reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    error           reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 118 (instruccion -> NGON PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)


state 330

    (119) instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .

    ID              reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    error           reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    IF              reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    PRINT           reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    REPEAT          reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    FORWARD         reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BACKWARD        reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    LEFT            reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RIGHT           reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TURN            reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SIZE            reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    CIRCLE          reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    TRIANGLE        reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    SQUARE          reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    NGON            reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    ARC             reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    UP              reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    DOWN            reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    COLOR           reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    RETURN          reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)
    BRADER          reduce using rule 119 (instruccion -> ARC PARIZQ expresion COMA expresion PARDER transform PUNTCOM .)


state 331

    (122) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER . PUNTCOM

    PUNTCOM         shift and go to state 338


state 332

    (26) func -> tipo ID actualiza_id crea_func PARIZQ pars . PARDER bloque_func

    PARDER          shift and go to state 339


state 333

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ . pars PARDER bloque_func
    (105) pars -> . tipo ID actualiza_id crea_var lista par
    (106) pars -> .
    (88) tipo -> . INT actualiza_tipo
    (89) tipo -> . FLOAT actualiza_tipo

    PARDER          reduce using rule 106 (pars -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    pars                           shift and go to state 340
    tipo                           shift and go to state 41

state 334

    (107) par -> COMA tipo ID actualiza_id . crea_var lista par
    (11) crea_var -> .

    CORIZQ          reduce using rule 11 (crea_var -> .)
    COMA            reduce using rule 11 (crea_var -> .)
    PARDER          reduce using rule 11 (crea_var -> .)

    crea_var                       shift and go to state 341

state 335

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM . BRADER

    BRADER          shift and go to state 342


state 336

    (125) altera -> ROTATE PARIZQ expresion PARDER .

    PUNTO           reduce using rule 125 (altera -> ROTATE PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 125 (altera -> ROTATE PARIZQ expresion PARDER .)


state 337

    (126) altera -> STRETCH PARIZQ expresion PARDER .

    PUNTO           reduce using rule 126 (altera -> STRETCH PARIZQ expresion PARDER .)
    PUNTCOM         reduce using rule 126 (altera -> STRETCH PARIZQ expresion PARDER .)


state 338

    (122) instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .

    ID              reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    error           reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    IF              reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    PRINT           reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    REPEAT          reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    FORWARD         reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    BACKWARD        reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    LEFT            reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    RIGHT           reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    TURN            reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    SIZE            reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    CIRCLE          reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    TRIANGLE        reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    SQUARE          reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    NGON            reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    ARC             reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    UP              reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    DOWN            reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    COLOR           reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    RETURN          reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)
    BRADER          reduce using rule 122 (instruccion -> COLOR PARIZQ expresion COMA expresion COMA expresion PARDER PUNTCOM .)


state 339

    (26) func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER . bloque_func
    (12) bloque_func -> . BRAIZQ vars_estatutos RETURN returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 343

state 340

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars . PARDER bloque_func

    PARDER          shift and go to state 344


state 341

    (107) par -> COMA tipo ID actualiza_id crea_var . lista par
    (91) lista -> . CORIZQ expresion CORDER matriz
    (92) lista -> .

    CORIZQ          shift and go to state 35
    COMA            reduce using rule 92 (lista -> .)
    PARDER          reduce using rule 92 (lista -> .)

    lista                          shift and go to state 345

state 342

    (3) ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .

    VOID            reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    INT             reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    FLOAT           reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)
    MAIN            reduce using rule 3 (ajustes -> CANVAS BRAIZQ WIDTH CTE_I PUNTCOM HEIGHT CTE_I PUNTCOM BACKGROUND CTE_F COMA CTE_F COMA CTE_F PUNTCOM BRADER .)


state 343

    (26) func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .

    VOID            reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    INT             reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    FLOAT           reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    MAIN            reduce using rule 26 (func -> tipo ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)


state 344

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER . bloque_func
    (12) bloque_func -> . BRAIZQ vars_estatutos RETURN returns BRADER

    BRAIZQ          shift and go to state 39

    bloque_func                    shift and go to state 346

state 345

    (107) par -> COMA tipo ID actualiza_id crea_var lista . par
    (107) par -> . COMA tipo ID actualiza_id crea_var lista par
    (108) par -> .

    COMA            shift and go to state 282
    PARDER          reduce using rule 108 (par -> .)

    par                            shift and go to state 347

state 346

    (27) func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .

    VOID            reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    INT             reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    FLOAT           reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)
    MAIN            reduce using rule 27 (func -> VOID tipo_void ID actualiza_id crea_func PARIZQ pars PARDER bloque_func .)


state 347

    (107) par -> COMA tipo ID actualiza_id crea_var lista par .

    PARDER          reduce using rule 107 (par -> COMA tipo ID actualiza_id crea_var lista par .)

